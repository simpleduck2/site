["#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Rotation;\nattribute highp vec4 in_POSITION0;\nvarying highp vec3 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0.x = _Rotation * 0.0174532942;\n    u_xlat1.x = cos(u_xlat0.x);\n    u_xlat0.x = sin(u_xlat0.x);\n    u_xlat2.x = (-u_xlat0.x);\n    u_xlat2.y = u_xlat1.x;\n    u_xlat2.z = u_xlat0.x;\n    u_xlat0.x = dot(u_xlat2.zy, in_POSITION0.xz);\n    u_xlat3 = dot(u_xlat2.yx, in_POSITION0.xz);\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * vec4(u_xlat3) + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xyz = in_POSITION0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _Tex_HDR;\nuniform \tmediump vec4 _Tint;\nuniform \tmediump float _Exposure;\nuniform lowp samplerCube _Tex;\nvarying highp vec3 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0 = textureCube(_Tex, vs_TEXCOORD0.xyz);\n    u_xlat16_1.x = u_xlat10_0.w + -1.0;\n    u_xlat16_1.x = _Tex_HDR.w * u_xlat16_1.x + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * _Tex_HDR.x;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * _Tint.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(_Exposure);\n    SV_Target0.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;\n    u_xlat16_0 = u_xlat16_0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat16_0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD1.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD1.w = u_xlat1.w;\n    vs_TEXCOORD1.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tfloat _InvFade;\nuniform highp sampler2D _CameraDepthTexture;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_2;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;\n    u_xlat0.x = texture2D(_CameraDepthTexture, u_xlat0.xy).x;\n    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;\n    u_xlat0.x = float(1.0) / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD1.z);\n    u_xlat0.x = u_xlat0.x * _InvFade;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;\n    u_xlat1.w = u_xlat0.x * u_xlat0.x;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0.w = u_xlat10_2.w;\n    u_xlat1.xyz = u_xlat10_2.xyz * vs_COLOR0.xyz;\n    u_xlat0 = u_xlat0.xxxw * u_xlat1;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_0.xyz;\n    SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 roundEven(vec2 a) { a.x = roundEven(a.x); a.y = roundEven(a.y); return a; }\nvec3 roundEven(vec3 a) { a.x = roundEven(a.x); a.y = roundEven(a.y); a.z = roundEven(a.z); return a; }\nvec4 roundEven(vec4 a) { a.x = roundEven(a.x); a.y = roundEven(a.y); a.z = roundEven(a.z); a.w = roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat0.xy = u_xlat0.xy * u_xlat1.xy;\n    u_xlat0.xy = roundEven(u_xlat0.xy);\n    u_xlat0.xy = u_xlat0.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat0.ww * u_xlat0.xy;\n    gl_Position.zw = u_xlat0.zw;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tfloat _EnableExternalAlpha;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _AlphaTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_AlphaTex, vs_TEXCOORD0.xy).x;\n    u_xlat1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 + (-u_xlat1.w);\n    u_xlat1.w = _EnableExternalAlpha * u_xlat0 + u_xlat1.w;\n    u_xlat16_0 = u_xlat1 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_0.xyz;\n    SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 = u_xlat10_0;\n    return;\n}\n\n","","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat10_0 * _Color;\n    u_xlat16_1 = u_xlat16_0.w * vs_COLOR0.w + (-_Cutoff);\n    u_xlat2.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat2.xyz;\n    u_xlat16_1 = u_xlat16_1 + 9.99999975e-05;\n    u_xlatb2 = u_xlat16_1<0.0;\n    if(u_xlatb2){discard;}\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat10_0 * _Color;\n    u_xlat0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec3 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nlowp vec3 u_xlat10_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat10_0 * _Color;\n    u_xlat0 = u_xlat16_0 * vs_COLOR0;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat0.xyz = u_xlat10_1.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z) + u_xlat0.xyz;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp float vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat0.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);\n    vs_TEXCOORD0 = exp2(u_xlat0.x);\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp float vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    u_xlat6 = vs_TEXCOORD0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp float vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nfloat u_xlat11;\nbool u_xlatb11;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat10_0 * _Color;\n    u_xlat16_1 = u_xlat16_0.w * vs_COLOR0.w + (-_Cutoff);\n    u_xlat2.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n    u_xlat16_1 = u_xlat16_1 + 9.99999975e-05;\n    u_xlatb11 = u_xlat16_1<0.0;\n    if(u_xlatb11){discard;}\n    u_xlat11 = vs_TEXCOORD0;\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat11);\n    SV_Target0.xyz = u_xlat2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp float vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nfloat u_xlat1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat10_0 * _Color;\n    u_xlat0 = u_xlat16_0 * vs_COLOR0;\n    u_xlat1 = vs_TEXCOORD0;\n    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat1);\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec3 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_COLOR0;\nvarying highp float vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat10_0 * _Color;\n    u_xlat0 = u_xlat16_0 * vs_COLOR0;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_EmissionColor.x, _EmissionColor.y, _EmissionColor.z) + u_xlat0.xyz;\n    u_xlat7 = vs_TEXCOORD0;\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat7);\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp float vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat2;\nfloat u_xlat5;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat5 = u_xlat1.z * unity_FogParams.x;\n    u_xlat5 = u_xlat5 * (-u_xlat5);\n    vs_TEXCOORD0 = exp2(u_xlat5);\n    u_xlat2 = u_xlat0.y * hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z * u_xlat0.x + u_xlat2;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[2].z * u_xlat0.z + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat0.x;\n    vs_TEXCOORD3.z = (-u_xlat0.x);\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD3.w = u_xlat1.w;\n    vs_TEXCOORD3.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat10_0 + _TextureSampleAdd;\n    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0 = u_xlat16_0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat10_0 + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat1.w * u_xlat0.x + -0.00100000005;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    u_xlatb0.x = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    SV_Target0 = vec4(u_xlat16_1) * vs_COLOR0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_4 = vs_COLOR0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * vs_COLOR0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_3) * vs_COLOR0;\n    SV_Target0 = vec4(u_xlat16_1) * u_xlat16_0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_4 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_4) * vs_COLOR0;\n    u_xlat16_4 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump float u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal) + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 * _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.w = u_xlat1.y;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD4.z = u_xlat3.w;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat16_5 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);\n    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nfloat u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nmediump float u_xlat16_15;\nvec2 u_xlat16;\nfloat u_xlat24;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_0.x = (-u_xlat10_0.x) + 0.5;\n    u_xlat0.x = u_xlat16_0.x + (-vs_TEXCOORD5.x);\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;\n    u_xlat7 = _OutlineWidth * _ScaleRatioA;\n    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;\n    u_xlat16_15 = min(u_xlat7, 1.0);\n    u_xlat16_15 = sqrt(u_xlat16_15);\n    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _OutlineColor.xyz;\n    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat16_9 = u_xlat10_0.w * u_xlat16_2.x;\n    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex, u_xlat16.xy);\n    u_xlat16_4 = vs_COLOR0 * _FaceColor;\n    u_xlat16_5 = u_xlat10_3 * u_xlat16_4;\n    u_xlat16_6.xyz = u_xlat16_5.www * u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-u_xlat16_6.xyz);\n    u_xlat16_6.w = u_xlat16_2.x * u_xlat10_0.w + (-u_xlat16_5.w);\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;\n    u_xlat16_2.w = u_xlat16_4.w * u_xlat10_3.w + u_xlat16_0.w;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_5.www + u_xlat16_0.xyz;\n    u_xlat3 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat10 = u_xlat3 * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat3 * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;\n    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;\n    u_xlat16_3.x = max(u_xlat16_0.w, 9.99999975e-05);\n    u_xlat16_3.xyz = u_xlat16_0.xyz / u_xlat16_3.xxx;\n    SV_Target0.w = u_xlat16_0.w;\n    u_xlat4.x = vs_TEXCOORD2.z;\n    u_xlat4.y = vs_TEXCOORD3.z;\n    u_xlat4.z = vs_TEXCOORD4.z;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat16_4.xyz = log2(u_xlat16_1.yzw);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_8.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat16_6.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal) + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 * _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD3.w = u_xlat1.y;\n    vs_TEXCOORD4.z = u_xlat3.w;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat0 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat2 = u_xlat3.yyyy * u_xlat0;\n    u_xlat0 = u_xlat0 * u_xlat0;\n    u_xlat4 = (-u_xlat1.xxxx) + unity_4LightPosX0;\n    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;\n    u_xlat2 = u_xlat4 * u_xlat3.xxxx + u_xlat2;\n    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;\n    u_xlat0 = u_xlat1 * u_xlat1 + u_xlat0;\n    u_xlat1 = u_xlat1 * u_xlat3.wwzw + u_xlat2;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat2 = inversesqrt(u_xlat0);\n    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat1 = u_xlat1 * u_xlat2;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat0 * u_xlat1;\n    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_5.x = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_5.x);\n    u_xlat16_2 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD7.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _FaceTex_ST;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 roundEven(vec2 a) { a.x = roundEven(a.x); a.y = roundEven(a.y); return a; }\nvec3 roundEven(vec3 a) { a.x = roundEven(a.x); a.y = roundEven(a.y); a.z = roundEven(a.z); return a; }\nvec4 roundEven(vec4 a) { a.x = roundEven(a.x); a.y = roundEven(a.y); a.z = roundEven(a.z); a.w = roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    vs_COLOR0 = in_COLOR0 * _FaceColor;\n    u_xlat6.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat6.x = floor(u_xlat6.x);\n    u_xlat6.y = (-u_xlat6.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat6.xy = u_xlat6.xy * _FaceTex_ST.xy;\n    vs_TEXCOORD1.xy = u_xlat6.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat6.x = _ScreenParams.x * hlslcc_mtx4x4glstate_matrix_projection[0].x;\n    u_xlat6.y = _ScreenParams.y * hlslcc_mtx4x4glstate_matrix_projection[1].y;\n    u_xlat0.xy = u_xlat1.ww / abs(u_xlat6.xy);\n    u_xlat0.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat0.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_FaceTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    SV_Target0.w = u_xlat10_0.x * vs_COLOR0.w;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = vs_COLOR0.w * u_xlat10_0.x + -0.00100000005;\n    u_xlat16_3 = u_xlat10_0.x * vs_COLOR0.w;\n    SV_Target0.w = u_xlat16_3;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    u_xlat10_0.xyz = texture2D(_FaceTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec2 u_xlat1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_FaceTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2);\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_5 = u_xlat10_0.x * vs_COLOR0.w;\n    SV_Target0.w = u_xlat16_2 * u_xlat16_5;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat10_0.x * vs_COLOR0.w;\n    u_xlat16_5 = u_xlat16_3 * u_xlat16_1 + -0.00100000005;\n    u_xlat16_3 = u_xlat16_1 * u_xlat16_3;\n    SV_Target0.w = u_xlat16_3;\n    u_xlatb0 = u_xlat16_5<0.0;\n    if(u_xlatb0){discard;}\n    u_xlat10_0.xyz = texture2D(_FaceTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat10_0 * u_xlat10_1;\n    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0 = u_xlat16_0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nbool u_xlatb0;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat10_0 * u_xlat10_1;\n    u_xlat16_2 = u_xlat16_0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb0 = u_xlat16_2<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec2 u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat10_0 * u_xlat10_1;\n    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    SV_Target0 = u_xlat16_0 * vec4(u_xlat16_2);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec2 u_xlat1;\nlowp vec4 u_xlat10_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat10_1 = texture2D(_FaceTex, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat10_0 * u_xlat10_1;\n    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat16_0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_2);\n    SV_Target0 = u_xlat16_0;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tmediump vec4 _ReflectFaceColor;\nuniform \tmediump vec4 _ReflectOutlineColor;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube _Cube;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_11;\nvec2 u_xlat12;\nmediump vec3 u_xlat16_12;\nbool u_xlatb12;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nmediump float u_xlat16_16;\nlowp vec3 u_xlat10_16;\nbool u_xlatb22;\nfloat u_xlat30;\nmediump float u_xlat16_30;\nlowp float u_xlat10_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_36;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD2.w;\n    u_xlat0.y = vs_TEXCOORD3.w;\n    u_xlat0.z = vs_TEXCOORD4.w;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_31 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = inversesqrt(u_xlat16_31);\n    u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz;\n    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;\n    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat2.z = 0.0;\n    u_xlat3 = (-u_xlat2.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat4.x = texture2D(_MainTex, u_xlat3.xy).w;\n    u_xlat4.z = texture2D(_MainTex, u_xlat3.zw).w;\n    u_xlat4.y = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat4.w = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat4;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat2.x = _BevelWidth + _OutlineWidth;\n    u_xlat2.x = max(u_xlat2.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat2.xxxx;\n    u_xlat2.x = u_xlat2.x * _Bevel;\n    u_xlat2.x = u_xlat2.x * _GradientScale;\n    u_xlat2.x = u_xlat2.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat3 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat3 = -abs(u_xlat3) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat12.x = _ShaderFlags * 0.5;\n    u_xlatb22 = u_xlat12.x>=(-u_xlat12.x);\n    u_xlat12.x = fract(abs(u_xlat12.x));\n    u_xlat12.x = (u_xlatb22) ? u_xlat12.x : (-u_xlat12.x);\n    u_xlatb12 = u_xlat12.x>=0.5;\n    u_xlat0 = (bool(u_xlatb12)) ? u_xlat3 : u_xlat0;\n    u_xlat3 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat3 = sin(u_xlat3);\n    u_xlat3 = (-u_xlat0) + u_xlat3;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat3 + u_xlat0;\n    u_xlat12.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat12.xxxx);\n    u_xlat0.xz = u_xlat2.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat2.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat30 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat3.x = u_xlat30 * u_xlat0.z;\n    u_xlat3.yz = vec2(u_xlat30) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat2.xxx * u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz * u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat3.zxy * u_xlat0.yzx + (-u_xlat2.xyz);\n    u_xlat10_30 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_30 = (-u_xlat10_30) + 0.5;\n    u_xlat30 = u_xlat16_30 + (-vs_TEXCOORD5.x);\n    u_xlat30 = u_xlat30 * vs_TEXCOORD5.y + 0.5;\n    u_xlat2.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_31 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_5.x = min(u_xlat2.x, 1.0);\n    u_xlat16_5.x = sqrt(u_xlat16_5.x);\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat12.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_3 = texture2D(_OutlineTex, u_xlat12.xy);\n    u_xlat16_12.xyz = u_xlat10_3.xyz * _OutlineColor.xyz;\n    u_xlat16_3.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat16_13 = u_xlat10_3.w * u_xlat16_3.x;\n    u_xlat4.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat4.xy);\n    u_xlat16_5 = vs_COLOR0 * _FaceColor;\n    u_xlat16_6 = u_xlat10_4 * u_xlat16_5;\n    u_xlat16_7.xyz = u_xlat16_6.www * u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_12.xyz * vec3(u_xlat16_13) + (-u_xlat16_7.xyz);\n    u_xlat16_7.w = u_xlat16_3.x * u_xlat10_3.w + (-u_xlat16_6.w);\n    u_xlat16_3 = vec4(u_xlat16_31) * u_xlat16_7;\n    u_xlat16_4.w = u_xlat16_5.w * u_xlat10_4.w + u_xlat16_3.w;\n    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_6.www + u_xlat16_3.xyz;\n    u_xlat16_31 = (-u_xlat2.x) * 0.5 + u_xlat30;\n    u_xlat30 = u_xlat2.x * 0.5 + u_xlat30;\n    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);\n    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat12.x = u_xlat2.x * vs_TEXCOORD5.y;\n    u_xlat16_7.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_31 = u_xlat12.x * 0.5 + u_xlat16_31;\n    u_xlat16_31 = u_xlat16_31 / u_xlat16_7.x;\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_2 = vec4(u_xlat16_31) * u_xlat16_4;\n    u_xlat6.x = (-_BumpFace) + _BumpOutline;\n    u_xlat6.x = u_xlat30 * u_xlat6.x + _BumpFace;\n    u_xlat10_16.xyz = texture2D(_BumpMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_7.xyz = u_xlat10_16.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat6.xyz = u_xlat16_7.xyz * u_xlat6.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat6.xyz = u_xlat16_2.www * u_xlat6.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);\n    u_xlat6.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6.x = inversesqrt(u_xlat6.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat6.xxx;\n    u_xlat16_7.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_7.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat16_6.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n    u_xlat3.xyz = u_xlat16_6.xxx * u_xlat16_7.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz, u_xlat16_1.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_1.x);\n    u_xlat16_16 = (-_FaceShininess) + _OutlineShininess;\n    u_xlat16 = u_xlat30 * u_xlat16_16 + _FaceShininess;\n    u_xlat16_1.x = u_xlat16 * 128.0;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_1.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_1.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_1.xyz;\n    u_xlat16_1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);\n    u_xlat16_36 = max(u_xlat16_2.w, 9.99999975e-05);\n    u_xlat16_8.xyz = u_xlat16_2.xyz / vec3(u_xlat16_36);\n    u_xlat16_11.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_1.xxx + u_xlat16_6.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat3);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat3);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_9.xyz = log2(u_xlat16_1.xyz);\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_9.xyz = exp2(u_xlat16_9.xyz);\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz + u_xlat16_6.xyz;\n    u_xlat16_6.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;\n    u_xlat6.xyz = vec3(u_xlat30) * u_xlat16_6.xyz + _ReflectFaceColor.xyz;\n    u_xlat8.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat8.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat30 = dot(vs_TEXCOORD6.xyz, u_xlat0.xyz);\n    u_xlat30 = u_xlat30 + u_xlat30;\n    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + vs_TEXCOORD6.xyz;\n    u_xlat10_0.xyz = textureCube(_Cube, u_xlat0.xyz).xyz;\n    u_xlat0.xyz = u_xlat6.xyz * u_xlat10_0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.www + u_xlat16_1.xyz;\n    SV_Target0.w = u_xlat16_2.w;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx * u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    vs_TEXCOORD8.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nmediump float u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_12;\nlowp vec3 u_xlat10_13;\nbool u_xlatb17;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nlowp float u_xlat10_24;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat3.x = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat3.z = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat3.w = texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_24 = (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat16_24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat16_9.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;\n    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat16_10 = u_xlat10_2.w * u_xlat16_2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex, u_xlat3.xy);\n    u_xlat16_5 = vs_COLOR0 * _FaceColor;\n    u_xlat16_6 = u_xlat10_3 * u_xlat16_5;\n    u_xlat16_12.xyz = u_xlat16_6.www * u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * vec3(u_xlat16_10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat16_2.x * u_xlat10_2.w + (-u_xlat16_6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat16_5.w * u_xlat10_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat10_13.xyz = texture2D(_BumpMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_4.xyz = u_xlat10_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat6.xyz * vec3(u_xlat29) + u_xlat5.xyz;\n    u_xlat16_4.w = dot(u_xlat16_0.xyz, u_xlat5.xyz);\n    u_xlat16_7.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx;\n    u_xlat16_4.x = dot(u_xlat16_0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.xw = max(u_xlat16_4.xw, vec2(0.0, 0.0));\n    u_xlat16_0.x = log2(u_xlat16_4.x);\n    u_xlat16_8 = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 * u_xlat16_8 + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_4.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat8.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat8.xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat8.xyz;\n    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.x = texture2D(_LightTexture0, u_xlat8.xx).x;\n    u_xlat16_4.xyz = u_xlat8.xxx * _LightColor0.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xyz * _SpecColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz;\n    u_xlat16_24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat16_5.xyz = u_xlat16_1.xyz / vec3(u_xlat16_24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat16_0.xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD7;\nvec3 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat u_xlat4;\nint u_xlati4;\nvec3 u_xlat6;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat12);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat12 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat12;\n    u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat12;\n    u_xlat12 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat12;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat12) / u_xlat2.xy;\n    u_xlat12 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat13 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat13 = u_xlat13 * u_xlat2.x;\n    u_xlat2.x = u_xlat12 * u_xlat13;\n    u_xlat6.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat6.x * u_xlat2.x;\n    u_xlat12 = u_xlat12 * u_xlat13 + (-u_xlat2.x);\n    u_xlat6.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat6.xyz;\n    u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat6.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati4 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati4) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat6.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat6.xyz;\n    u_xlat1.x = dot(u_xlat0.yzx, u_xlat1.xyz);\n    vs_TEXCOORD6.y = abs(u_xlat1.x) * u_xlat12 + u_xlat2.x;\n    u_xlatb12 = 0.0>=in_TEXCOORD1.y;\n    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);\n    u_xlat1.x = (-_WeightNormal) + _WeightBold;\n    u_xlat12 = u_xlat12 * u_xlat1.x + _WeightNormal;\n    u_xlat12 = u_xlat12 * 0.25 + _FaceDilate;\n    u_xlat12 = u_xlat12 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat12 * 0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat3.xyz);\n    u_xlat4 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat3.xyz;\n    vs_TEXCOORD2.y = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat1.x;\n    vs_TEXCOORD4.x = u_xlat1.y;\n    vs_TEXCOORD3.y = u_xlat3.y;\n    vs_TEXCOORD4.y = u_xlat3.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat6.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat6.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat6.zzz + u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nfloat u_xlat8;\nmediump float u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_12;\nlowp vec3 u_xlat10_13;\nbool u_xlatb17;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nlowp float u_xlat10_24;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat3.x = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat3.z = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat3.w = texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_24 = (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat16_24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat16_9.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;\n    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat16_10 = u_xlat10_2.w * u_xlat16_2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex, u_xlat3.xy);\n    u_xlat16_5 = vs_COLOR0 * _FaceColor;\n    u_xlat16_6 = u_xlat10_3 * u_xlat16_5;\n    u_xlat16_12.xyz = u_xlat16_6.www * u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * vec3(u_xlat16_10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat16_2.x * u_xlat10_2.w + (-u_xlat16_6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat16_5.w * u_xlat10_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat10_13.xyz = texture2D(_BumpMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_4.xyz = u_xlat10_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat29) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_28 = inversesqrt(u_xlat16_28);\n    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat16_0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.y = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));\n    u_xlat16_0.x = log2(u_xlat16_4.x);\n    u_xlat16_8 = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8 = u_xlat24 * u_xlat16_8 + _FaceShininess;\n    u_xlat16_4.x = u_xlat8 * 128.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_4.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat16_4.xzw = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xzw;\n    u_xlat16_24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat16_5.xyz = u_xlat16_1.xyz / vec3(u_xlat16_24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xzw = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = u_xlat16_4.xzw * u_xlat16_4.yyy + u_xlat16_0.xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD7;\nvarying highp vec4 vs_TEXCOORD8;\nvec4 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx * u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat1.zzzz + u_xlat0;\n    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat1.wwww + u_xlat0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump float u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_12;\nlowp vec3 u_xlat10_13;\nbool u_xlatb16;\nbool u_xlatb17;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nlowp float u_xlat10_24;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat3.x = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat3.z = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat3.w = texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_24 = (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat16_24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat16_9.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;\n    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat16_10 = u_xlat10_2.w * u_xlat16_2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex, u_xlat3.xy);\n    u_xlat16_5 = vs_COLOR0 * _FaceColor;\n    u_xlat16_6 = u_xlat10_3 * u_xlat16_5;\n    u_xlat16_12.xyz = u_xlat16_6.www * u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * vec3(u_xlat16_10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat16_2.x * u_xlat10_2.w + (-u_xlat16_6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat16_5.w * u_xlat10_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat10_13.xyz = texture2D(_BumpMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_4.xyz = u_xlat10_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat6.xyz * vec3(u_xlat29) + u_xlat5.xyz;\n    u_xlat16_4.w = dot(u_xlat16_0.xyz, u_xlat5.xyz);\n    u_xlat16_7.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx;\n    u_xlat16_4.x = dot(u_xlat16_0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.xw = max(u_xlat16_4.xw, vec2(0.0, 0.0));\n    u_xlat16_0.x = log2(u_xlat16_4.x);\n    u_xlat16_8 = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 * u_xlat16_8 + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_4.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat2 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat2;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat8.xy = u_xlat2.xy / u_xlat2.ww;\n    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);\n    u_xlat8.x = texture2D(_LightTexture0, u_xlat8.xy).w;\n    u_xlatb16 = 0.0<u_xlat2.z;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat16_4.x = (u_xlatb16) ? 1.0 : 0.0;\n    u_xlat16_4.x = u_xlat8.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat24 * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xyz * _SpecColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz;\n    u_xlat16_24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat16_5.xyz = u_xlat16_1.xyz / vec3(u_xlat16_24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat16_0.xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nmediump float u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_12;\nlowp vec3 u_xlat10_13;\nfloat u_xlat16;\nbool u_xlatb17;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nlowp float u_xlat10_24;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat3.x = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat3.z = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat3.w = texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_24 = (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat16_24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat16_9.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;\n    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat16_10 = u_xlat10_2.w * u_xlat16_2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex, u_xlat3.xy);\n    u_xlat16_5 = vs_COLOR0 * _FaceColor;\n    u_xlat16_6 = u_xlat10_3 * u_xlat16_5;\n    u_xlat16_12.xyz = u_xlat16_6.www * u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * vec3(u_xlat16_10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat16_2.x * u_xlat10_2.w + (-u_xlat16_6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat16_5.w * u_xlat10_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat10_13.xyz = texture2D(_BumpMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_4.xyz = u_xlat10_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat5.xyz = vec3(u_xlat29) * u_xlat5.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat6.xyz * vec3(u_xlat29) + u_xlat5.xyz;\n    u_xlat16_4.w = dot(u_xlat16_0.xyz, u_xlat5.xyz);\n    u_xlat16_7.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xxx;\n    u_xlat16_4.x = dot(u_xlat16_0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.xw = max(u_xlat16_4.xw, vec2(0.0, 0.0));\n    u_xlat16_0.x = log2(u_xlat16_4.x);\n    u_xlat16_8 = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 * u_xlat16_8 + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_4.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat8.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat8.xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat8.xyz;\n    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat5.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.x = textureCube(_LightTexture0, u_xlat8.xyz).w;\n    u_xlat16 = texture2D(_LightTextureB0, u_xlat5.xx).x;\n    u_xlat8.x = u_xlat8.x * u_xlat16;\n    u_xlat16_4.xyz = u_xlat8.xxx * _LightColor0.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xyz * _SpecColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz;\n    u_xlat16_24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat16_5.xyz = u_xlat16_1.xyz / vec3(u_xlat16_24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat16_0.xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD7;\nvarying highp vec2 vs_TEXCOORD8;\nvec3 u_xlat0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nfloat u_xlat5;\nint u_xlati5;\nfloat u_xlat7;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat15);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat15 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat15;\n    u_xlat15 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat15;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat15) / u_xlat2.xy;\n    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat7 = u_xlat12 * u_xlat7;\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat7);\n    u_xlat2.xzw = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xzw;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xzw;\n    u_xlat2.xzw = u_xlat2.xzw + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xzw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati5 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati5) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat2.xzw = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = (-u_xlat2.xzw) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xzw;\n    u_xlat2.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xzw = u_xlat2.xxx * u_xlat3.xyz;\n    u_xlat2.x = dot(u_xlat0.yzx, u_xlat2.xzw);\n    vs_TEXCOORD6.y = abs(u_xlat2.x) * u_xlat15 + u_xlat7;\n    u_xlatb15 = 0.0>=in_TEXCOORD1.y;\n    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat2.x = (-_WeightNormal) + _WeightBold;\n    u_xlat15 = u_xlat15 * u_xlat2.x + _WeightNormal;\n    u_xlat15 = u_xlat15 * 0.25 + _FaceDilate;\n    u_xlat15 = u_xlat15 * _ScaleRatioA;\n    vs_TEXCOORD6.x = u_xlat15 * 0.5;\n    vs_TEXCOORD2.z = u_xlat0.y;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat5 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat5) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.z = u_xlat0.z;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat0.xyz = u_xlat3.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat3.xxx + u_xlat0.xyz;\n    vs_TEXCOORD7.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat3.zzz + u_xlat0.xyz;\n    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;\n    vs_TEXCOORD8.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _Bevel;\nuniform \tfloat _BevelOffset;\nuniform \tfloat _BevelWidth;\nuniform \tfloat _BevelClamp;\nuniform \tfloat _BevelRoundness;\nuniform \tfloat _BumpOutline;\nuniform \tfloat _BumpFace;\nuniform \tfloat _ShaderFlags;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tmediump float _FaceShininess;\nuniform \tmediump float _OutlineShininess;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec2 u_xlat8;\nmediump float u_xlat16_8;\nvec2 u_xlat9;\nmediump vec3 u_xlat16_9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_12;\nlowp vec3 u_xlat10_13;\nbool u_xlatb17;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nlowp float u_xlat10_24;\nmediump float u_xlat16_28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD6.x + _BevelOffset;\n    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);\n    u_xlat1.z = 0.0;\n    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;\n    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;\n    u_xlat3.x = texture2D(_MainTex, u_xlat2.xy).w;\n    u_xlat3.z = texture2D(_MainTex, u_xlat2.zw).w;\n    u_xlat3.y = texture2D(_MainTex, u_xlat1.xy).w;\n    u_xlat3.w = texture2D(_MainTex, u_xlat1.zw).w;\n    u_xlat0 = u_xlat0.xxxx + u_xlat3;\n    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);\n    u_xlat1.x = _BevelWidth + _OutlineWidth;\n    u_xlat1.x = max(u_xlat1.x, 0.00999999978);\n    u_xlat0 = u_xlat0 / u_xlat1.xxxx;\n    u_xlat1.x = u_xlat1.x * _Bevel;\n    u_xlat1.x = u_xlat1.x * _GradientScale;\n    u_xlat1.x = u_xlat1.x * -2.0;\n    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);\n    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat9.x = _ShaderFlags * 0.5;\n    u_xlatb17 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.x = fract(abs(u_xlat9.x));\n    u_xlat9.x = (u_xlatb17) ? u_xlat9.x : (-u_xlat9.x);\n    u_xlatb9 = u_xlat9.x>=0.5;\n    u_xlat0 = (bool(u_xlatb9)) ? u_xlat2 : u_xlat0;\n    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);\n    u_xlat2 = sin(u_xlat2);\n    u_xlat2 = (-u_xlat0) + u_xlat2;\n    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;\n    u_xlat9.x = (-_BevelClamp) + 1.0;\n    u_xlat0 = min(u_xlat0, u_xlat9.xxxx);\n    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;\n    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);\n    u_xlat0.x = float(-1.0);\n    u_xlat0.w = float(1.0);\n    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat24 = dot(u_xlat0.zw, u_xlat0.zw);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = u_xlat24 * u_xlat0.z;\n    u_xlat2.yz = vec2(u_xlat24) * vec2(1.0, 0.0);\n    u_xlat0.z = 0.0;\n    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;\n    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);\n    u_xlat10_24 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_24 = (-u_xlat10_24) + 0.5;\n    u_xlat24 = u_xlat16_24 + (-vs_TEXCOORD6.x);\n    u_xlat24 = u_xlat24 * vs_TEXCOORD6.y + 0.5;\n    u_xlat1.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat1.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_4.x = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_12.x = min(u_xlat1.x, 1.0);\n    u_xlat16_12.x = sqrt(u_xlat16_12.x);\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x;\n    u_xlat9.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_2 = texture2D(_OutlineTex, u_xlat9.xy);\n    u_xlat16_9.xyz = u_xlat10_2.xyz * _OutlineColor.xyz;\n    u_xlat16_2.x = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat16_10 = u_xlat10_2.w * u_xlat16_2.x;\n    u_xlat3.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex, u_xlat3.xy);\n    u_xlat16_5 = vs_COLOR0 * _FaceColor;\n    u_xlat16_6 = u_xlat10_3 * u_xlat16_5;\n    u_xlat16_12.xyz = u_xlat16_6.www * u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_9.xyz * vec3(u_xlat16_10) + (-u_xlat16_12.xyz);\n    u_xlat16_7.w = u_xlat16_2.x * u_xlat10_2.w + (-u_xlat16_6.w);\n    u_xlat16_2 = u_xlat16_4.xxxx * u_xlat16_7;\n    u_xlat16_3.w = u_xlat16_5.w * u_xlat10_3.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_6.www + u_xlat16_2.xyz;\n    u_xlat16_4.x = (-u_xlat1.x) * 0.5 + u_xlat24;\n    u_xlat24 = u_xlat1.x * 0.5 + u_xlat24;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat1.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9.x = u_xlat1.x * vs_TEXCOORD6.y;\n    u_xlat16_12.x = u_xlat1.x * vs_TEXCOORD6.y + 1.0;\n    u_xlat16_4.x = u_xlat9.x * 0.5 + u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_12.x;\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_4.xxxx;\n    u_xlat5.x = (-_BumpFace) + _BumpOutline;\n    u_xlat5.x = u_xlat24 * u_xlat5.x + _BumpFace;\n    u_xlat10_13.xyz = texture2D(_BumpMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_4.xyz = u_xlat10_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx + vec3(-0.0, -0.0, -1.0);\n    u_xlat5.xyz = u_xlat16_1.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);\n    u_xlat5.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat5.x = inversesqrt(u_xlat5.x);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat5.xxx;\n    u_xlat16_4.x = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.y = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));\n    u_xlat16_4.z = dot(vs_TEXCOORD4.xyz, (-u_xlat0.xyz));\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat29) + _WorldSpaceLightPos0.xyz;\n    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_28 = inversesqrt(u_xlat16_28);\n    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat16_0.xyz, u_xlat16_4.xyz);\n    u_xlat16_4.y = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_4.xy = max(u_xlat16_4.xy, vec2(0.0, 0.0));\n    u_xlat16_0.x = log2(u_xlat16_4.x);\n    u_xlat16_8 = (-_FaceShininess) + _OutlineShininess;\n    u_xlat8.x = u_xlat24 * u_xlat16_8 + _FaceShininess;\n    u_xlat16_4.x = u_xlat8.x * 128.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_4.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat8.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat8.xy;\n    u_xlat8.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat8.xy;\n    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat8.x = texture2D(_LightTexture0, u_xlat8.xy).w;\n    u_xlat16_4.xzw = u_xlat8.xxx * _LightColor0.xyz;\n    u_xlat16_7.xyz = u_xlat16_4.xzw * _SpecColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz;\n    u_xlat16_24 = max(u_xlat16_1.w, 9.99999975e-05);\n    u_xlat16_5.xyz = u_xlat16_1.xyz / vec3(u_xlat16_24);\n    SV_Target0.w = u_xlat16_1.w;\n    u_xlat16_4.xzw = u_xlat16_4.xzw * u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_4.xzw * u_xlat16_4.yyy + u_xlat16_0.xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nlowp vec4 u_xlat10_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat16_2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat16_4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4);\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat16_4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat u_xlat4;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat0.x = u_xlat1.x * u_xlat6.x + 1.0;\n    u_xlat0.x = u_xlat6.x / u_xlat0.x;\n    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;\n    u_xlat8.x = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat1.xy = u_xlat1.xy / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n    vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;\n    u_xlat0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nlowp vec4 u_xlat10_4;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_6 = u_xlat0.x * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat16_2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat16_4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4);\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat16_4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_2 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat16_1 = (-u_xlat16_0.w) * u_xlat16_1 + 1.0;\n    u_xlat10_4.x = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat4 = u_xlat10_4.x * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat0 = vec4(u_xlat4) * vs_COLOR1;\n    u_xlat0 = u_xlat0 * vec4(u_xlat16_1) + u_xlat16_2;\n    SV_Target0 = u_xlat0 * vs_COLOR0.wwww;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump float u_xlat16_4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat16_2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat16_4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4);\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat16_4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_3.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4) + u_xlat16_2.xyz;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_6 = u_xlat0.x * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat16_2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat16_4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4);\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat16_4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_2 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat16_1 = (-u_xlat16_0.w) * u_xlat16_1 + 1.0;\n    u_xlat10_4.x = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat4 = u_xlat10_4.x * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat0 = vec4(u_xlat4) * vs_COLOR1;\n    u_xlat0 = u_xlat0 * vec4(u_xlat16_1) + u_xlat16_2;\n    u_xlat16_1 = u_xlat0.w + -0.00100000005;\n    SV_Target0 = u_xlat0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_1<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nmediump float u_xlat16_4;\nlowp vec4 u_xlat10_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat16_2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat16_4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4);\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat16_4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nmediump float u_xlat16_4;\nlowp vec4 u_xlat10_4;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_6 = u_xlat0.x * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat16_2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat16_4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4);\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat16_4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_2 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat16_1 = (-u_xlat16_0.w) * u_xlat16_1 + 1.0;\n    u_xlat10_4.x = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat4.x = u_xlat10_4.x * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat0 = u_xlat4.xxxx * vs_COLOR1;\n    u_xlat0 = u_xlat0 * vec4(u_xlat16_1) + u_xlat16_2;\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nmediump float u_xlat16_4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat16_2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat16_4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4);\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat16_4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nmediump float u_xlat16_4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_6 = u_xlat0.x * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat16_2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat16_4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4);\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat16_4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_2 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat16_1 = (-u_xlat16_0.w) * u_xlat16_1 + 1.0;\n    u_xlat10_4.x = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat4.x = u_xlat10_4.x * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat0 = u_xlat4.xxxx * vs_COLOR1;\n    u_xlat0 = u_xlat0 * vec4(u_xlat16_1) + u_xlat16_2;\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_6 = u_xlat0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = u_xlat0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tfloat _DiffusePower;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec2 u_xlat6;\nfloat roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 roundEven(vec2 a) { a.x = roundEven(a.x); a.y = roundEven(a.y); return a; }\nvec3 roundEven(vec3 a) { a.x = roundEven(a.x); a.y = roundEven(a.y); a.z = roundEven(a.z); return a; }\nvec4 roundEven(vec4 a) { a.x = roundEven(a.x); a.y = roundEven(a.y); a.z = roundEven(a.z); a.w = roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.x = in_POSITION0.w * 0.5;\n    u_xlat0.xy = u_xlat0.xx / _ScreenParams.xy;\n    u_xlat6.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat0.xy = u_xlat0.xy + u_xlat6.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat6.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat6.xy = u_xlat6.xy * u_xlat1.xy;\n    u_xlat6.xy = roundEven(u_xlat6.xy);\n    u_xlat6.xy = u_xlat6.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat1.ww * u_xlat6.xy;\n    gl_Position.zw = u_xlat1.zw;\n    u_xlat6.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.ww;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat6.xy;\n    u_xlat16_1 = in_COLOR0 * _Color;\n    u_xlat2.xyz = u_xlat16_1.xyz * vec3(_DiffusePower);\n    vs_COLOR0.w = u_xlat16_1.w;\n    vs_COLOR0.xyz = u_xlat2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);\n    vs_TEXCOORD2.xy = (-u_xlat1.zw) + u_xlat0.xy;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nlowp float u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_0 = u_xlat10_0 * vs_COLOR0.w;\n    SV_Target0.w = u_xlat16_0;\n    SV_Target0.xyz = vs_COLOR0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nlowp float u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = vs_COLOR0.w * u_xlat10_0 + -0.00100000005;\n    u_xlat16_0 = u_xlat10_0 * vs_COLOR0.w;\n    SV_Target0.w = u_xlat16_0;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0.xyz = vs_COLOR0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nvec2 u_xlat2;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_0 = u_xlat10_0 * vs_COLOR0.w;\n    u_xlat2.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat2.xy = u_xlat2.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD2.zw;\n    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat2.y * u_xlat2.x;\n    SV_Target0.w = u_xlat16_0 * u_xlat16_1;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump float u_xlat16_0;\nlowp float u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_0 = u_xlat10_0 * vs_COLOR0.w;\n    u_xlat16_3 = u_xlat16_0 * u_xlat16_1 + -0.00100000005;\n    u_xlat16_5 = u_xlat16_1 * u_xlat16_0;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    SV_Target0.w = u_xlat16_5;\n    u_xlatb0 = u_xlat16_3<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tfloat _MaskWipeControl;\nuniform \tfloat _MaskEdgeSoftness;\nuniform \tmediump vec4 _MaskEdgeColor;\nuniform \tint _MaskInverse;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MaskTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nmediump float u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nlowp float u_xlat10_4;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat0 = (_MaskInverse != 0) ? 1.0 : 0.0;\n    u_xlat10_4 = texture2D(_MaskTex, vs_TEXCOORD0.zw).w;\n    u_xlat0 = (-u_xlat10_4) + u_xlat0;\n    u_xlat4.x = (-_MaskWipeControl) + 1.0;\n    u_xlat0 = u_xlat4.x * _MaskEdgeSoftness + abs(u_xlat0);\n    u_xlat0 = u_xlat0 + (-_MaskWipeControl);\n    u_xlat0 = u_xlat0 / _MaskEdgeSoftness;\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat10_4 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_5 = u_xlat16_1 * vs_COLOR0.w;\n    u_xlat16_2.xyz = vec3(u_xlat16_5) * _MaskEdgeColor.xyz;\n    u_xlat3.w = u_xlat0 * u_xlat16_5;\n    u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(u_xlat16_1) + (-u_xlat16_2.xyz);\n    u_xlat4.xyz = vec3(u_xlat0) * u_xlat16_4.xyz + u_xlat16_2.xyz;\n    u_xlat3.xyz = vec3(u_xlat0) * u_xlat4.xyz;\n    SV_Target0 = u_xlat3;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tfloat _MaskWipeControl;\nuniform \tfloat _MaskEdgeSoftness;\nuniform \tmediump vec4 _MaskEdgeColor;\nuniform \tint _MaskInverse;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MaskTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nmediump float u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nlowp float u_xlat10_4;\nbool u_xlatb4;\nmediump float u_xlat16_5;\nmediump float u_xlat16_9;\nvoid main()\n{\n    u_xlat0 = (_MaskInverse != 0) ? 1.0 : 0.0;\n    u_xlat10_4 = texture2D(_MaskTex, vs_TEXCOORD0.zw).w;\n    u_xlat0 = (-u_xlat10_4) + u_xlat0;\n    u_xlat4.x = (-_MaskWipeControl) + 1.0;\n    u_xlat0 = u_xlat4.x * _MaskEdgeSoftness + abs(u_xlat0);\n    u_xlat0 = u_xlat0 + (-_MaskWipeControl);\n    u_xlat0 = u_xlat0 / _MaskEdgeSoftness;\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat10_4 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_5 = u_xlat16_1 * vs_COLOR0.w;\n    u_xlat16_9 = u_xlat16_5 * u_xlat0 + -0.00100000005;\n    u_xlatb4 = u_xlat16_9<0.0;\n    if(u_xlatb4){discard;}\n    u_xlat16_2.xyz = vec3(u_xlat16_5) * _MaskEdgeColor.xyz;\n    u_xlat3.w = u_xlat0 * u_xlat16_5;\n    u_xlat16_4.xyz = vs_COLOR0.xyz * vec3(u_xlat16_1) + (-u_xlat16_2.xyz);\n    u_xlat4.xyz = vec3(u_xlat0) * u_xlat16_4.xyz + u_xlat16_2.xyz;\n    u_xlat3.xyz = vec3(u_xlat0) * u_xlat4.xyz;\n    SV_Target0 = u_xlat3;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskWipeControl;\nuniform \tfloat _MaskEdgeSoftness;\nuniform \tmediump vec4 _MaskEdgeColor;\nuniform \tint _MaskInverse;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MaskTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump float u_xlat16_6;\nfloat u_xlat18;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_6 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_6) * vs_COLOR0;\n    u_xlat16_6 = u_xlat16_1 * u_xlat16_0.w;\n    u_xlat16_2.xyz = vec3(u_xlat16_6) * _MaskEdgeColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_1) + (-u_xlat16_2.xyz);\n    u_xlat18 = (_MaskInverse != 0) ? 1.0 : 0.0;\n    u_xlat10_4 = texture2D(_MaskTex, vs_TEXCOORD0.zw).w;\n    u_xlat18 = u_xlat18 + (-u_xlat10_4);\n    u_xlat4 = (-_MaskWipeControl) + 1.0;\n    u_xlat18 = u_xlat4 * _MaskEdgeSoftness + abs(u_xlat18);\n    u_xlat18 = u_xlat18 + (-_MaskWipeControl);\n    u_xlat18 = u_xlat18 / _MaskEdgeSoftness;\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat16_3.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n    u_xlat0.w = u_xlat16_6 * u_xlat18;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskWipeControl;\nuniform \tfloat _MaskEdgeSoftness;\nuniform \tmediump vec4 _MaskEdgeColor;\nuniform \tint _MaskInverse;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MaskTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nmediump float u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp float u_xlat10_5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat0 = (_MaskInverse != 0) ? 1.0 : 0.0;\n    u_xlat10_5 = texture2D(_MaskTex, vs_TEXCOORD0.zw).w;\n    u_xlat0 = (-u_xlat10_5) + u_xlat0;\n    u_xlat5.x = (-_MaskWipeControl) + 1.0;\n    u_xlat0 = u_xlat5.x * _MaskEdgeSoftness + abs(u_xlat0);\n    u_xlat0 = u_xlat0 + (-_MaskWipeControl);\n    u_xlat0 = u_xlat0 / _MaskEdgeSoftness;\n    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);\n    u_xlat5.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat5.xy = u_xlat5.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat5.xy = u_xlat5.xy * vs_TEXCOORD2.zw;\n    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat5.y * u_xlat5.x;\n    u_xlat10_5 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_6 = u_xlat10_5 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_2 = vec4(u_xlat16_6) * vs_COLOR0;\n    u_xlat16_6 = u_xlat16_1 * u_xlat16_2.w;\n    u_xlat16_11 = u_xlat16_6 * u_xlat0 + -0.00100000005;\n    u_xlatb5 = u_xlat16_11<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat16_3.xyz = vec3(u_xlat16_6) * _MaskEdgeColor.xyz;\n    u_xlat4.w = u_xlat0 * u_xlat16_6;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_1) + (-u_xlat16_3.xyz);\n    u_xlat5.xyz = vec3(u_xlat0) * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlat4.xyz = vec3(u_xlat0) * u_xlat5.xyz;\n    SV_Target0 = u_xlat4;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat10_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n    SV_Target0 = u_xlat16_2.yyyy * u_xlat16_0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec2 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat10;\nfloat u_xlat16;\nfloat u_xlat18;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0.w = _FaceColor.w;\n    u_xlat16_3.xyz = in_COLOR0.xyz;\n    u_xlat16_3.w = 1.0;\n    u_xlat16_4 = u_xlat16_3 * _FaceColor;\n    u_xlat16_5.xyz = u_xlat16_4.www * u_xlat16_4.xyz;\n    vs_COLOR0.xyz = u_xlat16_5.xyz;\n    u_xlat5.xyz = (-u_xlat16_5.xyz);\n    u_xlat5.w = (-u_xlat16_4.w);\n    u_xlat16_6.xyz = _OutlineColor.www * _OutlineColor.xyz;\n    u_xlat16_6.w = _OutlineColor.w;\n    u_xlat5 = u_xlat5 + u_xlat16_6;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat10 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat10 * u_xlat2.x;\n    u_xlat10 = u_xlat24 * u_xlat2.x;\n    u_xlat18 = (-_PerspectiveFilter) + 1.0;\n    u_xlat18 = u_xlat18 * abs(u_xlat10);\n    u_xlat24 = u_xlat24 * u_xlat2.x + (-u_xlat18);\n    u_xlat16 = abs(u_xlat16) * u_xlat24 + u_xlat18;\n    u_xlatb24 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat16 = (u_xlatb24) ? u_xlat16 : u_xlat10;\n    u_xlat24 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat24 = u_xlat24 * u_xlat16 + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat24;\n    u_xlat24 = _OutlineWidth * _ScaleRatioA;\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat7.x = min(u_xlat24, 1.0);\n    u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat5 = u_xlat5 * u_xlat7.xxxx;\n    u_xlat4.xyz = u_xlat16_4.xyz * u_xlat16_4.www + u_xlat5.xyz;\n    u_xlat4.w = u_xlat16_3.w * _FaceColor.w + u_xlat5.w;\n    vs_COLOR1 = u_xlat4;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat7.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat7.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat8.x = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat24) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat24 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    vs_TEXCOORD3.z = in_COLOR0.w;\n    vs_TEXCOORD3.w = 0.0;\n    u_xlat1 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n    u_xlat8.xz = (-u_xlat1.zw) * vec2(_GradientScale);\n    u_xlat8.xz = u_xlat8.xz / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD3.xy = u_xlat8.xz + in_TEXCOORD0.xy;\n    u_xlat8.x = u_xlat1.x * u_xlat16 + 1.0;\n    u_xlat2.x = u_xlat16 / u_xlat8.x;\n    u_xlat8.x = u_xlat1.y * u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat8.x) * 0.5 + u_xlat0.x;\n    vs_TEXCOORD4.xy = u_xlat2.xy;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _UnderlayColor;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp float u_xlat10_2;\nmediump vec2 u_xlat16_3;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x = u_xlat10_0 * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    u_xlat16_0.w = _UnderlayColor.w;\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_0;\n    u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy = vec2(u_xlat10_2) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx * u_xlat16_1 + vs_COLOR1;\n    u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n    u_xlat16_1.x = (-u_xlat16_1.w) * u_xlat16_3.y + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_1.xxxx + u_xlat16_2;\n    u_xlat0 = u_xlat16_0 * vs_TEXCOORD3.zzzz;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat10_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n    u_xlat16_2.x = u_xlat16_0.w * u_xlat16_2.y + -0.00100000005;\n    u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb1 = u_xlat16_2.x<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _UnderlayColor;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp float u_xlat10_2;\nmediump vec2 u_xlat16_3;\nbool u_xlatb4;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x = u_xlat10_0 * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    u_xlat16_0.w = _UnderlayColor.w;\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_0;\n    u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy = vec2(u_xlat10_2) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx * u_xlat16_1 + vs_COLOR1;\n    u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n    u_xlat16_1.x = (-u_xlat16_1.w) * u_xlat16_3.y + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_1.xxxx + u_xlat16_2;\n    u_xlat16_1.x = u_xlat16_0.w * vs_TEXCOORD3.z + -0.00100000005;\n    u_xlat0 = u_xlat16_0 * vs_TEXCOORD3.zzzz;\n    SV_Target0 = u_xlat0;\n    u_xlatb4 = u_xlat16_1.x<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec2 u_xlat1;\nlowp float u_xlat10_1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat10_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n    u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.x;\n    SV_Target0 = u_xlat16_0 * u_xlat16_2.xxxx;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp float u_xlat10_2;\nmediump vec2 u_xlat16_3;\nvec2 u_xlat4;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x = u_xlat10_0 * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    u_xlat16_0.w = _UnderlayColor.w;\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_0;\n    u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy = vec2(u_xlat10_2) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx * u_xlat16_1 + vs_COLOR1;\n    u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n    u_xlat16_1.x = (-u_xlat16_1.w) * u_xlat16_3.y + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_1.xxxx + u_xlat16_2;\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_1.xxxx;\n    u_xlat0 = u_xlat16_0 * vs_TEXCOORD3.zzzz;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec2 u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nmediump vec2 u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat10_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n    u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat16_0.w * u_xlat16_2.x + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_2.xxxx;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _UnderlayColor;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying mediump vec2 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp float u_xlat10_2;\nmediump vec2 u_xlat16_3;\nvec2 u_xlat4;\nbool u_xlatb4;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD3.xy).w;\n    u_xlat16_1.x = u_xlat10_0 * vs_TEXCOORD4.x + (-vs_TEXCOORD4.y);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_0.xyz = _UnderlayColor.www * _UnderlayColor.xyz;\n    u_xlat16_0.w = _UnderlayColor.w;\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_0;\n    u_xlat16_1 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3.xy = vec2(u_xlat10_2) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat16_3.xxxx * u_xlat16_1 + vs_COLOR1;\n    u_xlat16_2 = u_xlat16_3.yyyy * u_xlat16_1;\n    u_xlat16_1.x = (-u_xlat16_1.w) * u_xlat16_3.y + 1.0;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_1.xxxx + u_xlat16_2;\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat16_0 * u_xlat16_1.xxxx;\n    u_xlat16_1.x = u_xlat16_0.w * vs_TEXCOORD3.z + -0.00100000005;\n    u_xlat0 = u_xlat16_0 * vs_TEXCOORD3.zzzz;\n    SV_Target0 = u_xlat0;\n    u_xlatb4 = u_xlat16_1.x<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat10_0 + _TextureSampleAdd;\n    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0 = u_xlat16_0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat10_0 + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat1.w * u_xlat0.x + -0.00100000005;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    u_xlatb0.x = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nmediump float u_xlat16_44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat16_5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat16_44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat16_44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat16_5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat16_7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat16_18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat16_2.xyz);\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);\n    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump float u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nfloat u_xlat6;\nlowp float u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_20;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_46;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0 = inversesqrt(u_xlat16_0);\n    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat16_4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_6 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_6 * _OcclusionStrength + u_xlat16_45;\n    u_xlat6 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_20.xyz = log2(u_xlat16_5.xyz);\n    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_20.xyz = exp2(u_xlat16_20.xyz);\n    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_20.xyz = max(u_xlat16_20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_46 = (-u_xlat6) * 0.699999988 + 1.70000005;\n    u_xlat16_46 = u_xlat16_46 * u_xlat6;\n    u_xlat16_46 = u_xlat16_46 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_46);\n    u_xlat16_11.x = u_xlat10_5.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_5.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_4.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_46);\n        u_xlat16_12.x = u_xlat10_4.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_4.xyz * u_xlat16_12.xxx;\n        u_xlat16_7.xyz = u_xlat16_11.xxx * u_xlat10_5.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat6 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat6 * u_xlat6;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat6;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat16_20.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb42 = u_xlat16_2.x<0.0;\n    if(u_xlatb42){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat16_7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat16_18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump float u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nfloat u_xlat6;\nlowp float u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_20;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_46;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb42 = u_xlat16_2.x<0.0;\n    if(u_xlatb42){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0 = inversesqrt(u_xlat16_0);\n    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat16_4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_6 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_6 * _OcclusionStrength + u_xlat16_45;\n    u_xlat6 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_20.xyz = log2(u_xlat16_5.xyz);\n    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_20.xyz = exp2(u_xlat16_20.xyz);\n    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_20.xyz = max(u_xlat16_20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_46 = (-u_xlat6) * 0.699999988 + 1.70000005;\n    u_xlat16_46 = u_xlat16_46 * u_xlat6;\n    u_xlat16_46 = u_xlat16_46 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_46);\n    u_xlat16_11.x = u_xlat10_5.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_5.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_4.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_46);\n        u_xlat16_12.x = u_xlat10_4.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_4.xyz * u_xlat16_12.xxx;\n        u_xlat16_7.xyz = u_xlat16_11.xxx * u_xlat10_5.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat6 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat6 * u_xlat6;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat6;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat16_20.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec2 u_xlat10_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3 u_xlatb11;\nmediump vec3 u_xlat16_12;\nmediump vec4 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat16;\nfloat u_xlat17;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat30;\nlowp float u_xlat10_30;\nfloat u_xlat31;\nmediump float u_xlat16_43;\nfloat u_xlat45;\nmediump float u_xlat16_45;\nbool u_xlatb45;\nfloat u_xlat46;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nmediump float u_xlat16_50;\nmediump float u_xlat16_57;\nvoid main()\n{\n    u_xlat10_0.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_48 = (-u_xlat10_0.x) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(u_xlat16_48);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_30 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_49 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_49 = u_xlat10_30 * _OcclusionStrength + u_xlat16_49;\n    u_xlat0.z = (-u_xlat10_0.y) * _GlossMapScale + 1.0;\n    u_xlat16_5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat1.xyz * (-u_xlat16_5.xxx) + u_xlat2.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb45 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb45){\n        u_xlat16_45 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat16_45 = inversesqrt(u_xlat16_45);\n        u_xlat8.xyz = vec3(u_xlat16_45) * u_xlat16_5.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat45 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat45 = min(u_xlat9.z, u_xlat45);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat45) + u_xlat9.xyz;\n    } else {\n        u_xlat8.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_50 = (-u_xlat0.z) * 0.699999988 + 1.70000005;\n    u_xlat16_50 = u_xlat0.z * u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat8.xyz, u_xlat16_50);\n    u_xlat16_12.x = u_xlat10_6.w + -1.0;\n    u_xlat16_12.x = unity_SpecCube0_HDR.w * u_xlat16_12.x + 1.0;\n    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz * u_xlat16_12.xxx;\n    u_xlatb45 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb45){\n        u_xlatb45 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb45){\n            u_xlat16_45 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat16_45 = inversesqrt(u_xlat16_45);\n            u_xlat8.xyz = vec3(u_xlat16_45) * u_xlat16_5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n            }\n            u_xlat45 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat45 = min(u_xlat9.z, u_xlat45);\n            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat45) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat8.xyz, u_xlat16_50);\n        u_xlat16_13.x = u_xlat10_5.w + -1.0;\n        u_xlat16_13.x = unity_SpecCube1_HDR.w * u_xlat16_13.x + 1.0;\n        u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube1_HDR.x;\n        u_xlat16_13.xyz = u_xlat10_5.xyz * u_xlat16_13.xxx;\n        u_xlat16_8.xyz = u_xlat16_12.xxx * u_xlat10_6.xyz + (-u_xlat16_13.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_8.xyz + u_xlat16_13.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_12.xyz = vec3(u_xlat16_49) * u_xlat16_27.xyz;\n    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat45 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat8.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16 = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);\n    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);\n    u_xlat16_57 = u_xlat16 + u_xlat16;\n    u_xlat16_57 = u_xlat16 * u_xlat16_57;\n    u_xlat16_57 = u_xlat16_57 * u_xlat0.z + -0.5;\n    u_xlat16_13.x = (-u_xlat45) + 1.0;\n    u_xlat16_28 = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_28;\n    u_xlat16_13.x = u_xlat16_57 * u_xlat16_13.x + 1.0;\n    u_xlat16_28 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_43 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_43;\n    u_xlat16_57 = u_xlat16_57 * u_xlat16_28 + 1.0;\n    u_xlat16_57 = u_xlat16_57 * u_xlat16_13.x;\n    u_xlat31 = u_xlat45 * u_xlat16_57;\n    u_xlat46 = u_xlat0.z * u_xlat0.z;\n    u_xlat1.w = max(u_xlat46, 0.00200000009);\n    u_xlat2.x = (-u_xlat1.w) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat2.x + u_xlat1.w;\n    u_xlat2.x = u_xlat45 * u_xlat2.x + u_xlat1.w;\n    u_xlat0.x = abs(u_xlat0.x) * u_xlat2.x;\n    u_xlat0.x = u_xlat45 * u_xlat17 + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat2.x = u_xlat1.w * u_xlat1.w;\n    u_xlat17 = u_xlat1.x * u_xlat2.x + (-u_xlat1.x);\n    u_xlat1.x = u_xlat17 * u_xlat1.x + 1.0;\n    u_xlat2.x = u_xlat2.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat1.x = u_xlat2.x / u_xlat1.x;\n    u_xlat0.xz = u_xlat0.xz * u_xlat1.xw;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat45 * u_xlat0.x;\n    u_xlat30 = (-u_xlat0.z) * 0.280000001 + 1.0;\n    u_xlat16_57 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb45 = u_xlat16_57!=0.0;\n    u_xlat45 = u_xlatb45 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat45 * u_xlat0.x;\n    u_xlat16_48 = (-u_xlat16_48) + 1.0;\n    u_xlat16_48 = u_xlat10_0.y * _GlossMapScale + u_xlat16_48;\n    u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);\n    u_xlat16_13.xzw = vec3(u_xlat31) * _LightColor0.xyz;\n    u_xlat16_13.xzw = u_xlat16_7.xyz * vec3(u_xlat16_49) + u_xlat16_13.xzw;\n    u_xlat0.xyw = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_49 = (-u_xlat16) + 1.0;\n    u_xlat16_57 = u_xlat16_49 * u_xlat16_49;\n    u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n    u_xlat16_49 = u_xlat16_49 * u_xlat16_57;\n    u_xlat16_14.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_49) + u_xlat16_3.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_14.xyz;\n    u_xlat0.xyw = u_xlat16_4.xyz * u_xlat16_13.xzw + u_xlat0.xyw;\n    u_xlat16_4.xyz = u_xlat16_12.xyz * vec3(u_xlat30);\n    u_xlat16_12.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_48);\n    u_xlat16_3.xyz = vec3(u_xlat16_28) * u_xlat16_12.xyz + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nlowp float u_xlat10_42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat10_42 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat16_44 = (-u_xlat10_42) + 1.0;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat10_42) + vec3(u_xlat16_44);\n    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = vec3(u_xlat16_44) * u_xlat16_3.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat16_7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat16_18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nfloat u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1 = inversesqrt(u_xlat1);\n    u_xlat15.xyz = vec3(u_xlat1) * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat16_7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat1) + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_53;\n    u_xlat14 = u_xlat4 * u_xlat4;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat14 = u_xlat14 * u_xlat4;\n    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat16_18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat14);\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_13.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_11.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat16_7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat16_18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_4.x = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat10_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat10_4.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat16_4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);\n        u_xlat4.xyz = u_xlat16_4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat10_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat16_40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat16_40 = inversesqrt(u_xlat16_40);\n            u_xlat5.xyz = vec3(u_xlat16_40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_5.xyz * vec3(u_xlat16_39);\n        u_xlat16_4.xyz = vec3(u_xlat16_43) * u_xlat10_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat13 = inversesqrt(u_xlat13);\n    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat13 = inversesqrt(u_xlat13);\n    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;\n    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.zxy;\n    u_xlat16_3.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat16_3.xyz);\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_3.xyz = u_xlat1.xxx * u_xlat16_3.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nbool u_xlatb6;\nvec3 u_xlat7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat6.xyz, u_xlat7.xyz);\n    u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat6.x = sqrt(u_xlat6.x);\n    u_xlat6.x = (-u_xlat37) + u_xlat6.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_6.x = texture2D(_ShadowMapTexture, u_xlat6.xy).x;\n    u_xlat16_39 = (-u_xlat10_6.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat10_6.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_37 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_16.x = dot(u_xlat1.xyz, u_xlat16_0.xyz);\n    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;\n    u_xlat16_16.xyz = u_xlat16_0.xyz * (-u_xlat16_16.xxx) + u_xlat1.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb6 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb6){\n        u_xlat16_6.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat6.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat42 = min(u_xlat7.z, u_xlat42);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_16.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_39);\n    u_xlat16_41 = u_xlat10_6.w + -1.0;\n    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;\n    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_6.xyz * vec3(u_xlat16_41);\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = u_xlat16_16.xyz * vec3(u_xlat16_42);\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_16.xyz;\n        }\n        u_xlat10_7 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_7.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_16.xyz = u_xlat10_7.xyz * vec3(u_xlat16_39);\n        u_xlat16_6.xyz = vec3(u_xlat16_41) * u_xlat10_6.xyz + (-u_xlat16_16.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_6.xyz + u_xlat16_16.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_10.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat6.xyz = vec3(u_xlat36) * u_xlat6.xyz;\n    u_xlat36 = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat16_1.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat6.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_40 = (-u_xlat16_1.x) + 1.0;\n    u_xlat16_41 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_41;\n    u_xlat16_40 = u_xlat16_39 * u_xlat16_40 + 1.0;\n    u_xlat16_41 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_41 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_40;\n    u_xlat16_24 = u_xlat16_1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat6.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat16_1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat16_1.x * u_xlat6.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat6.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat6.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat16_24) * u_xlat16_5.xyz;\n    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_40;\n    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat36);\n    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_41) * u_xlat16_4.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nbool u_xlatb36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb36 = u_xlat16_2.x<0.0;\n    if(u_xlatb36){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_4.x = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat10_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat10_4.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat16_4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);\n        u_xlat4.xyz = u_xlat16_4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat10_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat16_40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat16_40 = inversesqrt(u_xlat16_40);\n            u_xlat5.xyz = vec3(u_xlat16_40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_5.xyz * vec3(u_xlat16_39);\n        u_xlat16_4.xyz = vec3(u_xlat16_43) * u_xlat10_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nbool u_xlatb6;\nvec3 u_xlat7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat36;\nbool u_xlatb36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb36 = u_xlat16_2.x<0.0;\n    if(u_xlatb36){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat6.xyz, u_xlat7.xyz);\n    u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat6.x = sqrt(u_xlat6.x);\n    u_xlat6.x = (-u_xlat37) + u_xlat6.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_6.x = texture2D(_ShadowMapTexture, u_xlat6.xy).x;\n    u_xlat16_39 = (-u_xlat10_6.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat10_6.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_37 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_16.x = dot(u_xlat1.xyz, u_xlat16_0.xyz);\n    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;\n    u_xlat16_16.xyz = u_xlat16_0.xyz * (-u_xlat16_16.xxx) + u_xlat1.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb6 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb6){\n        u_xlat16_6.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat6.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat42 = min(u_xlat7.z, u_xlat42);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_16.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_39);\n    u_xlat16_41 = u_xlat10_6.w + -1.0;\n    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;\n    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_6.xyz * vec3(u_xlat16_41);\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = u_xlat16_16.xyz * vec3(u_xlat16_42);\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_16.xyz;\n        }\n        u_xlat10_7 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_7.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_16.xyz = u_xlat10_7.xyz * vec3(u_xlat16_39);\n        u_xlat16_6.xyz = vec3(u_xlat16_41) * u_xlat10_6.xyz + (-u_xlat16_16.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_6.xyz + u_xlat16_16.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_10.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat6.xyz = vec3(u_xlat36) * u_xlat6.xyz;\n    u_xlat36 = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat16_1.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat6.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_40 = (-u_xlat16_1.x) + 1.0;\n    u_xlat16_41 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_41;\n    u_xlat16_40 = u_xlat16_39 * u_xlat16_40 + 1.0;\n    u_xlat16_41 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_41 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_40;\n    u_xlat16_24 = u_xlat16_1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat6.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat16_1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat16_1.x * u_xlat6.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat6.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat6.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat16_24) * u_xlat16_5.xyz;\n    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_40;\n    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat36);\n    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_41) * u_xlat16_4.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec2 u_xlat10_0;\nfloat u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp float u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec4 u_xlat10_8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nvec3 u_xlat13;\nbool u_xlatb13;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_14;\nlowp float u_xlat10_14;\nbool u_xlatb14;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nfloat u_xlat41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat10_0.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_39 = (-u_xlat10_0.x) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(u_xlat16_39);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1 = inversesqrt(u_xlat1);\n    u_xlat13.xyz = vec3(u_xlat1) * vs_TEXCOORD1.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat14.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat14.x = dot(u_xlat14.xyz, u_xlat14.xyz);\n    u_xlat14.x = sqrt(u_xlat14.x);\n    u_xlat14.x = (-u_xlat2.x) + u_xlat14.x;\n    u_xlat2.x = unity_ShadowFadeCenterAndType.w * u_xlat14.x + u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat14.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_14 = texture2D(_ShadowMapTexture, u_xlat14.xy).x;\n    u_xlat16_40 = (-u_xlat10_14) + 1.0;\n    u_xlat16_40 = u_xlat2.x * u_xlat16_40 + u_xlat10_14;\n    u_xlat10_2 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_2 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat2.x = (-u_xlat10_0.y) * _GlossMapScale + 1.0;\n    u_xlat16_18.x = dot(u_xlat13.xyz, u_xlat0.xzw);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xzw * (-u_xlat16_18.xxx) + u_xlat13.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_40) * _LightColor0.xyz;\n    u_xlatb14 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb14){\n        u_xlat16_14.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat16_14.x = inversesqrt(u_xlat16_14.x);\n        u_xlat14.xyz = u_xlat16_14.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat14.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat14.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat14.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat5.x = min(u_xlat5.y, u_xlat5.x);\n        u_xlat5.x = min(u_xlat5.z, u_xlat5.x);\n        u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat14.xyz = u_xlat14.xyz * u_xlat5.xxx + u_xlat17.xyz;\n    } else {\n        u_xlat14.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_40 = (-u_xlat2.x) * 0.699999988 + 1.70000005;\n    u_xlat16_40 = u_xlat2.x * u_xlat16_40;\n    u_xlat16_40 = u_xlat16_40 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat14.xyz, u_xlat16_40);\n    u_xlat16_43 = u_xlat10_5.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_5.xyz * vec3(u_xlat16_43);\n    u_xlatb14 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb14){\n        u_xlatb14 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb14){\n            u_xlat16_14.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat16_14.x = inversesqrt(u_xlat16_14.x);\n            u_xlat14.xyz = u_xlat16_14.xxx * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat14.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat14.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat14.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat41 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat41 = min(u_xlat8.z, u_xlat41);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat14.xyz = u_xlat14.xyz * vec3(u_xlat41) + u_xlat8.xyz;\n        } else {\n            u_xlat14.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat10_8 = textureCubeLodEXT(unity_SpecCube1, u_xlat14.xyz, u_xlat16_40);\n        u_xlat16_40 = u_xlat10_8.w + -1.0;\n        u_xlat16_40 = unity_SpecCube1_HDR.w * u_xlat16_40 + 1.0;\n        u_xlat16_40 = u_xlat16_40 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_8.xyz * vec3(u_xlat16_40);\n        u_xlat16_14.xyz = vec3(u_xlat16_43) * u_xlat10_5.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_14.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat14.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat1) + _WorldSpaceLightPos0.xyz;\n    u_xlat1 = dot(u_xlat14.xyz, u_xlat14.xyz);\n    u_xlat1 = max(u_xlat1, 0.00100000005);\n    u_xlat1 = inversesqrt(u_xlat1);\n    u_xlat14.xyz = vec3(u_xlat1) * u_xlat14.xyz;\n    u_xlat1 = dot(u_xlat0.xzw, (-u_xlat13.xyz));\n    u_xlat13.x = dot(u_xlat0.xzw, _WorldSpaceLightPos0.xyz);\n    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xzw, u_xlat14.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat16_40 = u_xlat24 + u_xlat24;\n    u_xlat16_40 = u_xlat24 * u_xlat16_40;\n    u_xlat16_40 = u_xlat16_40 * u_xlat2.x + -0.5;\n    u_xlat16_42 = (-u_xlat13.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_40 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat1) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_43 + 1.0;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_42;\n    u_xlat36 = u_xlat13.x * u_xlat16_40;\n    u_xlat25 = u_xlat2.x * u_xlat2.x;\n    u_xlat25 = max(u_xlat25, 0.00200000009);\n    u_xlat37 = (-u_xlat25) + 1.0;\n    u_xlat14.x = abs(u_xlat1) * u_xlat37 + u_xlat25;\n    u_xlat37 = u_xlat13.x * u_xlat37 + u_xlat25;\n    u_xlat1 = u_xlat37 * abs(u_xlat1);\n    u_xlat1 = u_xlat13.x * u_xlat14.x + u_xlat1;\n    u_xlat1 = u_xlat1 + 9.99999975e-06;\n    u_xlat1 = 0.5 / u_xlat1;\n    u_xlat37 = u_xlat25 * u_xlat25;\n    u_xlat14.x = u_xlat0.x * u_xlat37 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat14.x * u_xlat0.x + 1.0;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat37 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat1;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat13.x * u_xlat0.x;\n    u_xlat1 = u_xlat25 * u_xlat2.x;\n    u_xlat1 = (-u_xlat1) * 0.280000001 + 1.0;\n    u_xlat16_40 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb13 = u_xlat16_40!=0.0;\n    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat13.x;\n    u_xlat16_39 = (-u_xlat16_39) + 1.0;\n    u_xlat16_39 = u_xlat10_0.y * _GlossMapScale + u_xlat16_39;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat36) * u_xlat16_7.xyz;\n    u_xlat0.xyw = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_40 = (-u_xlat24) + 1.0;\n    u_xlat16_42 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_40) + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat0.xyw * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat1);\n    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_39);\n    u_xlat16_3.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nlowp float u_xlat10_36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat10_36 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat16_38 = (-u_xlat10_36) + 1.0;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat10_36) + vec3(u_xlat16_38);\n    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = vec3(u_xlat16_38) * u_xlat16_3.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_4.x = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat10_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat10_4.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat16_4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);\n        u_xlat4.xyz = u_xlat16_4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat10_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat16_40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat16_40 = inversesqrt(u_xlat16_40);\n            u_xlat5.xyz = vec3(u_xlat16_40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_5.xyz * vec3(u_xlat16_39);\n        u_xlat16_4.xyz = vec3(u_xlat16_43) * u_xlat10_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nmediump vec3 u_xlat16_18;\nfloat u_xlat36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_4.x = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat10_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat10_4.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat16_4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);\n        u_xlat4.xyz = u_xlat16_4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat10_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat16_40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat16_40 = inversesqrt(u_xlat16_40);\n            u_xlat5.xyz = vec3(u_xlat16_40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_5.xyz * vec3(u_xlat16_39);\n        u_xlat16_4.xyz = vec3(u_xlat16_43) * u_xlat10_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat0.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat0.x = u_xlat0.x * u_xlat16_39;\n    u_xlat12 = u_xlat37 * u_xlat37;\n    u_xlat12 = max(u_xlat12, 0.00200000009);\n    u_xlat12 = u_xlat12 * u_xlat37;\n    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat12);\n    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_10.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_4.x = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat10_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat10_4.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat16_4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);\n        u_xlat4.xyz = u_xlat16_4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat10_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat16_40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat16_40 = inversesqrt(u_xlat16_40);\n            u_xlat5.xyz = vec3(u_xlat16_40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_5.xyz * vec3(u_xlat16_39);\n        u_xlat16_4.xyz = vec3(u_xlat16_43) * u_xlat10_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2 = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat4.zz + u_xlat4.xw;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nlowp float u_xlat10_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nmediump float u_xlat16_39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_17 = texture2D(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat10_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat10_17;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_17.xyz = exp2(u_xlat16_17.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_17.xyz = max(u_xlat16_17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat16_39 = inversesqrt(u_xlat16_39);\n        u_xlat5.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat10_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat16_39 = inversesqrt(u_xlat16_39);\n            u_xlat9.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat16_17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.zxy;\n    u_xlat16_3.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat16_3.xyz);\n    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_3.xyz = u_xlat1.xxx * u_xlat16_3.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);\n    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump float u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nlowp float u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_17;\nvec3 u_xlat19;\nmediump vec3 u_xlat16_19;\nlowp float u_xlat10_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nmediump float u_xlat16_39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_44;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0 = inversesqrt(u_xlat16_0);\n    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat16_4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat6.x = dot(u_xlat6.xyz, u_xlat7.xyz);\n    u_xlat19.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);\n    u_xlat19.x = sqrt(u_xlat19.x);\n    u_xlat19.x = (-u_xlat6.x) + u_xlat19.x;\n    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat19.x + u_xlat6.x;\n    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat19.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_19 = texture2D(_ShadowMapTexture, u_xlat19.xy).x;\n    u_xlat16_42 = (-u_xlat10_19) + 1.0;\n    u_xlat16_42 = u_xlat6.x * u_xlat16_42 + u_xlat10_19;\n    u_xlat10_6 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_6 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat6.x = (-_Glossiness) + 1.0;\n    u_xlat16_17.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_17.x = u_xlat16_17.x + u_xlat16_17.x;\n    u_xlat16_17.xyz = u_xlat0.xyz * (-u_xlat16_17.xxx) + u_xlat14.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_19.xyz = log2(u_xlat16_8.xyz);\n    u_xlat16_19.xyz = u_xlat16_19.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_19.xyz = exp2(u_xlat16_19.xyz);\n    u_xlat16_19.xyz = u_xlat16_19.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_19.xyz = max(u_xlat16_19.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat16_39 = dot(u_xlat16_17.xyz, u_xlat16_17.xyz);\n        u_xlat16_39 = inversesqrt(u_xlat16_39);\n        u_xlat7.xyz = vec3(u_xlat16_39) * u_xlat16_17.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat7.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_17.xyz;\n    }\n    u_xlat16_42 = (-u_xlat6.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat6.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_42);\n    u_xlat16_44 = u_xlat10_7.w + -1.0;\n    u_xlat16_44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;\n    u_xlat16_44 = u_xlat16_44 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_44);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat16_39 = dot(u_xlat16_17.xyz, u_xlat16_17.xyz);\n            u_xlat16_39 = inversesqrt(u_xlat16_39);\n            u_xlat9.xyz = vec3(u_xlat16_39) * u_xlat16_17.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_17.xyz;\n        }\n        u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_17.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat16_7.xyz = vec3(u_xlat16_44) * u_xlat10_7.xyz + (-u_xlat16_17.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_17.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_17.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat7.xyz = vec3(u_xlat39) * u_xlat7.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat6.x + -0.5;\n    u_xlat16_44 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_44 = u_xlat16_44 * u_xlat16_8.x;\n    u_xlat16_44 = u_xlat16_42 * u_xlat16_44 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_44;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat6.x * u_xlat6.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat6.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_5.xyz;\n    u_xlat16_21.xyz = u_xlat16_19.xyz * u_xlat16_4.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_4.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_4.x;\n    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_17.xyz * vec3(u_xlat39);\n    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nlowp float u_xlat10_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nmediump float u_xlat16_39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb39 = u_xlat16_2.x<0.0;\n    if(u_xlatb39){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_17 = texture2D(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat10_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat10_17;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_17.xyz = exp2(u_xlat16_17.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_17.xyz = max(u_xlat16_17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat16_39 = inversesqrt(u_xlat16_39);\n        u_xlat5.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat10_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat16_39 = inversesqrt(u_xlat16_39);\n            u_xlat9.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat16_17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump float u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nlowp float u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_17;\nvec3 u_xlat19;\nmediump vec3 u_xlat16_19;\nlowp float u_xlat10_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nmediump float u_xlat16_39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_44;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb39 = u_xlat16_2.x<0.0;\n    if(u_xlatb39){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0 = inversesqrt(u_xlat16_0);\n    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat16_4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat6.x = dot(u_xlat6.xyz, u_xlat7.xyz);\n    u_xlat19.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);\n    u_xlat19.x = sqrt(u_xlat19.x);\n    u_xlat19.x = (-u_xlat6.x) + u_xlat19.x;\n    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat19.x + u_xlat6.x;\n    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat19.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_19 = texture2D(_ShadowMapTexture, u_xlat19.xy).x;\n    u_xlat16_42 = (-u_xlat10_19) + 1.0;\n    u_xlat16_42 = u_xlat6.x * u_xlat16_42 + u_xlat10_19;\n    u_xlat10_6 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_6 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat6.x = (-_Glossiness) + 1.0;\n    u_xlat16_17.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_17.x = u_xlat16_17.x + u_xlat16_17.x;\n    u_xlat16_17.xyz = u_xlat0.xyz * (-u_xlat16_17.xxx) + u_xlat14.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_19.xyz = log2(u_xlat16_8.xyz);\n    u_xlat16_19.xyz = u_xlat16_19.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_19.xyz = exp2(u_xlat16_19.xyz);\n    u_xlat16_19.xyz = u_xlat16_19.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_19.xyz = max(u_xlat16_19.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat16_39 = dot(u_xlat16_17.xyz, u_xlat16_17.xyz);\n        u_xlat16_39 = inversesqrt(u_xlat16_39);\n        u_xlat7.xyz = vec3(u_xlat16_39) * u_xlat16_17.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat7.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_17.xyz;\n    }\n    u_xlat16_42 = (-u_xlat6.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat6.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_42);\n    u_xlat16_44 = u_xlat10_7.w + -1.0;\n    u_xlat16_44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;\n    u_xlat16_44 = u_xlat16_44 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_44);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat16_39 = dot(u_xlat16_17.xyz, u_xlat16_17.xyz);\n            u_xlat16_39 = inversesqrt(u_xlat16_39);\n            u_xlat9.xyz = vec3(u_xlat16_39) * u_xlat16_17.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_17.xyz;\n        }\n        u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_17.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat16_7.xyz = vec3(u_xlat16_44) * u_xlat10_7.xyz + (-u_xlat16_17.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_17.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_17.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat7.xyz = vec3(u_xlat39) * u_xlat7.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat6.x + -0.5;\n    u_xlat16_44 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_44 = u_xlat16_44 * u_xlat16_8.x;\n    u_xlat16_44 = u_xlat16_42 * u_xlat16_44 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_44;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat6.x * u_xlat6.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat6.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_5.xyz;\n    u_xlat16_21.xyz = u_xlat16_19.xyz * u_xlat16_4.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_4.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_4.x;\n    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_17.xyz * vec3(u_xlat39);\n    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec2 u_xlat10_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_9;\nvec3 u_xlat10;\nlowp vec4 u_xlat10_10;\nvec3 u_xlat11;\nvec3 u_xlat12;\nbvec3 u_xlatb12;\nbvec3 u_xlatb13;\nfloat u_xlat15;\nfloat u_xlat16;\nmediump vec3 u_xlat16_21;\nmediump vec3 u_xlat16_23;\nfloat u_xlat28;\nlowp float u_xlat10_28;\nfloat u_xlat29;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nlowp float u_xlat10_42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_45;\nmediump float u_xlat16_46;\nmediump float u_xlat16_50;\nvoid main()\n{\n    u_xlat10_0.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_45 = (-u_xlat10_0.x) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(u_xlat16_45);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat28 = dot(u_xlat5.xyz, u_xlat6.xyz);\n    u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat42 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat42 = sqrt(u_xlat42);\n    u_xlat42 = (-u_xlat28) + u_xlat42;\n    u_xlat28 = unity_ShadowFadeCenterAndType.w * u_xlat42 + u_xlat28;\n    u_xlat28 = u_xlat28 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);\n    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_42 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlat16_46 = (-u_xlat10_42) + 1.0;\n    u_xlat16_46 = u_xlat28 * u_xlat16_46 + u_xlat10_42;\n    u_xlat10_28 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_7.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_7.x = u_xlat10_28 * _OcclusionStrength + u_xlat16_7.x;\n    u_xlat0.z = (-u_xlat10_0.y) * _GlossMapScale + 1.0;\n    u_xlat16_21.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat16_21.x = u_xlat16_21.x + u_xlat16_21.x;\n    u_xlat16_21.xyz = u_xlat1.xyz * (-u_xlat16_21.xxx) + u_xlat2.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_46) * _LightColor0.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_5.xyz = log2(u_xlat16_9.xyz);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_5.xyz = exp2(u_xlat16_5.xyz);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat6.xyz = vec3(u_xlat16_42) * u_xlat16_21.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat6.xyz;\n        u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat11.xyz = u_xlat11.xyz / u_xlat6.xyz;\n        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat10;\n            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n            u_xlat10 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat10.y, u_xlat10.x);\n        u_xlat42 = min(u_xlat10.z, u_xlat42);\n        u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat10.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_21.xyz;\n    }\n    u_xlat16_46 = (-u_xlat0.z) * 0.699999988 + 1.70000005;\n    u_xlat16_46 = u_xlat0.z * u_xlat16_46;\n    u_xlat16_46 = u_xlat16_46 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_46);\n    u_xlat16_50 = u_xlat10_6.w + -1.0;\n    u_xlat16_50 = unity_SpecCube0_HDR.w * u_xlat16_50 + 1.0;\n    u_xlat16_50 = u_xlat16_50 * unity_SpecCube0_HDR.x;\n    u_xlat16_9.xyz = u_xlat10_6.xyz * vec3(u_xlat16_50);\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat10.xyz = vec3(u_xlat16_42) * u_xlat16_21.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;\n            u_xlat12.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;\n            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat11;\n                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;\n                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;\n                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;\n                u_xlat11 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat11.y, u_xlat11.x);\n            u_xlat42 = min(u_xlat11.z, u_xlat42);\n            u_xlat11.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat42) + u_xlat11.xyz;\n        } else {\n            u_xlat10.xyz = u_xlat16_21.xyz;\n        }\n        u_xlat10_10 = textureCubeLodEXT(unity_SpecCube1, u_xlat10.xyz, u_xlat16_46);\n        u_xlat16_46 = u_xlat10_10.w + -1.0;\n        u_xlat16_46 = unity_SpecCube1_HDR.w * u_xlat16_46 + 1.0;\n        u_xlat16_46 = u_xlat16_46 * unity_SpecCube1_HDR.x;\n        u_xlat16_21.xyz = u_xlat10_10.xyz * vec3(u_xlat16_46);\n        u_xlat16_6.xyz = vec3(u_xlat16_50) * u_xlat10_6.xyz + (-u_xlat16_21.xyz);\n        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_6.xyz + u_xlat16_21.xyz;\n        u_xlat16_9.xyz = u_xlat9.xyz;\n    }\n    u_xlat16_21.xyz = u_xlat16_7.xxx * u_xlat16_9.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat42 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat6.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_46 = u_xlat15 + u_xlat15;\n    u_xlat16_46 = u_xlat15 * u_xlat16_46;\n    u_xlat16_46 = u_xlat16_46 * u_xlat0.z + -0.5;\n    u_xlat16_50 = (-u_xlat42) + 1.0;\n    u_xlat16_9.x = u_xlat16_50 * u_xlat16_50;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_9.x;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_9.x;\n    u_xlat16_50 = u_xlat16_46 * u_xlat16_50 + 1.0;\n    u_xlat16_9.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_23.x = u_xlat16_9.x * u_xlat16_9.x;\n    u_xlat16_23.x = u_xlat16_23.x * u_xlat16_23.x;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_23.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_9.x + 1.0;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_50;\n    u_xlat29 = u_xlat42 * u_xlat16_46;\n    u_xlat43 = u_xlat0.z * u_xlat0.z;\n    u_xlat1.w = max(u_xlat43, 0.00200000009);\n    u_xlat2.x = (-u_xlat1.w) + 1.0;\n    u_xlat16 = abs(u_xlat0.x) * u_xlat2.x + u_xlat1.w;\n    u_xlat2.x = u_xlat42 * u_xlat2.x + u_xlat1.w;\n    u_xlat0.x = abs(u_xlat0.x) * u_xlat2.x;\n    u_xlat0.x = u_xlat42 * u_xlat16 + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat2.x = u_xlat1.w * u_xlat1.w;\n    u_xlat16 = u_xlat1.x * u_xlat2.x + (-u_xlat1.x);\n    u_xlat1.x = u_xlat16 * u_xlat1.x + 1.0;\n    u_xlat2.x = u_xlat2.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat1.x = u_xlat2.x / u_xlat1.x;\n    u_xlat0.xz = u_xlat0.xz * u_xlat1.xw;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat42 * u_xlat0.x;\n    u_xlat28 = (-u_xlat0.z) * 0.280000001 + 1.0;\n    u_xlat16_46 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb42 = u_xlat16_46!=0.0;\n    u_xlat42 = u_xlatb42 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat42 * u_xlat0.x;\n    u_xlat16_45 = (-u_xlat16_45) + 1.0;\n    u_xlat16_45 = u_xlat10_0.y * _GlossMapScale + u_xlat16_45;\n    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);\n    u_xlat16_23.xyz = vec3(u_xlat29) * u_xlat16_8.xyz;\n    u_xlat16_23.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_23.xyz;\n    u_xlat0.xyw = u_xlat16_8.xyz * u_xlat0.xxx;\n    u_xlat16_46 = (-u_xlat15) + 1.0;\n    u_xlat16_7.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_7.x;\n    u_xlat16_8.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_46) + u_xlat16_3.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_8.xyz;\n    u_xlat0.xyw = u_xlat16_4.xyz * u_xlat16_23.xyz + u_xlat0.xyw;\n    u_xlat16_4.xyz = u_xlat16_21.xyz * vec3(u_xlat28);\n    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_45);\n    u_xlat16_3.xyz = u_xlat16_9.xxx * u_xlat16_7.xyz + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nlowp float u_xlat10_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nmediump float u_xlat16_39;\nlowp float u_xlat10_39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat10_39 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat16_41 = (-u_xlat10_39) + 1.0;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat10_39) + vec3(u_xlat16_41);\n    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = vec3(u_xlat16_41) * u_xlat16_3.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_17 = texture2D(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat10_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat10_17;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_17.xyz = exp2(u_xlat16_17.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_17.xyz = max(u_xlat16_17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat16_39 = inversesqrt(u_xlat16_39);\n        u_xlat5.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat10_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat16_39 = inversesqrt(u_xlat16_39);\n            u_xlat9.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat16_17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nfloat u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nlowp float u_xlat10_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat39;\nmediump float u_xlat16_39;\nbool u_xlatb39;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1 = inversesqrt(u_xlat1);\n    u_xlat14.xyz = vec3(u_xlat1) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_17 = texture2D(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat10_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat10_17;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_17.xyz = exp2(u_xlat16_17.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_17.xyz = max(u_xlat16_17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat16_39 = inversesqrt(u_xlat16_39);\n        u_xlat5.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat10_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat16_39 = inversesqrt(u_xlat16_39);\n            u_xlat9.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat1) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat0.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat0.x = u_xlat0.x * u_xlat16_42;\n    u_xlat13 = u_xlat4.x * u_xlat4.x;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat13 = u_xlat13 * u_xlat4.x;\n    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_17.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    u_xlat16_6.xyz = u_xlat16_19.xyz * vec3(u_xlat13);\n    u_xlat16_21.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_21.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nlowp float u_xlat10_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nmediump float u_xlat16_39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_17 = texture2D(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat10_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat10_17;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_17.xyz = exp2(u_xlat16_17.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_17.xyz = max(u_xlat16_17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat16_39 = inversesqrt(u_xlat16_39);\n        u_xlat5.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat10_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat16_39 = inversesqrt(u_xlat16_39);\n            u_xlat9.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat16_17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nmediump float u_xlat16_44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat16_5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat16_44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat16_44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat16_5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat16_2.xyz);\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nbool u_xlatb6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat23;\nmediump vec3 u_xlat16_23;\nmediump vec3 u_xlat16_24;\nmediump float u_xlat16_26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat45;\nmediump float u_xlat16_49;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat16_0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb6 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb6){\n        u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat45 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat45 = min(u_xlat7.z, u_xlat45);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat45) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_43);\n    u_xlat16_10.x = u_xlat10_5.w + -1.0;\n    u_xlat16_10.x = unity_SpecCube0_HDR.w * u_xlat16_10.x + 1.0;\n    u_xlat16_10.x = u_xlat16_10.x * unity_SpecCube0_HDR.x;\n    u_xlat16_23.xyz = u_xlat10_5.xyz * u_xlat16_10.xxx;\n    u_xlatb6 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb6){\n        u_xlatb6 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb6){\n            u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n            u_xlat6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat45 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat45 = min(u_xlat7.z, u_xlat45);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat45) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat16_6.xyz = u_xlat16_10.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat23.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_6.xyz + u_xlat16_11.xyz;\n        u_xlat16_23.xyz = u_xlat23.xyz;\n    }\n    u_xlat16_10.xyz = vec3(u_xlat16_42) * u_xlat16_23.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz;\n    u_xlat39 = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat16_1.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat6.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_49 = (-u_xlat16_1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_49 * u_xlat16_49;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_49 = u_xlat16_49 * u_xlat16_11.x;\n    u_xlat16_49 = u_xlat16_42 * u_xlat16_49 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_49;\n    u_xlat16_26 = u_xlat16_1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat6.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat16_1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat16_1.x * u_xlat6.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat6.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat6.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat16_26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_49 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_49;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(u_xlat39);\n    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_10.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nmediump float u_xlat16_44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb39 = u_xlat16_2.x<0.0;\n    if(u_xlatb39){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat16_5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat16_44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat16_44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat16_5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nbool u_xlatb6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat23;\nmediump vec3 u_xlat16_23;\nmediump vec3 u_xlat16_24;\nmediump float u_xlat16_26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat45;\nmediump float u_xlat16_49;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb39 = u_xlat16_2.x<0.0;\n    if(u_xlatb39){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat16_0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb6 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb6){\n        u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat45 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat45 = min(u_xlat7.z, u_xlat45);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat45) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_43);\n    u_xlat16_10.x = u_xlat10_5.w + -1.0;\n    u_xlat16_10.x = unity_SpecCube0_HDR.w * u_xlat16_10.x + 1.0;\n    u_xlat16_10.x = u_xlat16_10.x * unity_SpecCube0_HDR.x;\n    u_xlat16_23.xyz = u_xlat10_5.xyz * u_xlat16_10.xxx;\n    u_xlatb6 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb6){\n        u_xlatb6 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb6){\n            u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n            u_xlat6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat45 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat45 = min(u_xlat7.z, u_xlat45);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat45) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat16_6.xyz = u_xlat16_10.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat23.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_6.xyz + u_xlat16_11.xyz;\n        u_xlat16_23.xyz = u_xlat23.xyz;\n    }\n    u_xlat16_10.xyz = vec3(u_xlat16_42) * u_xlat16_23.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz;\n    u_xlat39 = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat16_1.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat6.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_49 = (-u_xlat16_1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_49 * u_xlat16_49;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_49 = u_xlat16_49 * u_xlat16_11.x;\n    u_xlat16_49 = u_xlat16_42 * u_xlat16_49 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_49;\n    u_xlat16_26 = u_xlat16_1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat6.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat16_1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat16_1.x * u_xlat6.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat6.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat6.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat16_26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_49 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_49;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(u_xlat39);\n    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_10.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec2 u_xlat10_0;\nfloat u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp float u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat14;\nbool u_xlatb14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_15;\nbool u_xlatb15;\nvec3 u_xlat19;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nfloat u_xlat45;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_42 = (-u_xlat10_0.x) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(u_xlat16_42);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1 = inversesqrt(u_xlat1);\n    u_xlat14.xyz = vec3(u_xlat1) * vs_TEXCOORD1.xyz;\n    u_xlat10_2 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_43 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_43 = u_xlat10_2 * _OcclusionStrength + u_xlat16_43;\n    u_xlat2 = (-u_xlat10_0.y) * _GlossMapScale + 1.0;\n    u_xlat16_5.x = dot(u_xlat14.xyz, u_xlat0.xzw);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xzw * (-u_xlat16_5.xxx) + u_xlat14.xyz;\n    u_xlatb15 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb15){\n        u_xlat16_15.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat16_15.x = inversesqrt(u_xlat16_15.x);\n        u_xlat15.xyz = u_xlat16_15.xxx * u_xlat16_5.xyz;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat15.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat15.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat15.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat6.x = min(u_xlat6.y, u_xlat6.x);\n        u_xlat6.x = min(u_xlat6.z, u_xlat6.x);\n        u_xlat19.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat15.xyz = u_xlat15.xyz * u_xlat6.xxx + u_xlat19.xyz;\n    } else {\n        u_xlat15.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_44 = (-u_xlat2) * 0.699999988 + 1.70000005;\n    u_xlat16_44 = u_xlat2 * u_xlat16_44;\n    u_xlat16_44 = u_xlat16_44 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat15.xyz, u_xlat16_44);\n    u_xlat16_9.x = u_xlat10_6.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_6.xyz * u_xlat16_9.xxx;\n    u_xlatb15 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb15){\n        u_xlatb15 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb15){\n            u_xlat16_15.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat16_15.x = inversesqrt(u_xlat16_15.x);\n            u_xlat15.xyz = u_xlat16_15.xxx * u_xlat16_5.xyz;\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat15.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat15.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat15.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat45 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat45 = min(u_xlat7.z, u_xlat45);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat45) + u_xlat7.xyz;\n        } else {\n            u_xlat15.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat15.xyz, u_xlat16_44);\n        u_xlat16_11.x = u_xlat10_5.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_5.xyz * u_xlat16_11.xxx;\n        u_xlat16_15.xyz = u_xlat16_9.xxx * u_xlat10_6.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_15.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_43) * u_xlat16_22.xyz;\n    u_xlat15.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat1) + _WorldSpaceLightPos0.xyz;\n    u_xlat1 = dot(u_xlat15.xyz, u_xlat15.xyz);\n    u_xlat1 = max(u_xlat1, 0.00100000005);\n    u_xlat1 = inversesqrt(u_xlat1);\n    u_xlat15.xyz = vec3(u_xlat1) * u_xlat15.xyz;\n    u_xlat1 = dot(u_xlat0.xzw, (-u_xlat14.xyz));\n    u_xlat14.x = dot(u_xlat0.xzw, _WorldSpaceLightPos0.xyz);\n    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xzw, u_xlat15.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat16_43 = u_xlat26 + u_xlat26;\n    u_xlat16_43 = u_xlat26 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * u_xlat2 + -0.5;\n    u_xlat16_48 = (-u_xlat14.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_43 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat1) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_11.x + 1.0;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_48;\n    u_xlat39 = u_xlat14.x * u_xlat16_43;\n    u_xlat27 = u_xlat2 * u_xlat2;\n    u_xlat27 = max(u_xlat27, 0.00200000009);\n    u_xlat40 = (-u_xlat27) + 1.0;\n    u_xlat15.x = abs(u_xlat1) * u_xlat40 + u_xlat27;\n    u_xlat40 = u_xlat14.x * u_xlat40 + u_xlat27;\n    u_xlat1 = u_xlat40 * abs(u_xlat1);\n    u_xlat1 = u_xlat14.x * u_xlat15.x + u_xlat1;\n    u_xlat1 = u_xlat1 + 9.99999975e-06;\n    u_xlat1 = 0.5 / u_xlat1;\n    u_xlat40 = u_xlat27 * u_xlat27;\n    u_xlat15.x = u_xlat0.x * u_xlat40 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat15.x * u_xlat0.x + 1.0;\n    u_xlat40 = u_xlat40 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat40 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat1;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat14.x * u_xlat0.x;\n    u_xlat1 = u_xlat27 * u_xlat2;\n    u_xlat1 = (-u_xlat1) * 0.280000001 + 1.0;\n    u_xlat16_43 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb14 = u_xlat16_43!=0.0;\n    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat14.x;\n    u_xlat16_42 = (-u_xlat16_42) + 1.0;\n    u_xlat16_42 = u_xlat10_0.y * _GlossMapScale + u_xlat16_42;\n    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat39) * _LightColor0.xyz;\n    u_xlat0.xyw = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_43 = (-u_xlat26) + 1.0;\n    u_xlat16_48 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_43) + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat0.xyw * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_4.xyz = u_xlat16_9.xyz * vec3(u_xlat1);\n    u_xlat16_9.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_42);\n    u_xlat16_3.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nlowp float u_xlat10_39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nmediump float u_xlat16_44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat10_39 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat16_41 = (-u_xlat10_39) + 1.0;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat10_39) + vec3(u_xlat16_41);\n    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = vec3(u_xlat16_41) * u_xlat16_3.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat16_5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat16_44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat16_44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat16_5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nmediump float u_xlat16_44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat16_5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat16_44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat16_44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat16_5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat0.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat0.x = u_xlat0.x * u_xlat16_42;\n    u_xlat13 = u_xlat40 * u_xlat40;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat13 = u_xlat13 * u_xlat40;\n    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat13);\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_12.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n    u_xlat3 = u_xlat1.yyyy * u_xlat2;\n    u_xlat2 = u_xlat2 * u_xlat2;\n    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;\n    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;\n    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;\n    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;\n    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;\n    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat2);\n    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;\n    u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat2 * u_xlat0;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.zxy;\n    u_xlat16_3.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat16_3.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_3.xyz = vec3(u_xlat21) * u_xlat16_3.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n    u_xlat3 = u_xlat2.yyyy * u_xlat1;\n    u_xlat1 = u_xlat1 * u_xlat1;\n    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;\n    u_xlat3 = u_xlat4 * u_xlat2.xxxx + u_xlat3;\n    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;\n    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat4 * u_xlat2.zzzz + u_xlat3;\n    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;\n    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat1);\n    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;\n    u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat1 * u_xlat0;\n    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat25;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat4 = u_xlat2.yyyy * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;\n    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;\n    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;\n    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;\n    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;\n    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat3);\n    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;\n    u_xlat1 = u_xlat1 * u_xlat4;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat1 = u_xlat3 * u_xlat1;\n    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;\n    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;\n    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;\n    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat25;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    vs_TEXCOORD2.xyz = u_xlat2.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz;\n    u_xlat16_4.xyz = u_xlat2.yzx * u_xlat3.zxy;\n    u_xlat16_4.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat16_4.xyz);\n    u_xlat25 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_4.xyz = vec3(u_xlat25) * u_xlat16_4.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD4.xyz = u_xlat3.xyz;\n    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat4 = u_xlat3.yyyy * u_xlat2;\n    u_xlat2 = u_xlat2 * u_xlat2;\n    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;\n    u_xlat4 = u_xlat5 * u_xlat3.xxxx + u_xlat4;\n    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;\n    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1 = u_xlat5 * u_xlat3.zzzz + u_xlat4;\n    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;\n    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat2);\n    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;\n    u_xlat1 = u_xlat1 * u_xlat4;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat1 = u_xlat2 * u_xlat1;\n    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;\n    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_6.x = u_xlat3.y * u_xlat3.y;\n    u_xlat16_6.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_6.x);\n    u_xlat16_3 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat0.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);\n    vs_TEXCOORD1.w = exp2(u_xlat0.x);\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nmediump float u_xlat16_44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat16_5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat16_44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat16_44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat16_5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat39 = vs_TEXCOORD1.w;\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat0.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);\n    vs_TEXCOORD1.w = exp2(u_xlat0.x);\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nmediump vec3 u_xlat16_14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat16_7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat16_18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_14.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat0.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);\n    vs_TEXCOORD1.w = exp2(u_xlat0.x);\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat16_2.xyz);\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);\n    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump float u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nfloat u_xlat6;\nlowp float u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_20;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_46;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0 = inversesqrt(u_xlat16_0);\n    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat16_4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_6 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_6 * _OcclusionStrength + u_xlat16_45;\n    u_xlat6 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_20.xyz = log2(u_xlat16_5.xyz);\n    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_20.xyz = exp2(u_xlat16_20.xyz);\n    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_20.xyz = max(u_xlat16_20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_46 = (-u_xlat6) * 0.699999988 + 1.70000005;\n    u_xlat16_46 = u_xlat16_46 * u_xlat6;\n    u_xlat16_46 = u_xlat16_46 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_46);\n    u_xlat16_11.x = u_xlat10_5.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_5.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_4.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_46);\n        u_xlat16_12.x = u_xlat10_4.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_4.xyz * u_xlat16_12.xxx;\n        u_xlat16_7.xyz = u_xlat16_11.xxx * u_xlat10_5.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat6 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat6 * u_xlat6;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat6;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat16_20.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat42 = vs_TEXCOORD1.w;\n    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb42 = u_xlat16_2.x<0.0;\n    if(u_xlatb42){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat16_7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat16_18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat42 = vs_TEXCOORD1.w;\n    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump float u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nfloat u_xlat6;\nlowp float u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_20;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_46;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb42 = u_xlat16_2.x<0.0;\n    if(u_xlatb42){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0 = inversesqrt(u_xlat16_0);\n    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat16_4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_6 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_6 * _OcclusionStrength + u_xlat16_45;\n    u_xlat6 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_20.xyz = log2(u_xlat16_5.xyz);\n    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_20.xyz = exp2(u_xlat16_20.xyz);\n    u_xlat16_20.xyz = u_xlat16_20.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_20.xyz = max(u_xlat16_20.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_46 = (-u_xlat6) * 0.699999988 + 1.70000005;\n    u_xlat16_46 = u_xlat16_46 * u_xlat6;\n    u_xlat16_46 = u_xlat16_46 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_46);\n    u_xlat16_11.x = u_xlat10_5.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_5.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_4.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_46);\n        u_xlat16_12.x = u_xlat10_4.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_4.xyz * u_xlat16_12.xxx;\n        u_xlat16_7.xyz = u_xlat16_11.xxx * u_xlat10_5.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat6 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat6 * u_xlat6;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat6;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat16_20.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat42 = vs_TEXCOORD1.w;\n    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec2 u_xlat10_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3 u_xlatb11;\nmediump vec3 u_xlat16_12;\nmediump vec4 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat16;\nfloat u_xlat17;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_28;\nfloat u_xlat30;\nlowp float u_xlat10_30;\nfloat u_xlat31;\nmediump float u_xlat16_43;\nfloat u_xlat45;\nmediump float u_xlat16_45;\nbool u_xlatb45;\nfloat u_xlat46;\nmediump float u_xlat16_48;\nmediump float u_xlat16_49;\nmediump float u_xlat16_50;\nmediump float u_xlat16_57;\nvoid main()\n{\n    u_xlat10_0.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_48 = (-u_xlat10_0.x) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(u_xlat16_48);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_30 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_49 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_49 = u_xlat10_30 * _OcclusionStrength + u_xlat16_49;\n    u_xlat0.z = (-u_xlat10_0.y) * _GlossMapScale + 1.0;\n    u_xlat16_5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat1.xyz * (-u_xlat16_5.xxx) + u_xlat2.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb45 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb45){\n        u_xlat16_45 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat16_45 = inversesqrt(u_xlat16_45);\n        u_xlat8.xyz = vec3(u_xlat16_45) * u_xlat16_5.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat45 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat45 = min(u_xlat9.z, u_xlat45);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat45) + u_xlat9.xyz;\n    } else {\n        u_xlat8.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_50 = (-u_xlat0.z) * 0.699999988 + 1.70000005;\n    u_xlat16_50 = u_xlat0.z * u_xlat16_50;\n    u_xlat16_50 = u_xlat16_50 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat8.xyz, u_xlat16_50);\n    u_xlat16_12.x = u_xlat10_6.w + -1.0;\n    u_xlat16_12.x = unity_SpecCube0_HDR.w * u_xlat16_12.x + 1.0;\n    u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz * u_xlat16_12.xxx;\n    u_xlatb45 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb45){\n        u_xlatb45 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb45){\n            u_xlat16_45 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat16_45 = inversesqrt(u_xlat16_45);\n            u_xlat8.xyz = vec3(u_xlat16_45) * u_xlat16_5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n            }\n            u_xlat45 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat45 = min(u_xlat9.z, u_xlat45);\n            u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat45) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat8.xyz, u_xlat16_50);\n        u_xlat16_13.x = u_xlat10_5.w + -1.0;\n        u_xlat16_13.x = unity_SpecCube1_HDR.w * u_xlat16_13.x + 1.0;\n        u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube1_HDR.x;\n        u_xlat16_13.xyz = u_xlat10_5.xyz * u_xlat16_13.xxx;\n        u_xlat16_8.xyz = u_xlat16_12.xxx * u_xlat10_6.xyz + (-u_xlat16_13.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_8.xyz + u_xlat16_13.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat16_12.xyz = vec3(u_xlat16_49) * u_xlat16_27.xyz;\n    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = u_xlat0.xxx * u_xlat8.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat45 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat8.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16 = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);\n    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);\n    u_xlat16_57 = u_xlat16 + u_xlat16;\n    u_xlat16_57 = u_xlat16 * u_xlat16_57;\n    u_xlat16_57 = u_xlat16_57 * u_xlat0.z + -0.5;\n    u_xlat16_13.x = (-u_xlat45) + 1.0;\n    u_xlat16_28 = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_28;\n    u_xlat16_13.x = u_xlat16_57 * u_xlat16_13.x + 1.0;\n    u_xlat16_28 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_43 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_43;\n    u_xlat16_57 = u_xlat16_57 * u_xlat16_28 + 1.0;\n    u_xlat16_57 = u_xlat16_57 * u_xlat16_13.x;\n    u_xlat31 = u_xlat45 * u_xlat16_57;\n    u_xlat46 = u_xlat0.z * u_xlat0.z;\n    u_xlat1.w = max(u_xlat46, 0.00200000009);\n    u_xlat2.x = (-u_xlat1.w) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat2.x + u_xlat1.w;\n    u_xlat2.x = u_xlat45 * u_xlat2.x + u_xlat1.w;\n    u_xlat0.x = abs(u_xlat0.x) * u_xlat2.x;\n    u_xlat0.x = u_xlat45 * u_xlat17 + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat2.x = u_xlat1.w * u_xlat1.w;\n    u_xlat17 = u_xlat1.x * u_xlat2.x + (-u_xlat1.x);\n    u_xlat1.x = u_xlat17 * u_xlat1.x + 1.0;\n    u_xlat2.x = u_xlat2.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat1.x = u_xlat2.x / u_xlat1.x;\n    u_xlat0.xz = u_xlat0.xz * u_xlat1.xw;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat45 * u_xlat0.x;\n    u_xlat30 = (-u_xlat0.z) * 0.280000001 + 1.0;\n    u_xlat16_57 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb45 = u_xlat16_57!=0.0;\n    u_xlat45 = u_xlatb45 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat45 * u_xlat0.x;\n    u_xlat16_48 = (-u_xlat16_48) + 1.0;\n    u_xlat16_48 = u_xlat10_0.y * _GlossMapScale + u_xlat16_48;\n    u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);\n    u_xlat16_13.xzw = vec3(u_xlat31) * _LightColor0.xyz;\n    u_xlat16_13.xzw = u_xlat16_7.xyz * vec3(u_xlat16_49) + u_xlat16_13.xzw;\n    u_xlat0.xyw = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_49 = (-u_xlat16) + 1.0;\n    u_xlat16_57 = u_xlat16_49 * u_xlat16_49;\n    u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n    u_xlat16_49 = u_xlat16_49 * u_xlat16_57;\n    u_xlat16_14.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_49) + u_xlat16_3.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_14.xyz;\n    u_xlat0.xyw = u_xlat16_4.xyz * u_xlat16_13.xzw + u_xlat0.xyw;\n    u_xlat16_4.xyz = u_xlat16_12.xyz * vec3(u_xlat30);\n    u_xlat16_12.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_48);\n    u_xlat16_3.xyz = vec3(u_xlat16_28) * u_xlat16_12.xyz + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    u_xlat45 = vs_TEXCOORD1.w;\n    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nlowp float u_xlat10_42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat10_42 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat16_44 = (-u_xlat10_42) + 1.0;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat10_42) + vec3(u_xlat16_44);\n    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = vec3(u_xlat16_44) * u_xlat16_3.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat16_7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat16_18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat42 = vs_TEXCOORD1.w;\n    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nfloat u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1 = inversesqrt(u_xlat1);\n    u_xlat15.xyz = vec3(u_xlat1) * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat16_7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat1) + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_53;\n    u_xlat14 = u_xlat4 * u_xlat4;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat14 = u_xlat14 * u_xlat4;\n    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat16_18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat14);\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_13.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_11.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat16_2.xyz;\n    u_xlat42 = vs_TEXCOORD1.w;\n    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat42) * u_xlat16_0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_18.xyz = exp2(u_xlat16_18.xyz);\n    u_xlat16_18.xyz = u_xlat16_18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_18.xyz = max(u_xlat16_18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = vec3(u_xlat16_42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat16_7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat16_18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat42 = vs_TEXCOORD1.w;\n    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);\n    vs_TEXCOORD1.w = exp2(u_xlat1.x);\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_4.x = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat10_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat10_4.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat16_4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);\n        u_xlat4.xyz = u_xlat16_4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat10_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat16_40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat16_40 = inversesqrt(u_xlat16_40);\n            u_xlat5.xyz = vec3(u_xlat16_40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_5.xyz * vec3(u_xlat16_39);\n        u_xlat16_4.xyz = vec3(u_xlat16_43) * u_xlat10_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_12.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);\n    vs_TEXCOORD1.w = exp2(u_xlat1.x);\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat13 = inversesqrt(u_xlat13);\n    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat13 = inversesqrt(u_xlat13);\n    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;\n    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.zxy;\n    u_xlat16_3.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat16_3.xyz);\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_3.xyz = u_xlat1.xxx * u_xlat16_3.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nbool u_xlatb6;\nvec3 u_xlat7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat6.xyz, u_xlat7.xyz);\n    u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat6.x = sqrt(u_xlat6.x);\n    u_xlat6.x = (-u_xlat37) + u_xlat6.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_6.x = texture2D(_ShadowMapTexture, u_xlat6.xy).x;\n    u_xlat16_39 = (-u_xlat10_6.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat10_6.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_37 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_16.x = dot(u_xlat1.xyz, u_xlat16_0.xyz);\n    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;\n    u_xlat16_16.xyz = u_xlat16_0.xyz * (-u_xlat16_16.xxx) + u_xlat1.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb6 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb6){\n        u_xlat16_6.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat6.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat42 = min(u_xlat7.z, u_xlat42);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_16.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_39);\n    u_xlat16_41 = u_xlat10_6.w + -1.0;\n    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;\n    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_6.xyz * vec3(u_xlat16_41);\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = u_xlat16_16.xyz * vec3(u_xlat16_42);\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_16.xyz;\n        }\n        u_xlat10_7 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_7.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_16.xyz = u_xlat10_7.xyz * vec3(u_xlat16_39);\n        u_xlat16_6.xyz = vec3(u_xlat16_41) * u_xlat10_6.xyz + (-u_xlat16_16.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_6.xyz + u_xlat16_16.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_10.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat6.xyz = vec3(u_xlat36) * u_xlat6.xyz;\n    u_xlat36 = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat16_1.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat6.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_40 = (-u_xlat16_1.x) + 1.0;\n    u_xlat16_41 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_41;\n    u_xlat16_40 = u_xlat16_39 * u_xlat16_40 + 1.0;\n    u_xlat16_41 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_41 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_40;\n    u_xlat16_24 = u_xlat16_1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat6.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat16_1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat16_1.x * u_xlat6.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat6.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat6.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat16_24) * u_xlat16_5.xyz;\n    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_40;\n    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat36);\n    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_41) * u_xlat16_4.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat36 = vs_TEXCOORD1.w;\n    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nbool u_xlatb36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb36 = u_xlat16_2.x<0.0;\n    if(u_xlatb36){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_4.x = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat10_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat10_4.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat16_4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);\n        u_xlat4.xyz = u_xlat16_4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat10_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat16_40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat16_40 = inversesqrt(u_xlat16_40);\n            u_xlat5.xyz = vec3(u_xlat16_40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_5.xyz * vec3(u_xlat16_39);\n        u_xlat16_4.xyz = vec3(u_xlat16_43) * u_xlat10_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat36 = vs_TEXCOORD1.w;\n    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nbool u_xlatb6;\nvec3 u_xlat7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_24;\nfloat u_xlat25;\nfloat u_xlat36;\nbool u_xlatb36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nbool u_xlatb42;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb36 = u_xlat16_2.x<0.0;\n    if(u_xlatb36){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat6.xyz, u_xlat7.xyz);\n    u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat6.x = sqrt(u_xlat6.x);\n    u_xlat6.x = (-u_xlat37) + u_xlat6.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_6.x = texture2D(_ShadowMapTexture, u_xlat6.xy).x;\n    u_xlat16_39 = (-u_xlat10_6.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat10_6.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_37 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_16.x = dot(u_xlat1.xyz, u_xlat16_0.xyz);\n    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;\n    u_xlat16_16.xyz = u_xlat16_0.xyz * (-u_xlat16_16.xxx) + u_xlat1.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb6 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb6){\n        u_xlat16_6.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat6.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat42 = min(u_xlat7.z, u_xlat42);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_16.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_39);\n    u_xlat16_41 = u_xlat10_6.w + -1.0;\n    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;\n    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_6.xyz * vec3(u_xlat16_41);\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat7.xyz = u_xlat16_16.xyz * vec3(u_xlat16_42);\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_16.xyz;\n        }\n        u_xlat10_7 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_7.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_16.xyz = u_xlat10_7.xyz * vec3(u_xlat16_39);\n        u_xlat16_6.xyz = vec3(u_xlat16_41) * u_xlat10_6.xyz + (-u_xlat16_16.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_6.xyz + u_xlat16_16.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_10.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat6.xyz = vec3(u_xlat36) * u_xlat6.xyz;\n    u_xlat36 = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat16_1.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat6.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_40 = (-u_xlat16_1.x) + 1.0;\n    u_xlat16_41 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_41;\n    u_xlat16_40 = u_xlat16_39 * u_xlat16_40 + 1.0;\n    u_xlat16_41 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_41 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_40;\n    u_xlat16_24 = u_xlat16_1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat6.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat16_1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat16_1.x * u_xlat6.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat6.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat6.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat16_24) * u_xlat16_5.xyz;\n    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_40;\n    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat36);\n    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_41) * u_xlat16_4.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat36 = vs_TEXCOORD1.w;\n    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec2 u_xlat10_0;\nfloat u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp float u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec4 u_xlat10_8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nvec3 u_xlat13;\nbool u_xlatb13;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_14;\nlowp float u_xlat10_14;\nbool u_xlatb14;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_40;\nfloat u_xlat41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat10_0.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_39 = (-u_xlat10_0.x) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(u_xlat16_39);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1 = inversesqrt(u_xlat1);\n    u_xlat13.xyz = vec3(u_xlat1) * vs_TEXCOORD1.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat5.xyz);\n    u_xlat14.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat14.x = dot(u_xlat14.xyz, u_xlat14.xyz);\n    u_xlat14.x = sqrt(u_xlat14.x);\n    u_xlat14.x = (-u_xlat2.x) + u_xlat14.x;\n    u_xlat2.x = unity_ShadowFadeCenterAndType.w * u_xlat14.x + u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat14.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_14 = texture2D(_ShadowMapTexture, u_xlat14.xy).x;\n    u_xlat16_40 = (-u_xlat10_14) + 1.0;\n    u_xlat16_40 = u_xlat2.x * u_xlat16_40 + u_xlat10_14;\n    u_xlat10_2 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_2 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat2.x = (-u_xlat10_0.y) * _GlossMapScale + 1.0;\n    u_xlat16_18.x = dot(u_xlat13.xyz, u_xlat0.xzw);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xzw * (-u_xlat16_18.xxx) + u_xlat13.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_40) * _LightColor0.xyz;\n    u_xlatb14 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb14){\n        u_xlat16_14.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat16_14.x = inversesqrt(u_xlat16_14.x);\n        u_xlat14.xyz = u_xlat16_14.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat14.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat14.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat14.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat5.x = min(u_xlat5.y, u_xlat5.x);\n        u_xlat5.x = min(u_xlat5.z, u_xlat5.x);\n        u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat14.xyz = u_xlat14.xyz * u_xlat5.xxx + u_xlat17.xyz;\n    } else {\n        u_xlat14.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_40 = (-u_xlat2.x) * 0.699999988 + 1.70000005;\n    u_xlat16_40 = u_xlat2.x * u_xlat16_40;\n    u_xlat16_40 = u_xlat16_40 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat14.xyz, u_xlat16_40);\n    u_xlat16_43 = u_xlat10_5.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_5.xyz * vec3(u_xlat16_43);\n    u_xlatb14 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb14){\n        u_xlatb14 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb14){\n            u_xlat16_14.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat16_14.x = inversesqrt(u_xlat16_14.x);\n            u_xlat14.xyz = u_xlat16_14.xxx * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat14.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat14.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat14.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat41 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat41 = min(u_xlat8.z, u_xlat41);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat14.xyz = u_xlat14.xyz * vec3(u_xlat41) + u_xlat8.xyz;\n        } else {\n            u_xlat14.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat10_8 = textureCubeLodEXT(unity_SpecCube1, u_xlat14.xyz, u_xlat16_40);\n        u_xlat16_40 = u_xlat10_8.w + -1.0;\n        u_xlat16_40 = unity_SpecCube1_HDR.w * u_xlat16_40 + 1.0;\n        u_xlat16_40 = u_xlat16_40 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_8.xyz * vec3(u_xlat16_40);\n        u_xlat16_14.xyz = vec3(u_xlat16_43) * u_xlat10_5.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_14.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat14.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat1) + _WorldSpaceLightPos0.xyz;\n    u_xlat1 = dot(u_xlat14.xyz, u_xlat14.xyz);\n    u_xlat1 = max(u_xlat1, 0.00100000005);\n    u_xlat1 = inversesqrt(u_xlat1);\n    u_xlat14.xyz = vec3(u_xlat1) * u_xlat14.xyz;\n    u_xlat1 = dot(u_xlat0.xzw, (-u_xlat13.xyz));\n    u_xlat13.x = dot(u_xlat0.xzw, _WorldSpaceLightPos0.xyz);\n    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xzw, u_xlat14.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat16_40 = u_xlat24 + u_xlat24;\n    u_xlat16_40 = u_xlat24 * u_xlat16_40;\n    u_xlat16_40 = u_xlat16_40 * u_xlat2.x + -0.5;\n    u_xlat16_42 = (-u_xlat13.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_40 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat1) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_43 + 1.0;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_42;\n    u_xlat36 = u_xlat13.x * u_xlat16_40;\n    u_xlat25 = u_xlat2.x * u_xlat2.x;\n    u_xlat25 = max(u_xlat25, 0.00200000009);\n    u_xlat37 = (-u_xlat25) + 1.0;\n    u_xlat14.x = abs(u_xlat1) * u_xlat37 + u_xlat25;\n    u_xlat37 = u_xlat13.x * u_xlat37 + u_xlat25;\n    u_xlat1 = u_xlat37 * abs(u_xlat1);\n    u_xlat1 = u_xlat13.x * u_xlat14.x + u_xlat1;\n    u_xlat1 = u_xlat1 + 9.99999975e-06;\n    u_xlat1 = 0.5 / u_xlat1;\n    u_xlat37 = u_xlat25 * u_xlat25;\n    u_xlat14.x = u_xlat0.x * u_xlat37 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat14.x * u_xlat0.x + 1.0;\n    u_xlat37 = u_xlat37 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat37 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat1;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat13.x * u_xlat0.x;\n    u_xlat1 = u_xlat25 * u_xlat2.x;\n    u_xlat1 = (-u_xlat1) * 0.280000001 + 1.0;\n    u_xlat16_40 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb13 = u_xlat16_40!=0.0;\n    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat13.x;\n    u_xlat16_39 = (-u_xlat16_39) + 1.0;\n    u_xlat16_39 = u_xlat10_0.y * _GlossMapScale + u_xlat16_39;\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat36) * u_xlat16_7.xyz;\n    u_xlat0.xyw = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_40 = (-u_xlat24) + 1.0;\n    u_xlat16_42 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_40) + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat0.xyw * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat1);\n    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_39);\n    u_xlat16_3.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;\n    u_xlat36 = vs_TEXCOORD1.w;\n    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nlowp float u_xlat10_36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat10_36 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat16_38 = (-u_xlat10_36) + 1.0;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat10_36) + vec3(u_xlat16_38);\n    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = vec3(u_xlat16_38) * u_xlat16_3.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_4.x = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat10_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat10_4.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat16_4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);\n        u_xlat4.xyz = u_xlat16_4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat10_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat16_40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat16_40 = inversesqrt(u_xlat16_40);\n            u_xlat5.xyz = vec3(u_xlat16_40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_5.xyz * vec3(u_xlat16_39);\n        u_xlat16_4.xyz = vec3(u_xlat16_43) * u_xlat10_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat36 = vs_TEXCOORD1.w;\n    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nmediump vec3 u_xlat16_18;\nfloat u_xlat36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_4.x = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat10_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat10_4.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat16_4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);\n        u_xlat4.xyz = u_xlat16_4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat10_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat16_40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat16_40 = inversesqrt(u_xlat16_40);\n            u_xlat5.xyz = vec3(u_xlat16_40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_5.xyz * vec3(u_xlat16_39);\n        u_xlat16_4.xyz = vec3(u_xlat16_43) * u_xlat10_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat0.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat0.x = u_xlat0.x * u_xlat16_39;\n    u_xlat12 = u_xlat37 * u_xlat37;\n    u_xlat12 = max(u_xlat12, 0.00200000009);\n    u_xlat12 = u_xlat12 * u_xlat37;\n    u_xlat12 = (-u_xlat12) * 0.280000001 + 1.0;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat12);\n    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_10.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz + u_xlat16_2.xyz;\n    u_xlat36 = vs_TEXCOORD1.w;\n    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat16_0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_18;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat36;\nfloat u_xlat37;\nlowp float u_xlat10_37;\nmediump float u_xlat16_38;\nmediump float u_xlat16_39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nbool u_xlatb40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_38 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_38);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat36 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat4.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = sqrt(u_xlat4.x);\n    u_xlat4.x = (-u_xlat37) + u_xlat4.x;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat4.x + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_4.x = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_39 = (-u_xlat10_4.x) + 1.0;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39 + u_xlat10_4.x;\n    u_xlat10_37 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_37 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat37 = (-_Glossiness) + 1.0;\n    u_xlat16_18.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;\n    u_xlat16_18.xyz = u_xlat0.xyz * (-u_xlat16_18.xxx) + u_xlat1.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;\n    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb4){\n        u_xlat16_4.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n        u_xlat16_4.x = inversesqrt(u_xlat16_4.x);\n        u_xlat4.xyz = u_xlat16_4.xxx * u_xlat16_18.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat5.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat5.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat5.z : u_xlat8.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat40 = min(u_xlat5.z, u_xlat40);\n        u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat40) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_18.xyz;\n    }\n    u_xlat16_39 = (-u_xlat37) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat37 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_39);\n    u_xlat16_43 = u_xlat10_4.w + -1.0;\n    u_xlat16_43 = unity_SpecCube0_HDR.w * u_xlat16_43 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz * vec3(u_xlat16_43);\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat16_40 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n            u_xlat16_40 = inversesqrt(u_xlat16_40);\n            u_xlat5.xyz = vec3(u_xlat16_40) * u_xlat16_18.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat5.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_18.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat5.xyz, u_xlat16_39);\n        u_xlat16_39 = u_xlat10_5.w + -1.0;\n        u_xlat16_39 = unity_SpecCube1_HDR.w * u_xlat16_39 + 1.0;\n        u_xlat16_39 = u_xlat16_39 * unity_SpecCube1_HDR.x;\n        u_xlat16_18.xyz = u_xlat10_5.xyz * vec3(u_xlat16_39);\n        u_xlat16_4.xyz = vec3(u_xlat16_43) * u_xlat10_4.xyz + (-u_xlat16_18.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_4.xyz + u_xlat16_18.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_10.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat4.xyz = vec3(u_xlat36) * u_xlat4.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat16_39 = u_xlat12 + u_xlat12;\n    u_xlat16_39 = u_xlat12 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39 * u_xlat37 + -0.5;\n    u_xlat16_42 = (-u_xlat1.x) + 1.0;\n    u_xlat16_43 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_43;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_42 + 1.0;\n    u_xlat16_43 = -abs(u_xlat36) + 1.0;\n    u_xlat16_10.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_10.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_43 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat24 = u_xlat1.x * u_xlat16_39;\n    u_xlat13 = u_xlat37 * u_xlat37;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat25 = (-u_xlat13) + 1.0;\n    u_xlat4.x = abs(u_xlat36) * u_xlat25 + u_xlat13;\n    u_xlat25 = u_xlat1.x * u_xlat25 + u_xlat13;\n    u_xlat36 = abs(u_xlat36) * u_xlat25;\n    u_xlat36 = u_xlat1.x * u_xlat4.x + u_xlat36;\n    u_xlat36 = u_xlat36 + 9.99999975e-06;\n    u_xlat36 = 0.5 / u_xlat36;\n    u_xlat25 = u_xlat13 * u_xlat13;\n    u_xlat4.x = u_xlat0.x * u_xlat25 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat4.x * u_xlat0.x + 1.0;\n    u_xlat25 = u_xlat25 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat25 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat36;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat36 = u_xlat13 * u_xlat37;\n    u_xlat36 = (-u_xlat36) * 0.280000001 + 1.0;\n    u_xlat16_39 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_39!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 + _Glossiness;\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat16_10.xyz = vec3(u_xlat24) * u_xlat16_7.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_39 = (-u_xlat12) + 1.0;\n    u_xlat16_42 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_42;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_39) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat36);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_38);\n    u_xlat16_2.xyz = vec3(u_xlat16_43) * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat36 = vs_TEXCOORD1.w;\n    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);\n    vs_TEXCOORD1.w = exp2(u_xlat1.x);\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2 = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat4.zz + u_xlat4.xw;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nlowp float u_xlat10_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nmediump float u_xlat16_39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_17 = texture2D(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat10_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat10_17;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_17.xyz = exp2(u_xlat16_17.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_17.xyz = max(u_xlat16_17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat16_39 = inversesqrt(u_xlat16_39);\n        u_xlat5.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat10_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat16_39 = inversesqrt(u_xlat16_39);\n            u_xlat9.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat16_17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_13.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);\n    vs_TEXCOORD1.w = exp2(u_xlat1.x);\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.zxy;\n    u_xlat16_3.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat16_3.xyz);\n    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_3.xyz = u_xlat1.xxx * u_xlat16_3.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_3.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_3.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_3.x);\n    u_xlat16_1 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat2.zz + u_xlat2.xw;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump float u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nlowp float u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_17;\nvec3 u_xlat19;\nmediump vec3 u_xlat16_19;\nlowp float u_xlat10_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nmediump float u_xlat16_39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_44;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0 = inversesqrt(u_xlat16_0);\n    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat16_4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat6.x = dot(u_xlat6.xyz, u_xlat7.xyz);\n    u_xlat19.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);\n    u_xlat19.x = sqrt(u_xlat19.x);\n    u_xlat19.x = (-u_xlat6.x) + u_xlat19.x;\n    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat19.x + u_xlat6.x;\n    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat19.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_19 = texture2D(_ShadowMapTexture, u_xlat19.xy).x;\n    u_xlat16_42 = (-u_xlat10_19) + 1.0;\n    u_xlat16_42 = u_xlat6.x * u_xlat16_42 + u_xlat10_19;\n    u_xlat10_6 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_6 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat6.x = (-_Glossiness) + 1.0;\n    u_xlat16_17.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_17.x = u_xlat16_17.x + u_xlat16_17.x;\n    u_xlat16_17.xyz = u_xlat0.xyz * (-u_xlat16_17.xxx) + u_xlat14.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_19.xyz = log2(u_xlat16_8.xyz);\n    u_xlat16_19.xyz = u_xlat16_19.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_19.xyz = exp2(u_xlat16_19.xyz);\n    u_xlat16_19.xyz = u_xlat16_19.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_19.xyz = max(u_xlat16_19.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat16_39 = dot(u_xlat16_17.xyz, u_xlat16_17.xyz);\n        u_xlat16_39 = inversesqrt(u_xlat16_39);\n        u_xlat7.xyz = vec3(u_xlat16_39) * u_xlat16_17.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat7.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_17.xyz;\n    }\n    u_xlat16_42 = (-u_xlat6.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat6.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_42);\n    u_xlat16_44 = u_xlat10_7.w + -1.0;\n    u_xlat16_44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;\n    u_xlat16_44 = u_xlat16_44 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_44);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat16_39 = dot(u_xlat16_17.xyz, u_xlat16_17.xyz);\n            u_xlat16_39 = inversesqrt(u_xlat16_39);\n            u_xlat9.xyz = vec3(u_xlat16_39) * u_xlat16_17.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_17.xyz;\n        }\n        u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_17.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat16_7.xyz = vec3(u_xlat16_44) * u_xlat10_7.xyz + (-u_xlat16_17.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_17.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_17.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat7.xyz = vec3(u_xlat39) * u_xlat7.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat6.x + -0.5;\n    u_xlat16_44 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_44 = u_xlat16_44 * u_xlat16_8.x;\n    u_xlat16_44 = u_xlat16_42 * u_xlat16_44 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_44;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat6.x * u_xlat6.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat6.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_5.xyz;\n    u_xlat16_21.xyz = u_xlat16_19.xyz * u_xlat16_4.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_4.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_4.x;\n    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_17.xyz * vec3(u_xlat39);\n    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat39 = vs_TEXCOORD1.w;\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nlowp float u_xlat10_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nmediump float u_xlat16_39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb39 = u_xlat16_2.x<0.0;\n    if(u_xlatb39){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_17 = texture2D(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat10_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat10_17;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_17.xyz = exp2(u_xlat16_17.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_17.xyz = max(u_xlat16_17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat16_39 = inversesqrt(u_xlat16_39);\n        u_xlat5.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat10_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat16_39 = inversesqrt(u_xlat16_39);\n            u_xlat9.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat16_17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat39 = vs_TEXCOORD1.w;\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump float u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nlowp float u_xlat10_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_17;\nvec3 u_xlat19;\nmediump vec3 u_xlat16_19;\nlowp float u_xlat10_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nmediump float u_xlat16_39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_44;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb39 = u_xlat16_2.x<0.0;\n    if(u_xlatb39){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0 = inversesqrt(u_xlat16_0);\n    u_xlat0.xyz = vec3(u_xlat16_0) * u_xlat16_4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat7.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat7.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat7.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat6.x = dot(u_xlat6.xyz, u_xlat7.xyz);\n    u_xlat19.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat19.x = dot(u_xlat19.xyz, u_xlat19.xyz);\n    u_xlat19.x = sqrt(u_xlat19.x);\n    u_xlat19.x = (-u_xlat6.x) + u_xlat19.x;\n    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat19.x + u_xlat6.x;\n    u_xlat6.x = u_xlat6.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat19.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_19 = texture2D(_ShadowMapTexture, u_xlat19.xy).x;\n    u_xlat16_42 = (-u_xlat10_19) + 1.0;\n    u_xlat16_42 = u_xlat6.x * u_xlat16_42 + u_xlat10_19;\n    u_xlat10_6 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_6 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat6.x = (-_Glossiness) + 1.0;\n    u_xlat16_17.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_17.x = u_xlat16_17.x + u_xlat16_17.x;\n    u_xlat16_17.xyz = u_xlat0.xyz * (-u_xlat16_17.xxx) + u_xlat14.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_19.xyz = log2(u_xlat16_8.xyz);\n    u_xlat16_19.xyz = u_xlat16_19.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_19.xyz = exp2(u_xlat16_19.xyz);\n    u_xlat16_19.xyz = u_xlat16_19.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_19.xyz = max(u_xlat16_19.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat16_39 = dot(u_xlat16_17.xyz, u_xlat16_17.xyz);\n        u_xlat16_39 = inversesqrt(u_xlat16_39);\n        u_xlat7.xyz = vec3(u_xlat16_39) * u_xlat16_17.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat7.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_17.xyz;\n    }\n    u_xlat16_42 = (-u_xlat6.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat6.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_42);\n    u_xlat16_44 = u_xlat10_7.w + -1.0;\n    u_xlat16_44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;\n    u_xlat16_44 = u_xlat16_44 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_44);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat16_39 = dot(u_xlat16_17.xyz, u_xlat16_17.xyz);\n            u_xlat16_39 = inversesqrt(u_xlat16_39);\n            u_xlat9.xyz = vec3(u_xlat16_39) * u_xlat16_17.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_17.xyz;\n        }\n        u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_17.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat16_7.xyz = vec3(u_xlat16_44) * u_xlat10_7.xyz + (-u_xlat16_17.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_7.xyz + u_xlat16_17.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_17.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat7.xyz = vec3(u_xlat39) * u_xlat7.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat6.x + -0.5;\n    u_xlat16_44 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_44 = u_xlat16_44 * u_xlat16_8.x;\n    u_xlat16_44 = u_xlat16_42 * u_xlat16_44 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_44;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat6.x * u_xlat6.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat6.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_5.xyz;\n    u_xlat16_21.xyz = u_xlat16_19.xyz * u_xlat16_4.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_5.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_4.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_4.x;\n    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_17.xyz * vec3(u_xlat39);\n    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat39 = vs_TEXCOORD1.w;\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec2 u_xlat10_0;\nvec4 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_9;\nvec3 u_xlat10;\nlowp vec4 u_xlat10_10;\nvec3 u_xlat11;\nvec3 u_xlat12;\nbvec3 u_xlatb12;\nbvec3 u_xlatb13;\nfloat u_xlat15;\nfloat u_xlat16;\nmediump vec3 u_xlat16_21;\nmediump vec3 u_xlat16_23;\nfloat u_xlat28;\nlowp float u_xlat10_28;\nfloat u_xlat29;\nfloat u_xlat42;\nmediump float u_xlat16_42;\nlowp float u_xlat10_42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_45;\nmediump float u_xlat16_46;\nmediump float u_xlat16_50;\nvoid main()\n{\n    u_xlat10_0.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_45 = (-u_xlat10_0.x) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(u_xlat16_45);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat28 = dot(u_xlat5.xyz, u_xlat6.xyz);\n    u_xlat5.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat42 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat42 = sqrt(u_xlat42);\n    u_xlat42 = (-u_xlat28) + u_xlat42;\n    u_xlat28 = unity_ShadowFadeCenterAndType.w * u_xlat42 + u_xlat28;\n    u_xlat28 = u_xlat28 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);\n    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_42 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlat16_46 = (-u_xlat10_42) + 1.0;\n    u_xlat16_46 = u_xlat28 * u_xlat16_46 + u_xlat10_42;\n    u_xlat10_28 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_7.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_7.x = u_xlat10_28 * _OcclusionStrength + u_xlat16_7.x;\n    u_xlat0.z = (-u_xlat10_0.y) * _GlossMapScale + 1.0;\n    u_xlat16_21.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat16_21.x = u_xlat16_21.x + u_xlat16_21.x;\n    u_xlat16_21.xyz = u_xlat1.xyz * (-u_xlat16_21.xxx) + u_xlat2.xyz;\n    u_xlat16_8.xyz = vec3(u_xlat16_46) * _LightColor0.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_9.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_9.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_9.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_5.xyz = log2(u_xlat16_9.xyz);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_5.xyz = exp2(u_xlat16_5.xyz);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat16_42 = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n        u_xlat16_42 = inversesqrt(u_xlat16_42);\n        u_xlat6.xyz = vec3(u_xlat16_42) * u_xlat16_21.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat6.xyz;\n        u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat11.xyz = u_xlat11.xyz / u_xlat6.xyz;\n        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat10;\n            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n            u_xlat10 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat10.y, u_xlat10.x);\n        u_xlat42 = min(u_xlat10.z, u_xlat42);\n        u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat42) + u_xlat10.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_21.xyz;\n    }\n    u_xlat16_46 = (-u_xlat0.z) * 0.699999988 + 1.70000005;\n    u_xlat16_46 = u_xlat0.z * u_xlat16_46;\n    u_xlat16_46 = u_xlat16_46 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_46);\n    u_xlat16_50 = u_xlat10_6.w + -1.0;\n    u_xlat16_50 = unity_SpecCube0_HDR.w * u_xlat16_50 + 1.0;\n    u_xlat16_50 = u_xlat16_50 * unity_SpecCube0_HDR.x;\n    u_xlat16_9.xyz = u_xlat10_6.xyz * vec3(u_xlat16_50);\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat16_42 = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n            u_xlat16_42 = inversesqrt(u_xlat16_42);\n            u_xlat10.xyz = vec3(u_xlat16_42) * u_xlat16_21.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;\n            u_xlat12.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;\n            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat11;\n                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;\n                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;\n                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;\n                u_xlat11 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat11.y, u_xlat11.x);\n            u_xlat42 = min(u_xlat11.z, u_xlat42);\n            u_xlat11.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat10.xyz = u_xlat10.xyz * vec3(u_xlat42) + u_xlat11.xyz;\n        } else {\n            u_xlat10.xyz = u_xlat16_21.xyz;\n        }\n        u_xlat10_10 = textureCubeLodEXT(unity_SpecCube1, u_xlat10.xyz, u_xlat16_46);\n        u_xlat16_46 = u_xlat10_10.w + -1.0;\n        u_xlat16_46 = unity_SpecCube1_HDR.w * u_xlat16_46 + 1.0;\n        u_xlat16_46 = u_xlat16_46 * unity_SpecCube1_HDR.x;\n        u_xlat16_21.xyz = u_xlat10_10.xyz * vec3(u_xlat16_46);\n        u_xlat16_6.xyz = vec3(u_xlat16_50) * u_xlat10_6.xyz + (-u_xlat16_21.xyz);\n        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_6.xyz + u_xlat16_21.xyz;\n        u_xlat16_9.xyz = u_xlat9.xyz;\n    }\n    u_xlat16_21.xyz = u_xlat16_7.xxx * u_xlat16_9.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, (-u_xlat2.xyz));\n    u_xlat42 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat6.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_46 = u_xlat15 + u_xlat15;\n    u_xlat16_46 = u_xlat15 * u_xlat16_46;\n    u_xlat16_46 = u_xlat16_46 * u_xlat0.z + -0.5;\n    u_xlat16_50 = (-u_xlat42) + 1.0;\n    u_xlat16_9.x = u_xlat16_50 * u_xlat16_50;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_9.x;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_9.x;\n    u_xlat16_50 = u_xlat16_46 * u_xlat16_50 + 1.0;\n    u_xlat16_9.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_23.x = u_xlat16_9.x * u_xlat16_9.x;\n    u_xlat16_23.x = u_xlat16_23.x * u_xlat16_23.x;\n    u_xlat16_9.x = u_xlat16_9.x * u_xlat16_23.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_9.x + 1.0;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_50;\n    u_xlat29 = u_xlat42 * u_xlat16_46;\n    u_xlat43 = u_xlat0.z * u_xlat0.z;\n    u_xlat1.w = max(u_xlat43, 0.00200000009);\n    u_xlat2.x = (-u_xlat1.w) + 1.0;\n    u_xlat16 = abs(u_xlat0.x) * u_xlat2.x + u_xlat1.w;\n    u_xlat2.x = u_xlat42 * u_xlat2.x + u_xlat1.w;\n    u_xlat0.x = abs(u_xlat0.x) * u_xlat2.x;\n    u_xlat0.x = u_xlat42 * u_xlat16 + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat2.x = u_xlat1.w * u_xlat1.w;\n    u_xlat16 = u_xlat1.x * u_xlat2.x + (-u_xlat1.x);\n    u_xlat1.x = u_xlat16 * u_xlat1.x + 1.0;\n    u_xlat2.x = u_xlat2.x * 0.318309873;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x + 1.00000001e-07;\n    u_xlat1.x = u_xlat2.x / u_xlat1.x;\n    u_xlat0.xz = u_xlat0.xz * u_xlat1.xw;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat42 * u_xlat0.x;\n    u_xlat28 = (-u_xlat0.z) * 0.280000001 + 1.0;\n    u_xlat16_46 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb42 = u_xlat16_46!=0.0;\n    u_xlat42 = u_xlatb42 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat42 * u_xlat0.x;\n    u_xlat16_45 = (-u_xlat16_45) + 1.0;\n    u_xlat16_45 = u_xlat10_0.y * _GlossMapScale + u_xlat16_45;\n    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);\n    u_xlat16_23.xyz = vec3(u_xlat29) * u_xlat16_8.xyz;\n    u_xlat16_23.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_23.xyz;\n    u_xlat0.xyw = u_xlat16_8.xyz * u_xlat0.xxx;\n    u_xlat16_46 = (-u_xlat15) + 1.0;\n    u_xlat16_7.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_7.x;\n    u_xlat16_8.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_46) + u_xlat16_3.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_8.xyz;\n    u_xlat0.xyw = u_xlat16_4.xyz * u_xlat16_23.xyz + u_xlat0.xyw;\n    u_xlat16_4.xyz = u_xlat16_21.xyz * vec3(u_xlat28);\n    u_xlat16_7.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_45);\n    u_xlat16_3.xyz = u_xlat16_9.xxx * u_xlat16_7.xyz + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    u_xlat42 = vs_TEXCOORD1.w;\n    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nlowp float u_xlat10_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nmediump float u_xlat16_39;\nlowp float u_xlat10_39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat10_39 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat16_41 = (-u_xlat10_39) + 1.0;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat10_39) + vec3(u_xlat16_41);\n    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = vec3(u_xlat16_41) * u_xlat16_3.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_17 = texture2D(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat10_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat10_17;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_17.xyz = exp2(u_xlat16_17.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_17.xyz = max(u_xlat16_17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat16_39 = inversesqrt(u_xlat16_39);\n        u_xlat5.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat10_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat16_39 = inversesqrt(u_xlat16_39);\n            u_xlat9.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat16_17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat39 = vs_TEXCOORD1.w;\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nfloat u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nlowp float u_xlat10_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat39;\nmediump float u_xlat16_39;\nbool u_xlatb39;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1 = inversesqrt(u_xlat1);\n    u_xlat14.xyz = vec3(u_xlat1) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_17 = texture2D(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat10_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat10_17;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_17.xyz = exp2(u_xlat16_17.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_17.xyz = max(u_xlat16_17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat16_39 = inversesqrt(u_xlat16_39);\n        u_xlat5.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat10_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat16_39 = inversesqrt(u_xlat16_39);\n            u_xlat9.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat1) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat0.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat0.x = u_xlat0.x * u_xlat16_42;\n    u_xlat13 = u_xlat4.x * u_xlat4.x;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat13 = u_xlat13 * u_xlat4.x;\n    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_17.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    u_xlat16_6.xyz = u_xlat16_19.xyz * vec3(u_xlat13);\n    u_xlat16_21.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_21.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz + u_xlat16_2.xyz;\n    u_xlat39 = vs_TEXCOORD1.w;\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat16_0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp float u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec4 u_xlat10_9;\nvec3 u_xlat10;\nvec3 u_xlat11;\nbvec3 u_xlatb11;\nbvec3 u_xlatb12;\nfloat u_xlat13;\nvec3 u_xlat14;\nvec3 u_xlat17;\nmediump vec3 u_xlat16_17;\nlowp float u_xlat10_17;\nmediump vec3 u_xlat16_19;\nmediump vec3 u_xlat16_21;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nmediump float u_xlat16_39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat14.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD8.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat17.xyz = vs_TEXCOORD8.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);\n    u_xlat17.x = sqrt(u_xlat17.x);\n    u_xlat17.x = (-u_xlat4.x) + u_xlat17.x;\n    u_xlat4.x = unity_ShadowFadeCenterAndType.w * u_xlat17.x + u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_17 = texture2D(_ShadowMapTexture, u_xlat17.xy).x;\n    u_xlat16_42 = (-u_xlat10_17) + 1.0;\n    u_xlat16_42 = u_xlat4.x * u_xlat16_42 + u_xlat10_17;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_6.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_6.x = u_xlat10_4 * _OcclusionStrength + u_xlat16_6.x;\n    u_xlat4.x = (-_Glossiness) + 1.0;\n    u_xlat16_19.x = dot(u_xlat14.xyz, u_xlat0.xyz);\n    u_xlat16_19.x = u_xlat16_19.x + u_xlat16_19.x;\n    u_xlat16_19.xyz = u_xlat0.xyz * (-u_xlat16_19.xxx) + u_xlat14.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_42) * _LightColor0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_17.xyz = log2(u_xlat16_8.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_17.xyz = exp2(u_xlat16_17.xyz);\n    u_xlat16_17.xyz = u_xlat16_17.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_17.xyz = max(u_xlat16_17.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb39){\n        u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n        u_xlat16_39 = inversesqrt(u_xlat16_39);\n        u_xlat5.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat5.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat5.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat39 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat39 = min(u_xlat9.z, u_xlat39);\n        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat9.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_19.xyz;\n    }\n    u_xlat16_42 = (-u_xlat4.x) * 0.699999988 + 1.70000005;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x;\n    u_xlat16_42 = u_xlat16_42 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_42);\n    u_xlat16_46 = u_xlat10_5.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(u_xlat16_46);\n    u_xlatb39 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb39){\n        u_xlatb39 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb39){\n            u_xlat16_39 = dot(u_xlat16_19.xyz, u_xlat16_19.xyz);\n            u_xlat16_39 = inversesqrt(u_xlat16_39);\n            u_xlat9.xyz = vec3(u_xlat16_39) * u_xlat16_19.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;\n            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;\n            u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat10;\n                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;\n                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;\n                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;\n                u_xlat10 = hlslcc_movcTemp;\n            }\n            u_xlat39 = min(u_xlat10.y, u_xlat10.x);\n            u_xlat39 = min(u_xlat10.z, u_xlat39);\n            u_xlat10.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat39) + u_xlat10.xyz;\n        } else {\n            u_xlat9.xyz = u_xlat16_19.xyz;\n        }\n        u_xlat10_9 = textureCubeLodEXT(unity_SpecCube1, u_xlat9.xyz, u_xlat16_42);\n        u_xlat16_42 = u_xlat10_9.w + -1.0;\n        u_xlat16_42 = unity_SpecCube1_HDR.w * u_xlat16_42 + 1.0;\n        u_xlat16_42 = u_xlat16_42 * unity_SpecCube1_HDR.x;\n        u_xlat16_19.xyz = u_xlat10_9.xyz * vec3(u_xlat16_42);\n        u_xlat16_5.xyz = vec3(u_xlat16_46) * u_xlat10_5.xyz + (-u_xlat16_19.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_19.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat16_19.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat14.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat4.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_8.x = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_8.x;\n    u_xlat16_46 = u_xlat16_42 * u_xlat16_46 + 1.0;\n    u_xlat16_8.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_21.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_21.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_8.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_46;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14.x = u_xlat4.x * u_xlat4.x;\n    u_xlat14.x = max(u_xlat14.x, 0.00200000009);\n    u_xlat27 = (-u_xlat14.x) + 1.0;\n    u_xlat40 = abs(u_xlat39) * u_xlat27 + u_xlat14.x;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14.x;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat40 + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14.x * u_xlat14.x;\n    u_xlat40 = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat40 * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14.x * u_xlat4.x;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_21.xyz = vec3(u_xlat26) * u_xlat16_7.xyz;\n    u_xlat16_21.xyz = u_xlat16_17.xyz * u_xlat16_6.xxx + u_xlat16_21.xyz;\n    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat0.xxx;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_6.x = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_6.x;\n    u_xlat16_7.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_19.xyz * vec3(u_xlat39);\n    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_8.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat39 = vs_TEXCOORD1.w;\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nmediump float u_xlat16_44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat16_5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat16_44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat16_44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat16_5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_13.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat0.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);\n    vs_TEXCOORD1.w = exp2(u_xlat0.x);\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.zxy + (-u_xlat16_2.xyz);\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_2.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nbool u_xlatb6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat23;\nmediump vec3 u_xlat16_23;\nmediump vec3 u_xlat16_24;\nmediump float u_xlat16_26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat45;\nmediump float u_xlat16_49;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat16_0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb6 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb6){\n        u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat45 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat45 = min(u_xlat7.z, u_xlat45);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat45) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_43);\n    u_xlat16_10.x = u_xlat10_5.w + -1.0;\n    u_xlat16_10.x = unity_SpecCube0_HDR.w * u_xlat16_10.x + 1.0;\n    u_xlat16_10.x = u_xlat16_10.x * unity_SpecCube0_HDR.x;\n    u_xlat16_23.xyz = u_xlat10_5.xyz * u_xlat16_10.xxx;\n    u_xlatb6 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb6){\n        u_xlatb6 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb6){\n            u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n            u_xlat6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat45 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat45 = min(u_xlat7.z, u_xlat45);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat45) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat16_6.xyz = u_xlat16_10.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat23.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_6.xyz + u_xlat16_11.xyz;\n        u_xlat16_23.xyz = u_xlat23.xyz;\n    }\n    u_xlat16_10.xyz = vec3(u_xlat16_42) * u_xlat16_23.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz;\n    u_xlat39 = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat16_1.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat6.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_49 = (-u_xlat16_1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_49 * u_xlat16_49;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_49 = u_xlat16_49 * u_xlat16_11.x;\n    u_xlat16_49 = u_xlat16_42 * u_xlat16_49 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_49;\n    u_xlat16_26 = u_xlat16_1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat6.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat16_1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat16_1.x * u_xlat6.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat6.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat6.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat16_26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_49 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_49;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(u_xlat39);\n    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_10.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat39 = vs_TEXCOORD1.w;\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nmediump float u_xlat16_44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb39 = u_xlat16_2.x<0.0;\n    if(u_xlatb39){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat16_5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat16_44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat16_44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat16_5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat39 = vs_TEXCOORD1.w;\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_6;\nbool u_xlatb6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat23;\nmediump vec3 u_xlat16_23;\nmediump vec3 u_xlat16_24;\nmediump float u_xlat16_26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat45;\nmediump float u_xlat16_49;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb39 = u_xlat16_2.x<0.0;\n    if(u_xlatb39){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat16_0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb6 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb6){\n        u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n        u_xlat6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat45 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat45 = min(u_xlat7.z, u_xlat45);\n        u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat45) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_43);\n    u_xlat16_10.x = u_xlat10_5.w + -1.0;\n    u_xlat16_10.x = unity_SpecCube0_HDR.w * u_xlat16_10.x + 1.0;\n    u_xlat16_10.x = u_xlat16_10.x * unity_SpecCube0_HDR.x;\n    u_xlat16_23.xyz = u_xlat10_5.xyz * u_xlat16_10.xxx;\n    u_xlatb6 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb6){\n        u_xlatb6 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb6){\n            u_xlat16_6.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n            u_xlat6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat45 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat45 = min(u_xlat7.z, u_xlat45);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat45) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat16_6.xyz = u_xlat16_10.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat23.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_6.xyz + u_xlat16_11.xyz;\n        u_xlat16_23.xyz = u_xlat23.xyz;\n    }\n    u_xlat16_10.xyz = vec3(u_xlat16_42) * u_xlat16_23.xyz;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz;\n    u_xlat39 = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat16_1.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat6.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_49 = (-u_xlat16_1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_49 * u_xlat16_49;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_49 = u_xlat16_49 * u_xlat16_11.x;\n    u_xlat16_49 = u_xlat16_42 * u_xlat16_49 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_49;\n    u_xlat16_26 = u_xlat16_1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat6.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat16_1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat16_1.x * u_xlat6.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat6.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat6.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat16_26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_49 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_49 = u_xlat16_49 * u_xlat16_49;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_49;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(u_xlat39);\n    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_10.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat39 = vs_TEXCOORD1.w;\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec2 u_xlat10_0;\nfloat u_xlat1;\nlowp vec3 u_xlat10_1;\nfloat u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp float u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat14;\nbool u_xlatb14;\nvec3 u_xlat15;\nmediump vec3 u_xlat16_15;\nbool u_xlatb15;\nvec3 u_xlat19;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nfloat u_xlat45;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_0.xxx * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_42 = (-u_xlat10_0.x) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(u_xlat16_42);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xzw = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1 = inversesqrt(u_xlat1);\n    u_xlat14.xyz = vec3(u_xlat1) * vs_TEXCOORD1.xyz;\n    u_xlat10_2 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_43 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_43 = u_xlat10_2 * _OcclusionStrength + u_xlat16_43;\n    u_xlat2 = (-u_xlat10_0.y) * _GlossMapScale + 1.0;\n    u_xlat16_5.x = dot(u_xlat14.xyz, u_xlat0.xzw);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xzw * (-u_xlat16_5.xxx) + u_xlat14.xyz;\n    u_xlatb15 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb15){\n        u_xlat16_15.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat16_15.x = inversesqrt(u_xlat16_15.x);\n        u_xlat15.xyz = u_xlat16_15.xxx * u_xlat16_5.xyz;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat15.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat15.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat15.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat6.x = min(u_xlat6.y, u_xlat6.x);\n        u_xlat6.x = min(u_xlat6.z, u_xlat6.x);\n        u_xlat19.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat15.xyz = u_xlat15.xyz * u_xlat6.xxx + u_xlat19.xyz;\n    } else {\n        u_xlat15.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_44 = (-u_xlat2) * 0.699999988 + 1.70000005;\n    u_xlat16_44 = u_xlat2 * u_xlat16_44;\n    u_xlat16_44 = u_xlat16_44 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat15.xyz, u_xlat16_44);\n    u_xlat16_9.x = u_xlat10_6.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_6.xyz * u_xlat16_9.xxx;\n    u_xlatb15 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb15){\n        u_xlatb15 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb15){\n            u_xlat16_15.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat16_15.x = inversesqrt(u_xlat16_15.x);\n            u_xlat15.xyz = u_xlat16_15.xxx * u_xlat16_5.xyz;\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat15.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat15.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat15.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat45 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat45 = min(u_xlat7.z, u_xlat45);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat45) + u_xlat7.xyz;\n        } else {\n            u_xlat15.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat15.xyz, u_xlat16_44);\n        u_xlat16_11.x = u_xlat10_5.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_5.xyz * u_xlat16_11.xxx;\n        u_xlat16_15.xyz = u_xlat16_9.xxx * u_xlat10_6.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_15.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_43) * u_xlat16_22.xyz;\n    u_xlat15.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat1) + _WorldSpaceLightPos0.xyz;\n    u_xlat1 = dot(u_xlat15.xyz, u_xlat15.xyz);\n    u_xlat1 = max(u_xlat1, 0.00100000005);\n    u_xlat1 = inversesqrt(u_xlat1);\n    u_xlat15.xyz = vec3(u_xlat1) * u_xlat15.xyz;\n    u_xlat1 = dot(u_xlat0.xzw, (-u_xlat14.xyz));\n    u_xlat14.x = dot(u_xlat0.xzw, _WorldSpaceLightPos0.xyz);\n    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xzw, u_xlat15.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat15.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat16_43 = u_xlat26 + u_xlat26;\n    u_xlat16_43 = u_xlat26 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * u_xlat2 + -0.5;\n    u_xlat16_48 = (-u_xlat14.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_43 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat1) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_11.x + 1.0;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_48;\n    u_xlat39 = u_xlat14.x * u_xlat16_43;\n    u_xlat27 = u_xlat2 * u_xlat2;\n    u_xlat27 = max(u_xlat27, 0.00200000009);\n    u_xlat40 = (-u_xlat27) + 1.0;\n    u_xlat15.x = abs(u_xlat1) * u_xlat40 + u_xlat27;\n    u_xlat40 = u_xlat14.x * u_xlat40 + u_xlat27;\n    u_xlat1 = u_xlat40 * abs(u_xlat1);\n    u_xlat1 = u_xlat14.x * u_xlat15.x + u_xlat1;\n    u_xlat1 = u_xlat1 + 9.99999975e-06;\n    u_xlat1 = 0.5 / u_xlat1;\n    u_xlat40 = u_xlat27 * u_xlat27;\n    u_xlat15.x = u_xlat0.x * u_xlat40 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat15.x * u_xlat0.x + 1.0;\n    u_xlat40 = u_xlat40 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat40 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat1;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat14.x * u_xlat0.x;\n    u_xlat1 = u_xlat27 * u_xlat2;\n    u_xlat1 = (-u_xlat1) * 0.280000001 + 1.0;\n    u_xlat16_43 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb14 = u_xlat16_43!=0.0;\n    u_xlat14.x = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat14.x;\n    u_xlat16_42 = (-u_xlat16_42) + 1.0;\n    u_xlat16_42 = u_xlat10_0.y * _GlossMapScale + u_xlat16_42;\n    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat39) * _LightColor0.xyz;\n    u_xlat0.xyw = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_43 = (-u_xlat26) + 1.0;\n    u_xlat16_48 = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_43) + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat0.xyw * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_4.xyz = u_xlat16_9.xyz * vec3(u_xlat1);\n    u_xlat16_9.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_42);\n    u_xlat16_3.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyz;\n    u_xlat39 = vs_TEXCOORD1.w;\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nlowp float u_xlat10_39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nmediump float u_xlat16_44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat10_39 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat16_41 = (-u_xlat10_39) + 1.0;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat10_39) + vec3(u_xlat16_41);\n    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = vec3(u_xlat16_41) * u_xlat16_3.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat16_5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat16_44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat16_44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat16_5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat39 = vs_TEXCOORD1.w;\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nmediump float u_xlat16_44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat16_5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat16_5.x = inversesqrt(u_xlat16_5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat16_44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat16_44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat16_5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat16_5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat0.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat0.x = u_xlat0.x * u_xlat16_42;\n    u_xlat13 = u_xlat40 * u_xlat40;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat13 = u_xlat13 * u_xlat40;\n    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat13);\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_12.xyz + u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;\n    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat16_2.xyz;\n    u_xlat39 = vs_TEXCOORD1.w;\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat16_0.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat0.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);\n    vs_TEXCOORD1.w = exp2(u_xlat0.x);\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n    u_xlat3 = u_xlat1.yyyy * u_xlat2;\n    u_xlat2 = u_xlat2 * u_xlat2;\n    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;\n    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;\n    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;\n    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;\n    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;\n    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat2);\n    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;\n    u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat2 * u_xlat0;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat0.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);\n    vs_TEXCOORD1.w = exp2(u_xlat0.x);\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat2.zxy;\n    u_xlat16_3.xyz = u_xlat2.yzx * u_xlat1.zxy + (-u_xlat16_3.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_3.xyz = vec3(u_xlat21) * u_xlat16_3.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n    u_xlat1 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n    u_xlat3 = u_xlat2.yyyy * u_xlat1;\n    u_xlat1 = u_xlat1 * u_xlat1;\n    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;\n    u_xlat3 = u_xlat4 * u_xlat2.xxxx + u_xlat3;\n    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;\n    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat4 * u_xlat2.zzzz + u_xlat3;\n    u_xlat1 = u_xlat4 * u_xlat4 + u_xlat1;\n    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat1);\n    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;\n    u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat1 * u_xlat0;\n    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat25;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);\n    vs_TEXCOORD1.w = exp2(u_xlat1.x);\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n    u_xlat3 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat4 = u_xlat2.yyyy * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;\n    u_xlat4 = u_xlat5 * u_xlat2.xxxx + u_xlat4;\n    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;\n    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat4;\n    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;\n    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat3);\n    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;\n    u_xlat1 = u_xlat1 * u_xlat4;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat1 = u_xlat3 * u_xlat1;\n    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;\n    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;\n    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;\n    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat25;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);\n    vs_TEXCOORD1.w = exp2(u_xlat1.x);\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    vs_TEXCOORD2.xyz = u_xlat2.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz;\n    u_xlat16_4.xyz = u_xlat2.yzx * u_xlat3.zxy;\n    u_xlat16_4.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat16_4.xyz);\n    u_xlat25 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_4.xyz = vec3(u_xlat25) * u_xlat16_4.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD3.w = 0.0;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD4.xyz = u_xlat3.xyz;\n    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;\n    u_xlat4 = u_xlat3.yyyy * u_xlat2;\n    u_xlat2 = u_xlat2 * u_xlat2;\n    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;\n    u_xlat4 = u_xlat5 * u_xlat3.xxxx + u_xlat4;\n    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;\n    u_xlat5 = (-u_xlat1.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat1.xyz;\n    u_xlat1 = u_xlat5 * u_xlat3.zzzz + u_xlat4;\n    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;\n    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat2);\n    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;\n    u_xlat1 = u_xlat1 * u_xlat4;\n    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat1 = u_xlat2 * u_xlat1;\n    u_xlat2.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;\n    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_6.x = u_xlat3.y * u_xlat3.y;\n    u_xlat16_6.x = u_xlat3.x * u_xlat3.x + (-u_xlat16_6.x);\n    u_xlat16_3 = u_xlat3.yzzx * u_xlat3.xyzz;\n    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat2.xyz + u_xlat16_6.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7 * u_xlat7;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_11.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb14 = u_xlat16_5.x!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat3.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat14 = texture2D(_LightTexture0, vec2(u_xlat14)).x;\n    u_xlat16_5.xyz = vec3(u_xlat14) * _LightColor0.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_11.xyz;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat22 + u_xlat22;\n    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat7 + -0.5;\n    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x + 1.0;\n    u_xlat16_18 = (-u_xlat1.x) + 1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat7 = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = vec3(u_xlat7) * u_xlat16_5.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = u_xlat2.x;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat0.zxy;\n    u_xlat16_3.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat16_3.xyz);\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.y;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nfloat u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nbool u_xlatb21;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_2.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_0.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;\n    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;\n    u_xlat18 = dot(u_xlat16_0.xyz, (-u_xlat5.xyz));\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat3.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat12 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat12 * u_xlat12;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat9 = u_xlat3.x * u_xlat3.x;\n    u_xlat15 = u_xlat21 * u_xlat9 + (-u_xlat21);\n    u_xlat15 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat9 = u_xlat9 / u_xlat15;\n    u_xlat15 = (-u_xlat3.x) + 1.0;\n    u_xlat21 = abs(u_xlat18) * u_xlat15 + u_xlat3.x;\n    u_xlat3.x = u_xlat0.x * u_xlat15 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat18) * u_xlat3.x;\n    u_xlat16_1.x = -abs(u_xlat18) + 1.0;\n    u_xlat18 = u_xlat0.x * u_xlat21 + u_xlat3.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat18 = u_xlat9 * u_xlat18;\n    u_xlat18 = u_xlat18 * 3.14159274;\n    u_xlat18 = max(u_xlat18, 9.99999975e-05);\n    u_xlat18 = sqrt(u_xlat18);\n    u_xlat18 = u_xlat0.x * u_xlat18;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_7.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_2.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb21 = u_xlat16_2.x!=0.0;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat18 = u_xlat18 * u_xlat21;\n    u_xlat4.xyz = vec3(u_xlat18) * _LightColor0.xyz;\n    u_xlat16_2.x = (-u_xlat6) + 1.0;\n    u_xlat16_8.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * u_xlat16_2.xxx + u_xlat16_7.xyz;\n    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat4.xyz;\n    u_xlat16_7.x = u_xlat6 + u_xlat6;\n    u_xlat16_7.x = u_xlat6 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat12 + -0.5;\n    u_xlat16_13 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13;\n    u_xlat16_1.x = u_xlat16_7.x * u_xlat16_1.x + 1.0;\n    u_xlat16_13 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_19;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_13 + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_19 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_2.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat4.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_20;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat23;\nbool u_xlatb23;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb21 = u_xlat16_1<0.0;\n    if(u_xlatb21){discard;}\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, (-u_xlat5.xyz));\n    u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat23 = max(u_xlat23, 0.00100000005);\n    u_xlat23 = inversesqrt(u_xlat23);\n    u_xlat4.xyz = vec3(u_xlat23) * u_xlat4.xyz;\n    u_xlat23 = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat9 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat16 * u_xlat16;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat10 = u_xlat3.x * u_xlat3.x;\n    u_xlat17 = u_xlat23 * u_xlat10 + (-u_xlat23);\n    u_xlat23 = u_xlat17 * u_xlat23 + 1.0;\n    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;\n    u_xlat10 = u_xlat10 * 0.318309873;\n    u_xlat23 = u_xlat10 / u_xlat23;\n    u_xlat10 = (-u_xlat3.x) + 1.0;\n    u_xlat17 = abs(u_xlat21) * u_xlat10 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat10 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat21) * u_xlat3.x;\n    u_xlat16_1 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat2.x * u_xlat17 + u_xlat3.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat23 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat2.x * u_xlat21;\n    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);\n    u_xlatb23 = u_xlat16_6.x!=0.0;\n    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat23;\n    u_xlat3.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_6.x = (-u_xlat9) + 1.0;\n    u_xlat16_13.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_13.x;\n    u_xlat16_13.xyz = (-u_xlat16_8.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_13.xyz * u_xlat16_6.xxx + u_xlat16_8.xyz;\n    u_xlat3.xyz = u_xlat16_8.xyz * u_xlat3.xyz;\n    u_xlat16_8.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xyz * u_xlat16_8.xxx;\n    u_xlat16_6.x = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat9 + u_xlat9;\n    u_xlat16_6.x = u_xlat9 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16 + -0.5;\n    u_xlat16_1 = u_xlat16_6.x * u_xlat16_1 + 1.0;\n    u_xlat16_13.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_20 = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_20;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_13.x + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_6.x;\n    u_xlat0.x = u_xlat2.x * u_xlat16_1;\n    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_10;\nfloat u_xlat11;\nfloat u_xlat16;\nmediump float u_xlat16_17;\nfloat u_xlat18;\nfloat u_xlat21;\nmediump float u_xlat16_21;\nbool u_xlatb21;\nfloat u_xlat23;\nbool u_xlatb23;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb21 = u_xlat16_1.x<0.0;\n    if(u_xlatb21){discard;}\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_3.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_21 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_21 = inversesqrt(u_xlat16_21);\n    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.x = vs_TEXCOORD2.w;\n    u_xlat4.y = vs_TEXCOORD3.w;\n    u_xlat4.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat4.xyz;\n    u_xlat6.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat16_2.xyz, (-u_xlat6.xyz));\n    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat23 = max(u_xlat23, 0.00100000005);\n    u_xlat23 = inversesqrt(u_xlat23);\n    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;\n    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat5.xyz);\n    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);\n    u_xlat2 = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);\n    u_xlat9 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16 = (-_Glossiness) + 1.0;\n    u_xlat4.x = u_xlat16 * u_xlat16;\n    u_xlat4.x = max(u_xlat4.x, 0.00200000009);\n    u_xlat11 = u_xlat4.x * u_xlat4.x;\n    u_xlat18 = u_xlat23 * u_xlat11 + (-u_xlat23);\n    u_xlat23 = u_xlat18 * u_xlat23 + 1.0;\n    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;\n    u_xlat11 = u_xlat11 * 0.318309873;\n    u_xlat23 = u_xlat11 / u_xlat23;\n    u_xlat11 = (-u_xlat4.x) + 1.0;\n    u_xlat18 = abs(u_xlat21) * u_xlat11 + u_xlat4.x;\n    u_xlat4.x = u_xlat2 * u_xlat11 + u_xlat4.x;\n    u_xlat4.x = abs(u_xlat21) * u_xlat4.x;\n    u_xlat16_1.x = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat2 * u_xlat18 + u_xlat4.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat23 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat2 * u_xlat21;\n    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_3.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);\n    u_xlatb23 = u_xlat16_3.x!=0.0;\n    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat23;\n    u_xlat4.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat9) + 1.0;\n    u_xlat16_10.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x;\n    u_xlat16_10.xyz = (-u_xlat16_8.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_10.xyz * u_xlat16_3.xxx + u_xlat16_8.xyz;\n    u_xlat4.xyz = u_xlat16_8.xyz * u_xlat4.xyz;\n    u_xlat16_8.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xyz * u_xlat16_8.xxx;\n    u_xlat16_3.x = u_xlat9 + u_xlat9;\n    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16 + -0.5;\n    u_xlat16_10.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;\n    u_xlat16_1.x = u_xlat16_3.x * u_xlat16_1.x + 1.0;\n    u_xlat16_10.x = (-u_xlat2) + 1.0;\n    u_xlat16_17 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_17;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;\n    u_xlat0.x = u_xlat2 * u_xlat16_1.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat4.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec2 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_8;\nlowp vec3 u_xlat10_8;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat10_1.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat14 = (-u_xlat10_1.y) * _GlossMapScale + 1.0;\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat8 = max(u_xlat8, 0.00200000009);\n    u_xlat15 = u_xlat8 * u_xlat8;\n    u_xlat2.x = u_xlat22 * u_xlat15 + (-u_xlat22);\n    u_xlat22 = u_xlat2.x * u_xlat22 + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat15 = u_xlat15 / u_xlat22;\n    u_xlat22 = (-u_xlat8) + 1.0;\n    u_xlat2.x = abs(u_xlat21) * u_xlat22 + u_xlat8;\n    u_xlat8 = u_xlat0.x * u_xlat22 + u_xlat8;\n    u_xlat8 = abs(u_xlat21) * u_xlat8;\n    u_xlat16_4.x = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat2.x + u_xlat8;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat15 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_8.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_11.xyz = _Color.xyz * u_xlat10_8.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_8.xyz = u_xlat10_8.xyz * _Color.xyz;\n    u_xlat16_11.xyz = u_xlat10_1.xxx * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_8.xyz * u_xlat16_5.xxx;\n    u_xlat16_26 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb1 = u_xlat16_26!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_26 = (-u_xlat7) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_11.xyz;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat7 + u_xlat7;\n    u_xlat16_11.x = u_xlat7 * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat14 + -0.5;\n    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x + 1.0;\n    u_xlat16_18 = (-u_xlat0.x) + 1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump float u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_26;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_4 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_11.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat10_1.x = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_5.x = (-u_xlat10_1.x) + 1.0;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat10_1.xxx + u_xlat16_5.xxx;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_1.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_26!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_26 = (-u_xlat7) + 1.0;\n    u_xlat16_27 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_27;\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_5.xxx;\n    u_xlat16_5.x = u_xlat16_4 * u_xlat16_4;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_4 = u_xlat16_4 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7 + u_xlat7;\n    u_xlat16_5.x = u_xlat7 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_4 = u_xlat16_5.x * u_xlat16_4 + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_4 = u_xlat16_4 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4;\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_11.xyz * u_xlat16_5.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat0.x + -0.5;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = (-u_xlat15) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_18 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13;\n    u_xlat0.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nfloat u_xlat19;\nbool u_xlatb19;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;\n    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat19 = max(u_xlat19, 0.00100000005);\n    u_xlat19 = inversesqrt(u_xlat19);\n    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;\n    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat12 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat12 * u_xlat12;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat7 = u_xlat1.x * u_xlat1.x;\n    u_xlat13 = u_xlat19 * u_xlat7 + (-u_xlat19);\n    u_xlat13 = u_xlat13 * u_xlat19 + 1.0;\n    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;\n    u_xlat7 = u_xlat7 * 0.318309873;\n    u_xlat7 = u_xlat7 / u_xlat13;\n    u_xlat13 = (-u_xlat1.x) + 1.0;\n    u_xlat19 = abs(u_xlat18) * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat18) * u_xlat1.x;\n    u_xlat16_4.x = -abs(u_xlat18) + 1.0;\n    u_xlat18 = u_xlat0.x * u_xlat19 + u_xlat1.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat18 = u_xlat7 * u_xlat18;\n    u_xlat18 = u_xlat18 * 3.14159274;\n    u_xlat18 = max(u_xlat18, 9.99999975e-05);\n    u_xlat18 = sqrt(u_xlat18);\n    u_xlat18 = u_xlat0.x * u_xlat18;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_10.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n    u_xlatb19 = u_xlat16_5.x!=0.0;\n    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);\n    u_xlat18 = u_xlat18 * u_xlat19;\n    u_xlat2.xyz = vec3(u_xlat18) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat6) + 1.0;\n    u_xlat16_11.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = (-u_xlat16_10.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_11.xyz * u_xlat16_5.xxx + u_xlat16_10.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_10.xyz;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat16_10.x = u_xlat6 + u_xlat6;\n    u_xlat16_10.x = u_xlat6 * u_xlat16_10.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat12 + -0.5;\n    u_xlat16_4.x = u_xlat16_10.x * u_xlat16_4.x + 1.0;\n    u_xlat16_16 = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_22;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_16 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    vs_TEXCOORD2.xyz = u_xlat2.xyz;\n    u_xlat3.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = u_xlat3.x;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16_4.xyz = u_xlat2.yzx * u_xlat1.zxy;\n    u_xlat16_4.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat16_4.xyz);\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_4.xyz = u_xlat1.xxx * u_xlat16_4.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD3.w = u_xlat3.y;\n    vs_TEXCOORD4.w = u_xlat3.z;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nfloat u_xlat7;\nvec3 u_xlat8;\nmediump float u_xlat16_10;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_24;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat21 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * u_xlat16_3.zzz + u_xlat16_3.xyw;\n    u_xlat16_0.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat5.x = vs_TEXCOORD2.w;\n    u_xlat5.y = vs_TEXCOORD3.w;\n    u_xlat5.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat21) + (-u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat8.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat6.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat5.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat8.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat8.xyz, u_xlat5.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat22 = u_xlat21 * u_xlat15 + (-u_xlat21);\n    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat21 = u_xlat15 / u_xlat21;\n    u_xlat15 = (-u_xlat8.x) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);\n    u_xlat16_23 = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb22 = u_xlat16_24!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat5.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_24 = (-u_xlat7) + 1.0;\n    u_xlat16_4.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;\n    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat5.xyz;\n    u_xlat16_3.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat7 + u_xlat7;\n    u_xlat16_3.x = u_xlat7 * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat14 + -0.5;\n    u_xlat16_23 = u_xlat16_3.x * u_xlat16_23 + 1.0;\n    u_xlat16_10 = (-u_xlat0.x) + 1.0;\n    u_xlat16_17 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_17;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat5.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nvec3 u_xlat13;\nmediump float u_xlat16_17;\nfloat u_xlat20;\nfloat u_xlat22;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);\n    u_xlat27 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlatb2 = 0.0<u_xlat1.z;\n    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat11 = texture2D(_LightTextureB0, vec2(u_xlat11)).x;\n    u_xlat16_3.x = (u_xlatb2) ? 1.0 : 0.0;\n    u_xlat16_3.x = u_xlat27 * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat4.x = vs_TEXCOORD2.w;\n    u_xlat4.y = vs_TEXCOORD3.w;\n    u_xlat4.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat27) + (-u_xlat2.xyz);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat6.xyz, u_xlat5.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat29 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);\n    u_xlat4.x = dot(u_xlat6.xyz, u_xlat4.xyz);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat6.xyz, (-u_xlat2.xyz));\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat13.x = u_xlat20 * u_xlat20;\n    u_xlat22 = u_xlat27 * u_xlat13.x + (-u_xlat27);\n    u_xlat27 = u_xlat22 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat27 = u_xlat13.x / u_xlat27;\n    u_xlat13.x = (-u_xlat20) + 1.0;\n    u_xlat22 = abs(u_xlat2.x) * u_xlat13.x + u_xlat20;\n    u_xlat20 = u_xlat4.x * u_xlat13.x + u_xlat20;\n    u_xlat20 = u_xlat20 * abs(u_xlat2.x);\n    u_xlat16_30 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat4.x * u_xlat22 + u_xlat20;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat4.x * u_xlat27;\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_34 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb2 = u_xlat16_34!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat13.xyz = u_xlat16_3.xyz * vec3(u_xlat27);\n    u_xlat16_34 = (-u_xlat29) + 1.0;\n    u_xlat16_8.x = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat13.xyz = u_xlat13.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xxx;\n    u_xlat16_34 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_34;\n    u_xlat16_34 = u_xlat29 + u_xlat29;\n    u_xlat16_34 = u_xlat29 * u_xlat16_34;\n    u_xlat16_34 = u_xlat16_34 * u_xlat11 + -0.5;\n    u_xlat16_30 = u_xlat16_34 * u_xlat16_30 + 1.0;\n    u_xlat16_8.x = (-u_xlat4.x) + 1.0;\n    u_xlat16_17 = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_17;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x + 1.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_34;\n    u_xlat0.x = u_xlat4.x * u_xlat16_30;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_3.xyz + u_xlat13.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nvec2 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nfloat u_xlat20;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);\n    u_xlat27 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlatb2 = 0.0<u_xlat1.z;\n    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat11 = texture2D(_LightTextureB0, vec2(u_xlat11)).x;\n    u_xlat16_3.x = (u_xlatb2) ? 1.0 : 0.0;\n    u_xlat16_3.x = u_xlat27 * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_27 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_27 = inversesqrt(u_xlat16_27);\n    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_4.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat7.x = vs_TEXCOORD2.w;\n    u_xlat7.y = vs_TEXCOORD3.w;\n    u_xlat7.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat27) + (-u_xlat6.xyz);\n    u_xlat29 = dot(u_xlat16_2.xyz, (-u_xlat6.xyz));\n    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat7.xyz = vec3(u_xlat27) * u_xlat8.xyz;\n    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = dot(u_xlat6.xyz, u_xlat7.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat20 = (-_Glossiness) + 1.0;\n    u_xlat6.x = u_xlat20 * u_xlat20;\n    u_xlat6.x = max(u_xlat6.x, 0.00200000009);\n    u_xlat15 = u_xlat6.x * u_xlat6.x;\n    u_xlat24 = u_xlat27 * u_xlat15 + (-u_xlat27);\n    u_xlat27 = u_xlat24 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat27 = u_xlat15 / u_xlat27;\n    u_xlat15 = (-u_xlat6.x) + 1.0;\n    u_xlat24 = abs(u_xlat29) * u_xlat15 + u_xlat6.x;\n    u_xlat6.x = u_xlat2.x * u_xlat15 + u_xlat6.x;\n    u_xlat6.x = abs(u_xlat29) * u_xlat6.x;\n    u_xlat16_30 = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat2.x * u_xlat24 + u_xlat6.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_31 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlatb29 = u_xlat16_31!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat6.xyz = u_xlat16_3.xyz * vec3(u_xlat27);\n    u_xlat16_31 = (-u_xlat11) + 1.0;\n    u_xlat16_5.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat16_5.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31) + u_xlat16_4.xyz;\n    u_xlat6.xyz = u_xlat16_4.xyz * u_xlat6.xyz;\n    u_xlat16_4.x = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat11 + u_xlat11;\n    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat20 + -0.5;\n    u_xlat16_30 = u_xlat16_4.x * u_xlat16_30 + 1.0;\n    u_xlat16_13 = (-u_xlat2.x) + 1.0;\n    u_xlat16_22 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_22;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_13 + 1.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_4.x;\n    u_xlat27 = u_xlat2.x * u_xlat16_30;\n    u_xlat16_3.xyz = vec3(u_xlat27) * u_xlat16_3.xyz;\n    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_30);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat6.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat24 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_2.x = u_xlat24 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat3.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat3.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9) + 1.0;\n    u_xlat3.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9;\n    u_xlat9 = u_xlat1.x * u_xlat17 + u_xlat9;\n    u_xlat9 = abs(u_xlat0.x) * u_xlat9;\n    u_xlat16_26 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat3.x + u_xlat9;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8 * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_26 = u_xlat16_5.x * u_xlat16_26 + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_26;\n    u_xlat16_2.xyz = vec3(u_xlat16) * u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nfloat u_xlat9;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat24 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_2.x = u_xlat24 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat8 = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8 * u_xlat8;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9 + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat24 = u_xlat9 / u_xlat24;\n    u_xlat9 = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_26 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat16_29 = u_xlat25 + u_xlat25;\n    u_xlat16_29 = u_xlat25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8 + -0.5;\n    u_xlat16_26 = u_xlat16_29 * u_xlat16_26 + 1.0;\n    u_xlat16_6.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat8 = u_xlat1.x * u_xlat16_26;\n    u_xlat16_2.xyz = vec3(u_xlat8) * u_xlat16_2.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec2 u_xlat5;\nmediump float u_xlat16_8;\nbool u_xlatb10;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat15 + u_xlat15;\n    u_xlat16_3.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_13 = (-u_xlat5.x) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat5.x * u_xlat16_3.x;\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat5.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);\n    u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xy).w;\n    u_xlatb10 = 0.0<u_xlat1.z;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = texture2D(_LightTextureB0, vec2(u_xlat15)).x;\n    u_xlat16_3.x = (u_xlatb10) ? 1.0 : 0.0;\n    u_xlat16_3.x = u_xlat5.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat21 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7 * u_xlat7;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_23 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7 + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat7 = u_xlat1.x * u_xlat16_23;\n    u_xlat16_2.xyz = vec3(u_xlat7) * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    vs_TEXCOORD2.xyz = u_xlat2.xyz;\n    u_xlat3.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = u_xlat3.x;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16_4.xyz = u_xlat2.yzx * u_xlat1.zxy;\n    u_xlat16_4.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat16_4.xyz);\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_4.xyz = u_xlat1.xxx * u_xlat16_4.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD3.w = u_xlat3.y;\n    vs_TEXCOORD4.w = u_xlat3.z;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat10;\nfloat u_xlat14;\nmediump float u_xlat16_15;\nfloat u_xlat17;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_2.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_0.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat4.x = vs_TEXCOORD2.w;\n    u_xlat4.y = vs_TEXCOORD3.w;\n    u_xlat4.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + (-u_xlat3.xyz);\n    u_xlat3.x = dot(u_xlat16_0.xyz, (-u_xlat3.xyz));\n    u_xlat10.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat10.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat10.xyz, u_xlat4.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat10.x = u_xlat14 * u_xlat14;\n    u_xlat10.x = max(u_xlat10.x, 0.00200000009);\n    u_xlat17 = u_xlat10.x * u_xlat10.x;\n    u_xlat24 = u_xlat21 * u_xlat17 + (-u_xlat21);\n    u_xlat21 = u_xlat24 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat21 = u_xlat17 / u_xlat21;\n    u_xlat17 = (-u_xlat10.x) + 1.0;\n    u_xlat24 = abs(u_xlat3.x) * u_xlat17 + u_xlat10.x;\n    u_xlat10.x = u_xlat0.x * u_xlat17 + u_xlat10.x;\n    u_xlat10.x = u_xlat10.x * abs(u_xlat3.x);\n    u_xlat16_1.x = -abs(u_xlat3.x) + 1.0;\n    u_xlat3.x = u_xlat0.x * u_xlat24 + u_xlat10.x;\n    u_xlat3.x = u_xlat3.x + 9.99999975e-06;\n    u_xlat3.x = 0.5 / u_xlat3.x;\n    u_xlat21 = u_xlat21 * u_xlat3.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_8.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_2.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);\n    u_xlatb24 = u_xlat16_2.x!=0.0;\n    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat24;\n    u_xlat4.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;\n    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = textureCube(_LightTexture0, u_xlat4.xyz).w;\n    u_xlat24 = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat24 = u_xlat4.x * u_xlat24;\n    u_xlat16_2.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat16_2.xyz;\n    u_xlat16_23 = (-u_xlat7) + 1.0;\n    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_8.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_8.xyz;\n    u_xlat4.xyz = u_xlat16_8.xyz * u_xlat4.xyz;\n    u_xlat16_8.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;\n    u_xlat16_8.x = u_xlat7 + u_xlat7;\n    u_xlat16_8.x = u_xlat7 * u_xlat16_8.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat14 + -0.5;\n    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x + 1.0;\n    u_xlat16_15 = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_22;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_15 + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat4.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nvec3 u_xlat11;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat19;\nfloat u_xlat24;\nbool u_xlatb24;\nfloat u_xlat26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat24) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat5.xyz, u_xlat4.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat26 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat5.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));\n    u_xlat10 = (-_Glossiness) + 1.0;\n    u_xlat18 = u_xlat10 * u_xlat10;\n    u_xlat18 = max(u_xlat18, 0.00200000009);\n    u_xlat11.x = u_xlat18 * u_xlat18;\n    u_xlat19 = u_xlat24 * u_xlat11.x + (-u_xlat24);\n    u_xlat24 = u_xlat19 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat11.x = u_xlat11.x * 0.318309873;\n    u_xlat24 = u_xlat11.x / u_xlat24;\n    u_xlat11.x = (-u_xlat18) + 1.0;\n    u_xlat19 = abs(u_xlat2.x) * u_xlat11.x + u_xlat18;\n    u_xlat18 = u_xlat3.x * u_xlat11.x + u_xlat18;\n    u_xlat18 = u_xlat18 * abs(u_xlat2.x);\n    u_xlat16_1 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat19 + u_xlat18;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat3.x * u_xlat24;\n    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb2 = u_xlat16_6.x!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat11.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat11.xyz;\n    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);\n    u_xlat18 = textureCube(_LightTexture0, u_xlat11.xyz).w;\n    u_xlat2.x = texture2D(_LightTextureB0, u_xlat2.xx).x;\n    u_xlat2.x = u_xlat18 * u_xlat2.x;\n    u_xlat16_6.xyz = u_xlat2.xxx * _LightColor0.xyz;\n    u_xlat11.xyz = vec3(u_xlat24) * u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat26) + 1.0;\n    u_xlat16_7.x = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_9.xyz;\n    u_xlat11.xyz = u_xlat16_9.xyz * u_xlat11.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_9.xxx;\n    u_xlat16_30 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat16_30 = u_xlat26 + u_xlat26;\n    u_xlat16_30 = u_xlat26 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * u_xlat10 + -0.5;\n    u_xlat16_1 = u_xlat16_30 * u_xlat16_1 + 1.0;\n    u_xlat16_7.x = (-u_xlat3.x) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat0.x = u_xlat3.x * u_xlat16_1;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz + u_xlat11.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat20;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nbool u_xlatb24;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_3.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_24 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_24 = inversesqrt(u_xlat16_24);\n    u_xlat16_2.xyz = vec3(u_xlat16_24) * u_xlat16_1.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat5.x = vs_TEXCOORD2.w;\n    u_xlat5.y = vs_TEXCOORD3.w;\n    u_xlat5.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-u_xlat4.xyz);\n    u_xlat26 = dot(u_xlat16_2.xyz, (-u_xlat4.xyz));\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;\n    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz;\n    u_xlat24 = dot(u_xlat16_2.xyz, u_xlat5.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2 = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat4.x = u_xlat18 * u_xlat18;\n    u_xlat4.x = max(u_xlat4.x, 0.00200000009);\n    u_xlat12 = u_xlat4.x * u_xlat4.x;\n    u_xlat20 = u_xlat24 * u_xlat12 + (-u_xlat24);\n    u_xlat24 = u_xlat20 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat24 = u_xlat12 / u_xlat24;\n    u_xlat12 = (-u_xlat4.x) + 1.0;\n    u_xlat20 = abs(u_xlat26) * u_xlat12 + u_xlat4.x;\n    u_xlat4.x = u_xlat2 * u_xlat12 + u_xlat4.x;\n    u_xlat4.x = abs(u_xlat26) * u_xlat4.x;\n    u_xlat16_1.x = -abs(u_xlat26) + 1.0;\n    u_xlat26 = u_xlat2 * u_xlat20 + u_xlat4.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 / u_xlat26;\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2 * u_xlat24;\n    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_3.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb26 = u_xlat16_3.x!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat4.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;\n    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = textureCube(_LightTexture0, u_xlat4.xyz).w;\n    u_xlat26 = texture2D(_LightTextureB0, vec2(u_xlat26)).x;\n    u_xlat26 = u_xlat4.x * u_xlat26;\n    u_xlat16_3.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat16_3.xyz;\n    u_xlat16_27 = (-u_xlat10) + 1.0;\n    u_xlat16_7.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_9.xyz;\n    u_xlat4.xyz = u_xlat16_9.xyz * u_xlat4.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_9.xxx;\n    u_xlat16_27 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;\n    u_xlat16_27 = u_xlat10 + u_xlat10;\n    u_xlat16_27 = u_xlat10 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat18 + -0.5;\n    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x + 1.0;\n    u_xlat16_7.x = (-u_xlat2) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_7.x + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;\n    u_xlat0.x = u_xlat2 * u_xlat16_1.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat4.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat18;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat8 = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat8;\n    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat26 = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat10 = u_xlat16 * u_xlat16;\n    u_xlat10 = max(u_xlat10, 0.00200000009);\n    u_xlat18 = u_xlat10 * u_xlat10;\n    u_xlat3.x = u_xlat24 * u_xlat18 + (-u_xlat24);\n    u_xlat24 = u_xlat3.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat18 = u_xlat18 * 0.318309873;\n    u_xlat24 = u_xlat18 / u_xlat24;\n    u_xlat18 = (-u_xlat10) + 1.0;\n    u_xlat3.x = abs(u_xlat0.x) * u_xlat18 + u_xlat10;\n    u_xlat10 = u_xlat2.x * u_xlat18 + u_xlat10;\n    u_xlat10 = abs(u_xlat0.x) * u_xlat10;\n    u_xlat16_25 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat2.x * u_xlat3.x + u_xlat10;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat2.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8 * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_1.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat26) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat26 + u_xlat26;\n    u_xlat16_5.x = u_xlat26 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_25 = u_xlat16_5.x * u_xlat16_25 + 1.0;\n    u_xlat16_13 = (-u_xlat2.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16 = u_xlat2.x * u_xlat16_25;\n    u_xlat16_1.xyz = vec3(u_xlat16) * u_xlat16_1.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nfloat u_xlat10;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat18;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat8 = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat8;\n    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat26 = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat8 = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8 * u_xlat8;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat10 = u_xlat16 * u_xlat16;\n    u_xlat18 = u_xlat24 * u_xlat10 + (-u_xlat24);\n    u_xlat24 = u_xlat18 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat10 = u_xlat10 * 0.318309873;\n    u_xlat24 = u_xlat10 / u_xlat24;\n    u_xlat10 = (-u_xlat16) + 1.0;\n    u_xlat18 = abs(u_xlat0.x) * u_xlat10 + u_xlat16;\n    u_xlat16 = u_xlat2.x * u_xlat10 + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_25 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat2.x * u_xlat18 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat2.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat26) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat26 + u_xlat26;\n    u_xlat16_29 = u_xlat26 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8 + -0.5;\n    u_xlat16_25 = u_xlat16_29 * u_xlat16_25 + 1.0;\n    u_xlat16_6.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_29;\n    u_xlat8 = u_xlat2.x * u_xlat16_25;\n    u_xlat16_1.xyz = vec3(u_xlat8) * u_xlat16_1.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat15 + u_xlat15;\n    u_xlat16_3.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_13 = (-u_xlat5.x) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat5.x * u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = textureCube(_LightTexture0, u_xlat5.xyz).w;\n    u_xlat10 = texture2D(_LightTextureB0, u_xlat1.xx).x;\n    u_xlat5.x = u_xlat5.x * u_xlat10;\n    u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat9;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat16;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nfloat u_xlat23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat7 = texture2D(_LightTextureB0, vec2(u_xlat21)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat7;\n    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat23 = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7 * u_xlat7;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat9 = u_xlat14 * u_xlat14;\n    u_xlat16 = u_xlat21 * u_xlat9 + (-u_xlat21);\n    u_xlat21 = u_xlat16 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat21 = u_xlat9 / u_xlat21;\n    u_xlat9 = (-u_xlat14) + 1.0;\n    u_xlat16 = abs(u_xlat0.x) * u_xlat9 + u_xlat14;\n    u_xlat14 = u_xlat2.x * u_xlat9 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_22 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat2.x * u_xlat16 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat2.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat23) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat23 + u_xlat23;\n    u_xlat16_5.x = u_xlat23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7 + -0.5;\n    u_xlat16_22 = u_xlat16_5.x * u_xlat16_22 + 1.0;\n    u_xlat16_12 = (-u_xlat2.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;\n    u_xlat7 = u_xlat2.x * u_xlat16_22;\n    u_xlat16_1.xyz = vec3(u_xlat7) * u_xlat16_1.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    vs_TEXCOORD2.xyz = u_xlat2.xyz;\n    u_xlat3.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = u_xlat3.x;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16_4.xyz = u_xlat2.yzx * u_xlat1.zxy;\n    u_xlat16_4.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat16_4.xyz);\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_4.xyz = u_xlat1.xxx * u_xlat16_4.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD3.w = u_xlat3.y;\n    vs_TEXCOORD4.w = u_xlat3.z;\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat10;\nfloat u_xlat14;\nmediump float u_xlat16_15;\nfloat u_xlat17;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_2.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_0.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, (-u_xlat5.xyz));\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat24 = dot(u_xlat16_0.xyz, u_xlat4.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat3.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat14 * u_xlat14;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat10 = u_xlat3.x * u_xlat3.x;\n    u_xlat17 = u_xlat24 * u_xlat10 + (-u_xlat24);\n    u_xlat17 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat10 = u_xlat10 * 0.318309873;\n    u_xlat10 = u_xlat10 / u_xlat17;\n    u_xlat17 = (-u_xlat3.x) + 1.0;\n    u_xlat24 = abs(u_xlat21) * u_xlat17 + u_xlat3.x;\n    u_xlat3.x = u_xlat0.x * u_xlat17 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat21) * u_xlat3.x;\n    u_xlat16_1.x = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat24 + u_xlat3.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat10 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_8.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_2.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);\n    u_xlatb24 = u_xlat16_2.x!=0.0;\n    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat24;\n    u_xlat4.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat4.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat4.xy;\n    u_xlat4.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat4.xy;\n    u_xlat4.xy = u_xlat4.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat24 = texture2D(_LightTexture0, u_xlat4.xy).w;\n    u_xlat16_2.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat16_2.xyz;\n    u_xlat16_23 = (-u_xlat7) + 1.0;\n    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_8.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_8.xyz;\n    u_xlat4.xyz = u_xlat16_8.xyz * u_xlat4.xyz;\n    u_xlat16_8.x = u_xlat7 + u_xlat7;\n    u_xlat16_8.x = u_xlat7 * u_xlat16_8.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat14 + -0.5;\n    u_xlat16_15 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_15;\n    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x + 1.0;\n    u_xlat16_15 = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_22;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_15 + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat4.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat11;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat19;\nfloat u_xlat24;\nbool u_xlatb24;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, (-u_xlat5.xyz));\n    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;\n    u_xlat26 = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat18 * u_xlat18;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat11 = u_xlat3.x * u_xlat3.x;\n    u_xlat19 = u_xlat26 * u_xlat11 + (-u_xlat26);\n    u_xlat26 = u_xlat19 * u_xlat26 + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat11 = u_xlat11 * 0.318309873;\n    u_xlat26 = u_xlat11 / u_xlat26;\n    u_xlat11 = (-u_xlat3.x) + 1.0;\n    u_xlat19 = abs(u_xlat24) * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat24) * u_xlat3.x;\n    u_xlat16_1 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat2.x * u_xlat19 + u_xlat3.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat26 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb26 = u_xlat16_6.x!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat3.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat3.xy;\n    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat3.xy;\n    u_xlat3.xy = u_xlat3.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat26 = texture2D(_LightTexture0, u_xlat3.xy).w;\n    u_xlat16_6.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat10) + 1.0;\n    u_xlat16_7.x = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_9.xyz;\n    u_xlat3.xyz = u_xlat16_9.xyz * u_xlat3.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_9.xxx;\n    u_xlat16_30 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat16_30 = u_xlat10 + u_xlat10;\n    u_xlat16_30 = u_xlat10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * u_xlat18 + -0.5;\n    u_xlat16_1 = u_xlat16_30 * u_xlat16_1 + 1.0;\n    u_xlat16_7.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat0.x = u_xlat2.x * u_xlat16_1;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat20;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nbool u_xlatb24;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_3.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_24 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_24 = inversesqrt(u_xlat16_24);\n    u_xlat16_2.xyz = vec3(u_xlat16_24) * u_xlat16_1.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.x = vs_TEXCOORD2.w;\n    u_xlat4.y = vs_TEXCOORD3.w;\n    u_xlat4.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat4.xyz;\n    u_xlat6.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat16_2.xyz, (-u_xlat6.xyz));\n    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;\n    u_xlat26 = dot(u_xlat16_2.xyz, u_xlat5.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2 = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat4.x = u_xlat18 * u_xlat18;\n    u_xlat4.x = max(u_xlat4.x, 0.00200000009);\n    u_xlat12 = u_xlat4.x * u_xlat4.x;\n    u_xlat20 = u_xlat26 * u_xlat12 + (-u_xlat26);\n    u_xlat26 = u_xlat20 * u_xlat26 + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat26 = u_xlat12 / u_xlat26;\n    u_xlat12 = (-u_xlat4.x) + 1.0;\n    u_xlat20 = abs(u_xlat24) * u_xlat12 + u_xlat4.x;\n    u_xlat4.x = u_xlat2 * u_xlat12 + u_xlat4.x;\n    u_xlat4.x = abs(u_xlat24) * u_xlat4.x;\n    u_xlat16_1.x = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat2 * u_xlat20 + u_xlat4.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat26 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2 * u_xlat24;\n    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_3.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb26 = u_xlat16_3.x!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat4.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat4.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat4.xy;\n    u_xlat4.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat4.xy;\n    u_xlat4.xy = u_xlat4.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat26 = texture2D(_LightTexture0, u_xlat4.xy).w;\n    u_xlat16_3.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat16_3.xyz;\n    u_xlat16_27 = (-u_xlat10) + 1.0;\n    u_xlat16_7.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_9.xyz;\n    u_xlat4.xyz = u_xlat16_9.xyz * u_xlat4.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_9.xxx;\n    u_xlat16_27 = u_xlat10 + u_xlat10;\n    u_xlat16_27 = u_xlat10 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat18 + -0.5;\n    u_xlat16_7.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x;\n    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x + 1.0;\n    u_xlat16_7.x = (-u_xlat2) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_7.x + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;\n    u_xlat0.x = u_xlat2 * u_xlat16_1.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat4.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec2 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_9;\nlowp vec3 u_xlat10_9;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_20;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = max(u_xlat25, 0.00100000005);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    u_xlat25 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);\n    u_xlat10_1.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_1.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat2.x = u_xlat25 * u_xlat17 + (-u_xlat25);\n    u_xlat25 = u_xlat2.x * u_xlat25 + 1.0;\n    u_xlat25 = u_xlat25 * u_xlat25 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat17 = u_xlat17 / u_xlat25;\n    u_xlat25 = (-u_xlat9) + 1.0;\n    u_xlat2.x = abs(u_xlat24) * u_xlat25 + u_xlat9;\n    u_xlat9 = u_xlat0.x * u_xlat25 + u_xlat9;\n    u_xlat9 = abs(u_xlat24) * u_xlat9;\n    u_xlat16_4.x = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat0.x * u_xlat2.x + u_xlat9;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat17 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat0.x * u_xlat24;\n    u_xlat10_9.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat10_9.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_9.xyz = u_xlat10_9.xyz * _Color.xyz;\n    u_xlat16_12.xyz = u_xlat10_1.xxx * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_5.xxx;\n    u_xlat16_29 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_29!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat1.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;\n    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;\n    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat1.x = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlat16_6.xyz = u_xlat1.xxx * _LightColor0.xyz;\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_6.xyz;\n    u_xlat16_29 = (-u_xlat8) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_12.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat16_12.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12.x;\n    u_xlat16_12.x = u_xlat8 + u_xlat8;\n    u_xlat16_12.x = u_xlat8 * u_xlat16_12.x;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16 + -0.5;\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x + 1.0;\n    u_xlat16_20 = (-u_xlat0.x) + 1.0;\n    u_xlat16_28 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_20 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_12;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = max(u_xlat25, 0.00100000005);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    u_xlat25 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);\n    u_xlat16 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat16 * u_xlat16;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat9 = u_xlat1.x * u_xlat1.x;\n    u_xlat17 = u_xlat25 * u_xlat9 + (-u_xlat25);\n    u_xlat17 = u_xlat17 * u_xlat25 + 1.0;\n    u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat9 = u_xlat9 / u_xlat17;\n    u_xlat17 = (-u_xlat1.x) + 1.0;\n    u_xlat25 = abs(u_xlat24) * u_xlat17 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat17 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat24) * u_xlat1.x;\n    u_xlat16_4.x = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat0.x * u_xlat25 + u_xlat1.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat9 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat0.x * u_xlat24;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_12.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat10_1.x = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_5.x = (-u_xlat10_1.x) + 1.0;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat10_1.xxx + u_xlat16_5.xxx;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_12.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_1.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_29!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat1.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;\n    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;\n    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat1.x = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlat16_6.xyz = u_xlat1.xxx * _LightColor0.xyz;\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_6.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat8) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat8 + u_xlat8;\n    u_xlat16_5.x = u_xlat8 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_4.x = u_xlat16_5.x * u_xlat16_4.x + 1.0;\n    u_xlat16_13 = (-u_xlat0.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat16_4.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat0.x + -0.5;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = (-u_xlat15) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_18 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13;\n    u_xlat0.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat5.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat5.xy;\n    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat5.xy;\n    u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xy).w;\n    u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_4.x = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_11.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb22 = u_xlat16_5.x!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat2.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat2.xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat22 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlat16_5.xyz = vec3(u_xlat22) * _LightColor0.xyz;\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat16_5.xyz;\n    u_xlat16_26 = (-u_xlat7) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_11.xyz;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat7 + u_xlat7;\n    u_xlat16_11.x = u_xlat7 * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat14 + -0.5;\n    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x + 1.0;\n    u_xlat16_18 = (-u_xlat0.x) + 1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nbool u_xlatb7;\nvec3 u_xlat8;\nmediump float u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_24;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat7.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat7.x = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb7 = u_xlat7.x<u_xlat7.z;\n    u_xlat16_2.x = (u_xlatb7) ? _LightShadowData.x : 1.0;\n    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_9 + u_xlat16_2.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat21 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_9 = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_9 = u_xlat21 * u_xlat16_9;\n    u_xlat16_9 = u_xlat0.x * u_xlat16_9;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * u_xlat16_3.zzz + u_xlat16_3.xyw;\n    u_xlat16_0.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat5.x = vs_TEXCOORD2.w;\n    u_xlat5.y = vs_TEXCOORD3.w;\n    u_xlat5.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat21) + (-u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat8.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat6.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat5.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat8.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat8.xyz, u_xlat5.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat22 = u_xlat21 * u_xlat15 + (-u_xlat21);\n    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat21 = u_xlat15 / u_xlat21;\n    u_xlat15 = (-u_xlat8.x) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);\n    u_xlat16_23 = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb22 = u_xlat16_24!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat5.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_24 = (-u_xlat7.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;\n    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat5.xyz;\n    u_xlat16_3.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat14 + -0.5;\n    u_xlat16_23 = u_xlat16_3.x * u_xlat16_23 + 1.0;\n    u_xlat16_10 = (-u_xlat0.x) + 1.0;\n    u_xlat16_17 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_17;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat5.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_16;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_25;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat2.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlatb2 = u_xlat2.x<u_xlat2.z;\n    u_xlat16_4.x = (u_xlatb2) ? _LightShadowData.x : 1.0;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);\n    u_xlat27 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlatb2 = 0.0<u_xlat1.z;\n    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat11 = texture2D(_LightTextureB0, vec2(u_xlat11)).x;\n    u_xlat16_13 = (u_xlatb2) ? 1.0 : 0.0;\n    u_xlat16_13 = u_xlat27 * u_xlat16_13;\n    u_xlat16_13 = u_xlat11 * u_xlat16_13;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_13;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = u_xlat3.xyz * vec3(u_xlat27) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat6.xyz, u_xlat5.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat29 = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat6.xyz, (-u_xlat2.xyz));\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat12.x = u_xlat20 * u_xlat20;\n    u_xlat21 = u_xlat27 * u_xlat12.x + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat27 = u_xlat12.x / u_xlat27;\n    u_xlat12.x = (-u_xlat20) + 1.0;\n    u_xlat21 = abs(u_xlat2.x) * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat3.x * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat20 * abs(u_xlat2.x);\n    u_xlat16_31 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat21 + u_xlat20;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat3.x * u_xlat27;\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_34 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb2 = u_xlat16_34!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat12.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_34 = (-u_xlat29) + 1.0;\n    u_xlat16_8.x = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat29 + u_xlat29;\n    u_xlat16_7.x = u_xlat29 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat11 + -0.5;\n    u_xlat16_31 = u_xlat16_7.x * u_xlat16_31 + 1.0;\n    u_xlat16_16 = (-u_xlat3.x) + 1.0;\n    u_xlat16_25 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_25;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_16 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat27 = u_xlat3.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_4.xyz + u_xlat12.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat11;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_14;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_23;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat2.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlatb2 = u_xlat2.x<u_xlat2.z;\n    u_xlat16_4.x = (u_xlatb2) ? _LightShadowData.x : 1.0;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);\n    u_xlat27 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlatb2 = 0.0<u_xlat1.z;\n    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat11 = texture2D(_LightTextureB0, vec2(u_xlat11)).x;\n    u_xlat16_13 = (u_xlatb2) ? 1.0 : 0.0;\n    u_xlat16_13 = u_xlat27 * u_xlat16_13;\n    u_xlat16_13 = u_xlat11 * u_xlat16_13;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_13;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_5.xy = u_xlat16_5.xy * vec2(_BumpScale);\n    u_xlat16_6.xyz = u_xlat16_5.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyw = vs_TEXCOORD2.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vs_TEXCOORD4.xyz * u_xlat16_5.zzz + u_xlat16_5.xyw;\n    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat16_27 = inversesqrt(u_xlat16_27);\n    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat7.x = vs_TEXCOORD2.w;\n    u_xlat7.y = vs_TEXCOORD3.w;\n    u_xlat7.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat27) + (-u_xlat3.xyz);\n    u_xlat29 = dot(u_xlat16_2.xyz, (-u_xlat3.xyz));\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat7.xyz = vec3(u_xlat27) * u_xlat8.xyz;\n    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = dot(u_xlat3.xyz, u_xlat7.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat20 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat20 * u_xlat20;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat12 = u_xlat3.x * u_xlat3.x;\n    u_xlat21 = u_xlat27 * u_xlat12 + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat27 = u_xlat12 / u_xlat27;\n    u_xlat12 = (-u_xlat3.x) + 1.0;\n    u_xlat21 = abs(u_xlat29) * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat29) * u_xlat3.x;\n    u_xlat16_31 = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat2.x * u_xlat21 + u_xlat3.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_32 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_32!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_32 = (-u_xlat11) + 1.0;\n    u_xlat16_6.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_32) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat11 + u_xlat11;\n    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat20 + -0.5;\n    u_xlat16_31 = u_xlat16_5.x * u_xlat16_31 + 1.0;\n    u_xlat16_14 = (-u_xlat2.x) + 1.0;\n    u_xlat16_23 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_14 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat27 = u_xlat2.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat8.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat8.x = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlatb8 = u_xlat8.x<u_xlat8.z;\n    u_xlat16_2.x = (u_xlatb8) ? _LightShadowData.x : 1.0;\n    u_xlat16_10 = (-u_xlat16_2.x) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_10 + u_xlat16_2.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat24 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_10 = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_10 = u_xlat24 * u_xlat16_10;\n    u_xlat16_10 = u_xlat0.x * u_xlat16_10;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat3.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat3.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9) + 1.0;\n    u_xlat3.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9;\n    u_xlat9 = u_xlat1.x * u_xlat17 + u_xlat9;\n    u_xlat9 = abs(u_xlat0.x) * u_xlat9;\n    u_xlat16_26 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat3.x + u_xlat9;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_26 = u_xlat16_5.x * u_xlat16_26 + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_26;\n    u_xlat16_2.xyz = vec3(u_xlat16) * u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat8.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat8.x = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlatb8 = u_xlat8.x<u_xlat8.z;\n    u_xlat16_2.x = (u_xlatb8) ? _LightShadowData.x : 1.0;\n    u_xlat16_10 = (-u_xlat16_2.x) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_10 + u_xlat16_2.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat24 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_10 = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_10 = u_xlat24 * u_xlat16_10;\n    u_xlat16_10 = u_xlat0.x * u_xlat16_10;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8.x * u_xlat8.x;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9 + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat24 = u_xlat9 / u_xlat24;\n    u_xlat9 = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_26 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat16_29 = u_xlat25 + u_xlat25;\n    u_xlat16_29 = u_xlat25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8.x + -0.5;\n    u_xlat16_26 = u_xlat16_29 * u_xlat16_26 + 1.0;\n    u_xlat16_6.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat8.x = u_xlat1.x * u_xlat16_26;\n    u_xlat16_2.xyz = u_xlat8.xxx * u_xlat16_2.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_7;\nmediump float u_xlat16_9;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat5.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat5.x = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb5 = u_xlat5.x<u_xlat5.z;\n    u_xlat16_2.x = (u_xlatb5) ? _LightShadowData.x : 1.0;\n    u_xlat16_7 = (-u_xlat16_2.x) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat15 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_7 = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_7 = u_xlat15 * u_xlat16_7;\n    u_xlat16_7 = u_xlat0.x * u_xlat16_7;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_17 = u_xlat15 + u_xlat15;\n    u_xlat16_17 = u_xlat15 * u_xlat16_17;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_17 = u_xlat16_17 * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_9 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_17 * u_xlat16_4.x + 1.0;\n    u_xlat16_9 = (-u_xlat5.x) + 1.0;\n    u_xlat16_14 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_14;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_9 + 1.0;\n    u_xlat16_17 = u_xlat16_4.x * u_xlat16_17;\n    u_xlat0.x = u_xlat5.x * u_xlat16_17;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_17);\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nbool u_xlatb7;\nfloat u_xlat8;\nmediump float u_xlat16_9;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat7.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat7.x = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb7 = u_xlat7.x<u_xlat7.z;\n    u_xlat16_2.x = (u_xlatb7) ? _LightShadowData.x : 1.0;\n    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_9 + u_xlat16_2.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat21 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_9 = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_9 = u_xlat21 * u_xlat16_9;\n    u_xlat16_9 = u_xlat0.x * u_xlat16_9;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_23 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat7.x = u_xlat1.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat7.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _ShadowOffsets[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_24;\nmediump float u_xlat16_25;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat7.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat1.xy = u_xlat7.xy + _ShadowOffsets[0].xy;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;\n    u_xlat2.xy = u_xlat7.xy + _ShadowOffsets[1].xy;\n    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat2.xy = u_xlat7.xy + _ShadowOffsets[2].xy;\n    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat7.xy = u_xlat7.xy + _ShadowOffsets[3].xy;\n    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb1 = lessThan(u_xlat1, u_xlat7.zzzz);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat7.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_3.x = (-u_xlat7.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat7.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat21 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1.x = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_10 = (u_xlatb1.x) ? 1.0 : 0.0;\n    u_xlat16_10 = u_xlat21 * u_xlat16_10;\n    u_xlat16_10 = u_xlat0.x * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat8.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat6.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat8.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat8.xyz, u_xlat2.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat22 = u_xlat21 * u_xlat15 + (-u_xlat21);\n    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat21 = u_xlat15 / u_xlat21;\n    u_xlat15 = (-u_xlat8.x) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);\n    u_xlat16_24 = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_25 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlatb22 = u_xlat16_25!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat2.xyz = u_xlat16_3.xyz * vec3(u_xlat21);\n    u_xlat16_25 = (-u_xlat7.x) + 1.0;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_4.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xyz;\n    u_xlat16_4.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat14 + -0.5;\n    u_xlat16_24 = u_xlat16_4.x * u_xlat16_24 + 1.0;\n    u_xlat16_11 = (-u_xlat0.x) + 1.0;\n    u_xlat16_18 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_24;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(u_xlat16_24);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _ShadowOffsets[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_16;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_25;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat2.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat3.xy = u_xlat2.xy + _ShadowOffsets[0].xy;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat3.xy = u_xlat2.xy + _ShadowOffsets[1].xy;\n    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat3.xy = u_xlat2.xy + _ShadowOffsets[2].xy;\n    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat2.xy = u_xlat2.xy + _ShadowOffsets[3].xy;\n    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlatb1 = lessThan(u_xlat1, u_xlat2.zzzz);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat2.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_4.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x + u_xlat2.x;\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);\n    u_xlat27 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlatb2 = 0.0<u_xlat1.z;\n    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat11 = texture2D(_LightTextureB0, vec2(u_xlat11)).x;\n    u_xlat16_13 = (u_xlatb2) ? 1.0 : 0.0;\n    u_xlat16_13 = u_xlat27 * u_xlat16_13;\n    u_xlat16_13 = u_xlat11 * u_xlat16_13;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_13;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = u_xlat3.xyz * vec3(u_xlat27) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat6.xyz, u_xlat5.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat29 = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat6.xyz, (-u_xlat2.xyz));\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat12.x = u_xlat20 * u_xlat20;\n    u_xlat21 = u_xlat27 * u_xlat12.x + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat27 = u_xlat12.x / u_xlat27;\n    u_xlat12.x = (-u_xlat20) + 1.0;\n    u_xlat21 = abs(u_xlat2.x) * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat3.x * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat20 * abs(u_xlat2.x);\n    u_xlat16_31 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat21 + u_xlat20;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat3.x * u_xlat27;\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_34 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb2 = u_xlat16_34!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat12.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_34 = (-u_xlat29) + 1.0;\n    u_xlat16_8.x = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat29 + u_xlat29;\n    u_xlat16_7.x = u_xlat29 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat11 + -0.5;\n    u_xlat16_31 = u_xlat16_7.x * u_xlat16_31 + 1.0;\n    u_xlat16_16 = (-u_xlat3.x) + 1.0;\n    u_xlat16_25 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_25;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_16 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat27 = u_xlat3.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_4.xyz + u_xlat12.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _ShadowOffsets[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat11;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_14;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_23;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat2.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat3.xy = u_xlat2.xy + _ShadowOffsets[0].xy;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat3.xy = u_xlat2.xy + _ShadowOffsets[1].xy;\n    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat3.xy = u_xlat2.xy + _ShadowOffsets[2].xy;\n    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat2.xy = u_xlat2.xy + _ShadowOffsets[3].xy;\n    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlatb1 = lessThan(u_xlat1, u_xlat2.zzzz);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat2.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_4.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x + u_xlat2.x;\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);\n    u_xlat27 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlatb2 = 0.0<u_xlat1.z;\n    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat11 = texture2D(_LightTextureB0, vec2(u_xlat11)).x;\n    u_xlat16_13 = (u_xlatb2) ? 1.0 : 0.0;\n    u_xlat16_13 = u_xlat27 * u_xlat16_13;\n    u_xlat16_13 = u_xlat11 * u_xlat16_13;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_13;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_5.xy = u_xlat16_5.xy * vec2(_BumpScale);\n    u_xlat16_6.xyz = u_xlat16_5.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyw = vs_TEXCOORD2.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vs_TEXCOORD4.xyz * u_xlat16_5.zzz + u_xlat16_5.xyw;\n    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat16_27 = inversesqrt(u_xlat16_27);\n    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat7.x = vs_TEXCOORD2.w;\n    u_xlat7.y = vs_TEXCOORD3.w;\n    u_xlat7.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat27) + (-u_xlat3.xyz);\n    u_xlat29 = dot(u_xlat16_2.xyz, (-u_xlat3.xyz));\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat7.xyz = vec3(u_xlat27) * u_xlat8.xyz;\n    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = dot(u_xlat3.xyz, u_xlat7.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat20 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat20 * u_xlat20;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat12 = u_xlat3.x * u_xlat3.x;\n    u_xlat21 = u_xlat27 * u_xlat12 + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat27 = u_xlat12 / u_xlat27;\n    u_xlat12 = (-u_xlat3.x) + 1.0;\n    u_xlat21 = abs(u_xlat29) * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat29) * u_xlat3.x;\n    u_xlat16_31 = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat2.x * u_xlat21 + u_xlat3.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_32 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_32!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_32 = (-u_xlat11) + 1.0;\n    u_xlat16_6.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_32) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat11 + u_xlat11;\n    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat20 + -0.5;\n    u_xlat16_31 = u_xlat16_5.x * u_xlat16_31 + 1.0;\n    u_xlat16_14 = (-u_xlat2.x) + 1.0;\n    u_xlat16_23 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_14 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat27 = u_xlat2.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _ShadowOffsets[4];\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat8.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat1.xy = u_xlat8.xy + _ShadowOffsets[0].xy;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;\n    u_xlat2.xy = u_xlat8.xy + _ShadowOffsets[1].xy;\n    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat2.xy = u_xlat8.xy + _ShadowOffsets[2].xy;\n    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat8.xy = u_xlat8.xy + _ShadowOffsets[3].xy;\n    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlatb1 = lessThan(u_xlat1, u_xlat8.zzzz);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat8.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_3.x = (-u_xlat8.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat8.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat24 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1.x = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_11 = (u_xlatb1.x) ? 1.0 : 0.0;\n    u_xlat16_11 = u_xlat24 * u_xlat16_11;\n    u_xlat16_11 = u_xlat0.x * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat2.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9) + 1.0;\n    u_xlat2.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9;\n    u_xlat9 = u_xlat1.x * u_xlat17 + u_xlat9;\n    u_xlat9 = abs(u_xlat0.x) * u_xlat9;\n    u_xlat16_27 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat2.x + u_xlat9;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_27 = u_xlat16_5.x * u_xlat16_27 + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_5.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_27;\n    u_xlat16_3.xyz = vec3(u_xlat16) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _ShadowOffsets[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat8.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat1.xy = u_xlat8.xy + _ShadowOffsets[0].xy;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;\n    u_xlat2.xy = u_xlat8.xy + _ShadowOffsets[1].xy;\n    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat2.xy = u_xlat8.xy + _ShadowOffsets[2].xy;\n    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat8.xy = u_xlat8.xy + _ShadowOffsets[3].xy;\n    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlatb1 = lessThan(u_xlat1, u_xlat8.zzzz);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat8.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_3.x = (-u_xlat8.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat8.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat24 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1.x = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_11 = (u_xlatb1.x) ? 1.0 : 0.0;\n    u_xlat16_11 = u_xlat24 * u_xlat16_11;\n    u_xlat16_11 = u_xlat0.x * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8.x * u_xlat8.x;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9 + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat24 = u_xlat9 / u_xlat24;\n    u_xlat9 = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_27 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_29;\n    u_xlat16_29 = u_xlat25 + u_xlat25;\n    u_xlat16_29 = u_xlat25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8.x + -0.5;\n    u_xlat16_27 = u_xlat16_29 * u_xlat16_27 + 1.0;\n    u_xlat16_6.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_29;\n    u_xlat8.x = u_xlat1.x * u_xlat16_27;\n    u_xlat16_3.xyz = u_xlat8.xxx * u_xlat16_3.xyz;\n    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _ShadowOffsets[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_9;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat5.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat1.xy = u_xlat5.xy + _ShadowOffsets[0].xy;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;\n    u_xlat2.xy = u_xlat5.xy + _ShadowOffsets[1].xy;\n    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat2.xy = u_xlat5.xy + _ShadowOffsets[2].xy;\n    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat5.xy = u_xlat5.xy + _ShadowOffsets[3].xy;\n    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb1 = lessThan(u_xlat1, u_xlat5.zzzz);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat5.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_3.x = (-u_xlat5.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat15 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1.x = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_8 = (u_xlatb1.x) ? 1.0 : 0.0;\n    u_xlat16_8 = u_xlat15 * u_xlat16_8;\n    u_xlat16_8 = u_xlat0.x * u_xlat16_8;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_18 = u_xlat15 + u_xlat15;\n    u_xlat16_18 = u_xlat15 * u_xlat16_18;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_18 = u_xlat16_18 * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_9 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x + 1.0;\n    u_xlat16_9 = (-u_xlat5.x) + 1.0;\n    u_xlat16_14 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_14;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_9 + 1.0;\n    u_xlat16_18 = u_xlat16_4.x * u_xlat16_18;\n    u_xlat0.x = u_xlat5.x * u_xlat16_18;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _ShadowOffsets[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nfloat u_xlat8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_24;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat7.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat1.xy = u_xlat7.xy + _ShadowOffsets[0].xy;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;\n    u_xlat2.xy = u_xlat7.xy + _ShadowOffsets[1].xy;\n    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat2.xy = u_xlat7.xy + _ShadowOffsets[2].xy;\n    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat7.xy = u_xlat7.xy + _ShadowOffsets[3].xy;\n    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb1 = lessThan(u_xlat1, u_xlat7.zzzz);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat7.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_3.x = (-u_xlat7.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat7.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat21 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1.x = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_10 = (u_xlatb1.x) ? 1.0 : 0.0;\n    u_xlat16_10 = u_xlat21 * u_xlat16_10;\n    u_xlat16_10 = u_xlat0.x * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_24 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;\n    u_xlat16_24 = u_xlat16_5.x * u_xlat16_24 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat7.x = u_xlat1.x * u_xlat16_24;\n    u_xlat16_3.xyz = u_xlat7.xxx * u_xlat16_3.xyz;\n    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_24);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    vs_TEXCOORD2.xyz = u_xlat2.xyz;\n    u_xlat3.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = u_xlat3.x;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16_4.xyz = u_xlat2.yzx * u_xlat1.zxy;\n    u_xlat16_4.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat16_4.xyz);\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_4.xyz = u_xlat1.xxx * u_xlat16_4.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD3.w = u_xlat3.y;\n    vs_TEXCOORD4.w = u_xlat3.z;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nlowp float u_xlat10_7;\nfloat u_xlat8;\nmediump float u_xlat16_10;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_24;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_2.x = (-u_xlat10_7) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_7;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * u_xlat16_3.zzz + u_xlat16_3.xyw;\n    u_xlat16_0.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat6.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, (-u_xlat6.xyz));\n    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat5.xyz = vec3(u_xlat22) * u_xlat5.xyz;\n    u_xlat22 = dot(u_xlat16_0.xyz, u_xlat5.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_23 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb22 = u_xlat16_24!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat5.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_24 = (-u_xlat7.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;\n    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat5.xyz;\n    u_xlat16_3.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat14 + -0.5;\n    u_xlat16_10 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_10;\n    u_xlat16_23 = u_xlat16_3.x * u_xlat16_23 + 1.0;\n    u_xlat16_10 = (-u_xlat0.x) + 1.0;\n    u_xlat16_17 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_17;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat5.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nlowp float u_xlat10_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat10;\nfloat u_xlat11;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat19;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat24 = u_xlat24 + (-u_xlat2.x);\n    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat2.x;\n    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_2 = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat16_1.x = (-u_xlat10_2) + 1.0;\n    u_xlat16_1.x = u_xlat24 * u_xlat16_1.x + u_xlat10_2;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, (-u_xlat5.xyz));\n    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;\n    u_xlat26 = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat18 * u_xlat18;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat11 = u_xlat3.x * u_xlat3.x;\n    u_xlat19 = u_xlat26 * u_xlat11 + (-u_xlat26);\n    u_xlat26 = u_xlat19 * u_xlat26 + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat11 = u_xlat11 * 0.318309873;\n    u_xlat26 = u_xlat11 / u_xlat26;\n    u_xlat11 = (-u_xlat3.x) + 1.0;\n    u_xlat19 = abs(u_xlat24) * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat24) * u_xlat3.x;\n    u_xlat16_25 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat2.x * u_xlat19 + u_xlat3.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat26 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb26 = u_xlat16_30!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat24);\n    u_xlat16_30 = (-u_xlat10) + 1.0;\n    u_xlat16_7.x = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_6.xyz;\n    u_xlat16_6.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_6.xxx;\n    u_xlat16_30 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_30;\n    u_xlat16_30 = u_xlat10 + u_xlat10;\n    u_xlat16_30 = u_xlat10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * u_xlat18 + -0.5;\n    u_xlat16_25 = u_xlat16_30 * u_xlat16_25 + 1.0;\n    u_xlat16_7.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_30;\n    u_xlat0.x = u_xlat2.x * u_xlat16_25;\n    u_xlat16_1.xyz = u_xlat0.xxx * u_xlat16_1.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nfloat u_xlat10;\nfloat u_xlat11;\nmediump float u_xlat16_12;\nfloat u_xlat18;\nfloat u_xlat19;\nmediump float u_xlat16_20;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat24 = u_xlat24 + (-u_xlat2.x);\n    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat2.x;\n    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat16_1.x = (-u_xlat10_2.x) + 1.0;\n    u_xlat16_1.x = u_xlat24 * u_xlat16_1.x + u_xlat10_2.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_24 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_24 = inversesqrt(u_xlat16_24);\n    u_xlat16_2.xyz = vec3(u_xlat16_24) * u_xlat16_4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat3.xyz;\n    u_xlat7.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat16_2.xyz, (-u_xlat7.xyz));\n    u_xlat26 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat6.xyz = vec3(u_xlat26) * u_xlat6.xyz;\n    u_xlat26 = dot(u_xlat16_2.xyz, u_xlat6.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat3.xyz, u_xlat6.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat18 * u_xlat18;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat11 = u_xlat3.x * u_xlat3.x;\n    u_xlat19 = u_xlat26 * u_xlat11 + (-u_xlat26);\n    u_xlat26 = u_xlat19 * u_xlat26 + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat11 = u_xlat11 * 0.318309873;\n    u_xlat26 = u_xlat11 / u_xlat26;\n    u_xlat11 = (-u_xlat3.x) + 1.0;\n    u_xlat19 = abs(u_xlat24) * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat24) * u_xlat3.x;\n    u_xlat16_25 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat2.x * u_xlat19 + u_xlat3.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat26 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlatb26 = u_xlat16_28!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat24);\n    u_xlat16_28 = (-u_xlat10) + 1.0;\n    u_xlat16_5.x = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16_5.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_28) + u_xlat16_4.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xyz;\n    u_xlat16_4.x = u_xlat10 + u_xlat10;\n    u_xlat16_4.x = u_xlat10 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat18 + -0.5;\n    u_xlat16_12 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_12;\n    u_xlat16_25 = u_xlat16_4.x * u_xlat16_25 + 1.0;\n    u_xlat16_12 = (-u_xlat2.x) + 1.0;\n    u_xlat16_20 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_20;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_4.x;\n    u_xlat24 = u_xlat2.x * u_xlat16_25;\n    u_xlat16_1.xyz = vec3(u_xlat24) * u_xlat16_1.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec2 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp float u_xlat10_8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_9;\nlowp vec3 u_xlat10_9;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_8 = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlat16_2.x = (-u_xlat10_8) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_8;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat25 = max(u_xlat25, 0.00100000005);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz;\n    u_xlat25 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat10_1.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_1.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat3.x = u_xlat25 * u_xlat17 + (-u_xlat25);\n    u_xlat25 = u_xlat3.x * u_xlat25 + 1.0;\n    u_xlat25 = u_xlat25 * u_xlat25 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat17 = u_xlat17 / u_xlat25;\n    u_xlat25 = (-u_xlat9) + 1.0;\n    u_xlat3.x = abs(u_xlat24) * u_xlat25 + u_xlat9;\n    u_xlat9 = u_xlat0.x * u_xlat25 + u_xlat9;\n    u_xlat9 = abs(u_xlat24) * u_xlat9;\n    u_xlat16_26 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat0.x * u_xlat3.x + u_xlat9;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat17 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat0.x * u_xlat24;\n    u_xlat10_9.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_9.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_9.xyz = u_xlat10_9.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_29!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat24);\n    u_xlat16_29 = (-u_xlat8.x) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat8.x + u_xlat8.x;\n    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_26 = u_xlat16_5.x * u_xlat16_26 + 1.0;\n    u_xlat16_13 = (-u_xlat0.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_26;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp float u_xlat10_8;\nfloat u_xlat9;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_8 = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlat16_2.x = (-u_xlat10_8) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_8;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat25 = max(u_xlat25, 0.00100000005);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz;\n    u_xlat25 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat16 * u_xlat16;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat9 = u_xlat1.x * u_xlat1.x;\n    u_xlat17 = u_xlat25 * u_xlat9 + (-u_xlat25);\n    u_xlat17 = u_xlat17 * u_xlat25 + 1.0;\n    u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat9 = u_xlat9 / u_xlat17;\n    u_xlat17 = (-u_xlat1.x) + 1.0;\n    u_xlat25 = abs(u_xlat24) * u_xlat17 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat17 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat24) * u_xlat1.x;\n    u_xlat16_26 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat0.x * u_xlat25 + u_xlat1.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat9 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat0.x * u_xlat24;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat10_1.x = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_1.x) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat10_1.xxx + vec3(u_xlat16_29);\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_29!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat24);\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat8.x) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat16_29 = u_xlat8.x + u_xlat8.x;\n    u_xlat16_29 = u_xlat8.x * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16 + -0.5;\n    u_xlat16_26 = u_xlat16_29 * u_xlat16_26 + 1.0;\n    u_xlat16_6.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat0.x = u_xlat0.x * u_xlat16_26;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nvec2 u_xlat10;\nlowp float u_xlat10_10;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat0.x + -0.5;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = (-u_xlat15) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_18 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13;\n    u_xlat0.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = sqrt(u_xlat5.x);\n    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat10.x = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat5.x = (-u_xlat10.x) + u_xlat5.x;\n    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10.x;\n    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_10 = texture2D(_ShadowMapTexture, u_xlat10.xy).x;\n    u_xlat16_3.x = (-u_xlat10_10) + 1.0;\n    u_xlat16_3.x = u_xlat5.x * u_xlat16_3.x + u_xlat10_10;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nlowp float u_xlat10_7;\nfloat u_xlat8;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_2.x = (-u_xlat10_7) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_7;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_23 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_26!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_26 = (-u_xlat7.x) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat20;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    u_xlatb2 = _UVSec==0.0;\n    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;\n    vs_TEXCOORD1.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;\n    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat20 = inversesqrt(u_xlat20);\n    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;\n    vs_TEXCOORD2.xyz = u_xlat3.xyz;\n    u_xlat4.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xyz;\n    vs_TEXCOORD2.w = u_xlat4.x;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat20 = inversesqrt(u_xlat20);\n    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;\n    u_xlat16_5.xyz = u_xlat3.yzx * u_xlat2.zxy;\n    u_xlat16_5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat16_5.xyz);\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n    u_xlat2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_5.xyz = u_xlat2.xxx * u_xlat16_5.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat4.y;\n    vs_TEXCOORD4.w = u_xlat4.z;\n    u_xlat2.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nlowp float u_xlat10_7;\nfloat u_xlat8;\nmediump float u_xlat16_10;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_24;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_2.x = (-u_xlat10_7) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_7;\n    u_xlat0.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;\n    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;\n    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * u_xlat16_3.zzz + u_xlat16_3.xyw;\n    u_xlat16_0.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat6.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, (-u_xlat6.xyz));\n    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat5.xyz = vec3(u_xlat22) * u_xlat5.xyz;\n    u_xlat22 = dot(u_xlat16_0.xyz, u_xlat5.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_23 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb22 = u_xlat16_24!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat5.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_24 = (-u_xlat7.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;\n    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat5.xyz;\n    u_xlat16_3.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat14 + -0.5;\n    u_xlat16_10 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_10;\n    u_xlat16_23 = u_xlat16_3.x * u_xlat16_23 + 1.0;\n    u_xlat16_10 = (-u_xlat0.x) + 1.0;\n    u_xlat16_17 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_17;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat5.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nbool u_xlatb2;\nvec4 u_xlat3;\nfloat u_xlat14;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    u_xlatb2 = _UVSec==0.0;\n    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;\n    vs_TEXCOORD1.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat3.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xyz;\n    u_xlat3.w = 0.0;\n    vs_TEXCOORD2 = u_xlat3.wwwx;\n    vs_TEXCOORD3 = u_xlat3.wwwy;\n    vs_TEXCOORD4.w = u_xlat3.z;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat14 = inversesqrt(u_xlat14);\n    vs_TEXCOORD4.xyz = vec3(u_xlat14) * u_xlat2.xyz;\n    u_xlat2.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nlowp float u_xlat10_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat10;\nfloat u_xlat11;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nfloat u_xlat19;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat24 = u_xlat24 + (-u_xlat2.x);\n    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat2.x;\n    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_2 = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat16_1.x = (-u_xlat10_2) + 1.0;\n    u_xlat16_1.x = u_xlat24 * u_xlat16_1.x + u_xlat10_2;\n    u_xlat2.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat2.xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat24 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlat24 = u_xlat16_1.x * u_xlat24;\n    u_xlat16_1.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, (-u_xlat5.xyz));\n    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;\n    u_xlat26 = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat18 * u_xlat18;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat11 = u_xlat3.x * u_xlat3.x;\n    u_xlat19 = u_xlat26 * u_xlat11 + (-u_xlat26);\n    u_xlat26 = u_xlat19 * u_xlat26 + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat11 = u_xlat11 * 0.318309873;\n    u_xlat26 = u_xlat11 / u_xlat26;\n    u_xlat11 = (-u_xlat3.x) + 1.0;\n    u_xlat19 = abs(u_xlat24) * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat24) * u_xlat3.x;\n    u_xlat16_25 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat2.x * u_xlat19 + u_xlat3.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat26 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb26 = u_xlat16_30!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat24);\n    u_xlat16_30 = (-u_xlat10) + 1.0;\n    u_xlat16_7.x = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat10 + u_xlat10;\n    u_xlat16_6.x = u_xlat10 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat18 + -0.5;\n    u_xlat16_25 = u_xlat16_6.x * u_xlat16_25 + 1.0;\n    u_xlat16_14 = (-u_xlat2.x) + 1.0;\n    u_xlat16_22 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_22;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;\n    u_xlat24 = u_xlat2.x * u_xlat16_25;\n    u_xlat16_1.xyz = vec3(u_xlat24) * u_xlat16_1.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nfloat u_xlat10;\nfloat u_xlat11;\nmediump float u_xlat16_12;\nfloat u_xlat18;\nfloat u_xlat19;\nmediump float u_xlat16_20;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat24 = u_xlat24 + (-u_xlat2.x);\n    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat2.x;\n    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat16_1.x = (-u_xlat10_2.x) + 1.0;\n    u_xlat16_1.x = u_xlat24 * u_xlat16_1.x + u_xlat10_2.x;\n    u_xlat2.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat2.xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat24 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlat24 = u_xlat16_1.x * u_xlat24;\n    u_xlat16_1.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_24 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_24 = inversesqrt(u_xlat16_24);\n    u_xlat16_2.xyz = vec3(u_xlat16_24) * u_xlat16_4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat3.xyz;\n    u_xlat7.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat16_2.xyz, (-u_xlat7.xyz));\n    u_xlat26 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat6.xyz = vec3(u_xlat26) * u_xlat6.xyz;\n    u_xlat26 = dot(u_xlat16_2.xyz, u_xlat6.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat3.xyz, u_xlat6.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat18 * u_xlat18;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat11 = u_xlat3.x * u_xlat3.x;\n    u_xlat19 = u_xlat26 * u_xlat11 + (-u_xlat26);\n    u_xlat26 = u_xlat19 * u_xlat26 + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat11 = u_xlat11 * 0.318309873;\n    u_xlat26 = u_xlat11 / u_xlat26;\n    u_xlat11 = (-u_xlat3.x) + 1.0;\n    u_xlat19 = abs(u_xlat24) * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat24) * u_xlat3.x;\n    u_xlat16_25 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat2.x * u_xlat19 + u_xlat3.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat26 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlatb26 = u_xlat16_28!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat24);\n    u_xlat16_28 = (-u_xlat10) + 1.0;\n    u_xlat16_5.x = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16_5.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_28) + u_xlat16_4.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xyz;\n    u_xlat16_4.x = u_xlat10 + u_xlat10;\n    u_xlat16_4.x = u_xlat10 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat18 + -0.5;\n    u_xlat16_12 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_12;\n    u_xlat16_25 = u_xlat16_4.x * u_xlat16_25 + 1.0;\n    u_xlat16_12 = (-u_xlat2.x) + 1.0;\n    u_xlat16_20 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_20;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_4.x;\n    u_xlat24 = u_xlat2.x * u_xlat16_25;\n    u_xlat16_1.xyz = vec3(u_xlat24) * u_xlat16_1.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec2 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp float u_xlat10_8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_9;\nlowp vec3 u_xlat10_9;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_8 = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlat16_2.x = (-u_xlat10_8) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_8;\n    u_xlat0.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;\n    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;\n    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat25 = max(u_xlat25, 0.00100000005);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz;\n    u_xlat25 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat10_1.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_1.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat3.x = u_xlat25 * u_xlat17 + (-u_xlat25);\n    u_xlat25 = u_xlat3.x * u_xlat25 + 1.0;\n    u_xlat25 = u_xlat25 * u_xlat25 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat17 = u_xlat17 / u_xlat25;\n    u_xlat25 = (-u_xlat9) + 1.0;\n    u_xlat3.x = abs(u_xlat24) * u_xlat25 + u_xlat9;\n    u_xlat9 = u_xlat0.x * u_xlat25 + u_xlat9;\n    u_xlat9 = abs(u_xlat24) * u_xlat9;\n    u_xlat16_26 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat0.x * u_xlat3.x + u_xlat9;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat17 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat0.x * u_xlat24;\n    u_xlat10_9.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_9.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_9.xyz = u_xlat10_9.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_29!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat24);\n    u_xlat16_29 = (-u_xlat8.x) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat8.x + u_xlat8.x;\n    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_26 = u_xlat16_5.x * u_xlat16_26 + 1.0;\n    u_xlat16_13 = (-u_xlat0.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_26;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp float u_xlat10_8;\nfloat u_xlat9;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_8 = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlat16_2.x = (-u_xlat10_8) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_8;\n    u_xlat0.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;\n    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;\n    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat25 = max(u_xlat25, 0.00100000005);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz;\n    u_xlat25 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat16 * u_xlat16;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat9 = u_xlat1.x * u_xlat1.x;\n    u_xlat17 = u_xlat25 * u_xlat9 + (-u_xlat25);\n    u_xlat17 = u_xlat17 * u_xlat25 + 1.0;\n    u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat9 = u_xlat9 / u_xlat17;\n    u_xlat17 = (-u_xlat1.x) + 1.0;\n    u_xlat25 = abs(u_xlat24) * u_xlat17 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat17 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat24) * u_xlat1.x;\n    u_xlat16_26 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat0.x * u_xlat25 + u_xlat1.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat9 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat0.x * u_xlat24;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat10_1.x = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_1.x) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat10_1.xxx + vec3(u_xlat16_29);\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_29!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat24);\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat8.x) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat16_29 = u_xlat8.x + u_xlat8.x;\n    u_xlat16_29 = u_xlat8.x * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16 + -0.5;\n    u_xlat16_26 = u_xlat16_29 * u_xlat16_26 + 1.0;\n    u_xlat16_6.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat0.x = u_xlat0.x * u_xlat16_26;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat1.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nvec2 u_xlat10;\nlowp float u_xlat10_10;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat0.x + -0.5;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = (-u_xlat15) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_18 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13;\n    u_xlat0.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = sqrt(u_xlat5.x);\n    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat10.x = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat5.x = (-u_xlat10.x) + u_xlat5.x;\n    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10.x;\n    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_10 = texture2D(_ShadowMapTexture, u_xlat10.xy).x;\n    u_xlat16_3.x = (-u_xlat10_10) + 1.0;\n    u_xlat16_3.x = u_xlat5.x * u_xlat16_3.x + u_xlat10_10;\n    u_xlat5.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat5.xy;\n    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat5.xy;\n    u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xy).w;\n    u_xlat5.x = u_xlat16_3.x * u_xlat5.x;\n    u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nlowp float u_xlat10_7;\nfloat u_xlat8;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_2.x = (-u_xlat10_7) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_7;\n    u_xlat0.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;\n    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;\n    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_23 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_26!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_26 = (-u_xlat7.x) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nbool u_xlatb7;\nvec3 u_xlat8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_24;\nmediump float u_xlat16_25;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat7.xyz);\n    u_xlat7.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat14 = sqrt(u_xlat1.x);\n    u_xlat14 = u_xlat14 * _LightPositionRange.w;\n    u_xlat14 = u_xlat14 * _LightProjectionParams.w;\n    u_xlatb7 = u_xlat7.x<u_xlat14;\n    u_xlat16_3.x = (u_xlatb7) ? _LightShadowData.x : 1.0;\n    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat8.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat6.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat8.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat8.xyz, u_xlat2.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat22 = u_xlat21 * u_xlat15 + (-u_xlat21);\n    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat21 = u_xlat15 / u_xlat21;\n    u_xlat15 = (-u_xlat8.x) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);\n    u_xlat16_24 = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_25 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlatb22 = u_xlat16_25!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat2.xyz = u_xlat16_3.xyz * vec3(u_xlat21);\n    u_xlat16_25 = (-u_xlat7.x) + 1.0;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_4.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xyz;\n    u_xlat16_4.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat14 + -0.5;\n    u_xlat16_24 = u_xlat16_4.x * u_xlat16_24 + 1.0;\n    u_xlat16_11 = (-u_xlat0.x) + 1.0;\n    u_xlat16_18 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_24;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(u_xlat16_24);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_16;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_25;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat2.xyz);\n    u_xlat2.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat11 = sqrt(u_xlat29);\n    u_xlat11 = u_xlat11 * _LightPositionRange.w;\n    u_xlat11 = u_xlat11 * _LightProjectionParams.w;\n    u_xlatb2 = u_xlat2.x<u_xlat11;\n    u_xlat16_4.x = (u_xlatb2) ? _LightShadowData.x : 1.0;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = texture2D(_LightTexture0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat16_4.x * u_xlat27;\n    u_xlat16_4.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = u_xlat3.xyz * vec3(u_xlat27) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat6.xyz, u_xlat5.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat29 = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat6.xyz, (-u_xlat2.xyz));\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat12.x = u_xlat20 * u_xlat20;\n    u_xlat21 = u_xlat27 * u_xlat12.x + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat27 = u_xlat12.x / u_xlat27;\n    u_xlat12.x = (-u_xlat20) + 1.0;\n    u_xlat21 = abs(u_xlat2.x) * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat3.x * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat20 * abs(u_xlat2.x);\n    u_xlat16_31 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat21 + u_xlat20;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat3.x * u_xlat27;\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_34 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb2 = u_xlat16_34!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat12.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_34 = (-u_xlat29) + 1.0;\n    u_xlat16_8.x = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat29 + u_xlat29;\n    u_xlat16_7.x = u_xlat29 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat11 + -0.5;\n    u_xlat16_31 = u_xlat16_7.x * u_xlat16_31 + 1.0;\n    u_xlat16_16 = (-u_xlat3.x) + 1.0;\n    u_xlat16_25 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_25;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_16 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat27 = u_xlat3.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_4.xyz + u_xlat12.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat11;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_14;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_23;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat2.xyz);\n    u_xlat2.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat11 = sqrt(u_xlat29);\n    u_xlat11 = u_xlat11 * _LightPositionRange.w;\n    u_xlat11 = u_xlat11 * _LightProjectionParams.w;\n    u_xlatb2 = u_xlat2.x<u_xlat11;\n    u_xlat16_4.x = (u_xlatb2) ? _LightShadowData.x : 1.0;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = texture2D(_LightTexture0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat16_4.x * u_xlat27;\n    u_xlat16_4.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_5.xy = u_xlat16_5.xy * vec2(_BumpScale);\n    u_xlat16_6.xyz = u_xlat16_5.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyw = vs_TEXCOORD2.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vs_TEXCOORD4.xyz * u_xlat16_5.zzz + u_xlat16_5.xyw;\n    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat16_27 = inversesqrt(u_xlat16_27);\n    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat7.x = vs_TEXCOORD2.w;\n    u_xlat7.y = vs_TEXCOORD3.w;\n    u_xlat7.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat27) + (-u_xlat3.xyz);\n    u_xlat29 = dot(u_xlat16_2.xyz, (-u_xlat3.xyz));\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat7.xyz = vec3(u_xlat27) * u_xlat8.xyz;\n    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = dot(u_xlat3.xyz, u_xlat7.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat20 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat20 * u_xlat20;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat12 = u_xlat3.x * u_xlat3.x;\n    u_xlat21 = u_xlat27 * u_xlat12 + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat27 = u_xlat12 / u_xlat27;\n    u_xlat12 = (-u_xlat3.x) + 1.0;\n    u_xlat21 = abs(u_xlat29) * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat29) * u_xlat3.x;\n    u_xlat16_31 = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat2.x * u_xlat21 + u_xlat3.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_32 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_32!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_32 = (-u_xlat11) + 1.0;\n    u_xlat16_6.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_32) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat11 + u_xlat11;\n    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat20 + -0.5;\n    u_xlat16_31 = u_xlat16_5.x * u_xlat16_31 + 1.0;\n    u_xlat16_14 = (-u_xlat2.x) + 1.0;\n    u_xlat16_23 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_14 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat27 = u_xlat2.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat8.xyz);\n    u_xlat8.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat16 = sqrt(u_xlat1.x);\n    u_xlat16 = u_xlat16 * _LightPositionRange.w;\n    u_xlat16 = u_xlat16 * _LightProjectionParams.w;\n    u_xlatb8 = u_xlat8.x<u_xlat16;\n    u_xlat16_3.x = (u_xlatb8) ? _LightShadowData.x : 1.0;\n    u_xlat16_11 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_11 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat2.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9) + 1.0;\n    u_xlat2.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9;\n    u_xlat9 = u_xlat1.x * u_xlat17 + u_xlat9;\n    u_xlat9 = abs(u_xlat0.x) * u_xlat9;\n    u_xlat16_27 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat2.x + u_xlat9;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_27 = u_xlat16_5.x * u_xlat16_27 + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_5.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_27;\n    u_xlat16_3.xyz = vec3(u_xlat16) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat8.xyz);\n    u_xlat8.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat16 = sqrt(u_xlat1.x);\n    u_xlat16 = u_xlat16 * _LightPositionRange.w;\n    u_xlat16 = u_xlat16 * _LightProjectionParams.w;\n    u_xlatb8 = u_xlat8.x<u_xlat16;\n    u_xlat16_3.x = (u_xlatb8) ? _LightShadowData.x : 1.0;\n    u_xlat16_11 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_11 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8.x * u_xlat8.x;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9 + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat24 = u_xlat9 / u_xlat24;\n    u_xlat9 = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_27 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_29;\n    u_xlat16_29 = u_xlat25 + u_xlat25;\n    u_xlat16_29 = u_xlat25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8.x + -0.5;\n    u_xlat16_27 = u_xlat16_29 * u_xlat16_27 + 1.0;\n    u_xlat16_6.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_29;\n    u_xlat8.x = u_xlat1.x * u_xlat16_27;\n    u_xlat16_3.xyz = u_xlat8.xxx * u_xlat16_3.xyz;\n    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat15 + u_xlat15;\n    u_xlat16_3.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_13 = (-u_xlat5.x) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat5.x * u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = sqrt(u_xlat5.x);\n    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat5.x = (-u_xlat10) + u_xlat5.x;\n    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10;\n    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat1.xyz);\n    u_xlat15 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10 = sqrt(u_xlat10);\n    u_xlat10 = u_xlat10 * _LightPositionRange.w;\n    u_xlat10 = u_xlat10 * _LightProjectionParams.w;\n    u_xlatb10 = u_xlat15<u_xlat10;\n    u_xlat16_3.x = (u_xlatb10) ? _LightShadowData.x : 1.0;\n    u_xlat16_8 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat5.x * u_xlat16_8 + u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xx).x;\n    u_xlat5.x = u_xlat16_3.x * u_xlat5.x;\n    u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nbool u_xlatb7;\nfloat u_xlat8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_24;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat7.xyz);\n    u_xlat7.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat14 = sqrt(u_xlat1.x);\n    u_xlat14 = u_xlat14 * _LightPositionRange.w;\n    u_xlat14 = u_xlat14 * _LightProjectionParams.w;\n    u_xlatb7 = u_xlat7.x<u_xlat14;\n    u_xlat16_3.x = (u_xlatb7) ? _LightShadowData.x : 1.0;\n    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_24 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;\n    u_xlat16_24 = u_xlat16_5.x * u_xlat16_24 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat7.x = u_xlat1.x * u_xlat16_24;\n    u_xlat16_3.xyz = u_xlat7.xxx * u_xlat16_3.xyz;\n    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_24);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nmediump float u_xlat16_11;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat8.xyz = u_xlat7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat7.xyz = u_xlat7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_11 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_11 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_5.xy = u_xlat16_5.xy * vec2(_BumpScale);\n    u_xlat16_6.xyz = u_xlat16_5.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyw = vs_TEXCOORD2.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vs_TEXCOORD4.xyz * u_xlat16_5.zzz + u_xlat16_5.xyw;\n    u_xlat16_0.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat8.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat8.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat8.xyz, u_xlat2.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat22 = u_xlat21 * u_xlat15 + (-u_xlat21);\n    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat21 = u_xlat15 / u_xlat21;\n    u_xlat15 = (-u_xlat8.x) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);\n    u_xlat16_25 = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_26!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat2.xyz = u_xlat16_4.xyz * vec3(u_xlat21);\n    u_xlat16_26 = (-u_xlat7.x) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_25 = u_xlat16_5.x * u_xlat16_25 + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_25;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nvec3 u_xlat12;\nmediump float u_xlat16_14;\nmediump float u_xlat16_16;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_25;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat29 = u_xlat29 * _LightPositionRange.w;\n    u_xlat29 = u_xlat29 * _LightProjectionParams.w;\n    u_xlat3.xyz = u_xlat2.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_4 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);\n    u_xlat1.w = dot(u_xlat10_4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat29));\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_5.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_14 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = u_xlat27 * u_xlat16_14 + u_xlat16_5.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = texture2D(_LightTexture0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat16_5.x * u_xlat27;\n    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat27) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat6.xyz, u_xlat4.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat29 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat6.xyz, (-u_xlat2.xyz));\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat12.x = u_xlat20 * u_xlat20;\n    u_xlat21 = u_xlat27 * u_xlat12.x + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat27 = u_xlat12.x / u_xlat27;\n    u_xlat12.x = (-u_xlat20) + 1.0;\n    u_xlat21 = abs(u_xlat2.x) * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat3.x * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat20 * abs(u_xlat2.x);\n    u_xlat16_32 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat21 + u_xlat20;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat3.x * u_xlat27;\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_34 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb2 = u_xlat16_34!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat12.xyz = u_xlat16_5.xyz * vec3(u_xlat27);\n    u_xlat16_34 = (-u_xlat29) + 1.0;\n    u_xlat16_8.x = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat29 + u_xlat29;\n    u_xlat16_7.x = u_xlat29 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat11 + -0.5;\n    u_xlat16_32 = u_xlat16_7.x * u_xlat16_32 + 1.0;\n    u_xlat16_16 = (-u_xlat3.x) + 1.0;\n    u_xlat16_25 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_25;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_16 + 1.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;\n    u_xlat27 = u_xlat3.x * u_xlat16_32;\n    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_32);\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz + u_xlat12.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nmediump float u_xlat16_15;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_24;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat29 = u_xlat29 * _LightPositionRange.w;\n    u_xlat29 = u_xlat29 * _LightProjectionParams.w;\n    u_xlat3.xyz = u_xlat2.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_4 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);\n    u_xlat1.w = dot(u_xlat10_4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat29));\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_5.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_14 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = u_xlat27 * u_xlat16_14 + u_xlat16_5.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = texture2D(_LightTexture0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat16_5.x * u_xlat27;\n    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_6.xy = u_xlat16_6.xy * vec2(_BumpScale);\n    u_xlat16_7.xyz = u_xlat16_6.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyw = vs_TEXCOORD2.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vs_TEXCOORD4.xyz * u_xlat16_6.zzz + u_xlat16_6.xyw;\n    u_xlat16_27 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlat16_27 = inversesqrt(u_xlat16_27);\n    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat4.x = vs_TEXCOORD2.w;\n    u_xlat4.y = vs_TEXCOORD3.w;\n    u_xlat4.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat27) + (-u_xlat3.xyz);\n    u_xlat29 = dot(u_xlat16_2.xyz, (-u_xlat3.xyz));\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat8.xyz;\n    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat20 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat20 * u_xlat20;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat12 = u_xlat3.x * u_xlat3.x;\n    u_xlat21 = u_xlat27 * u_xlat12 + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat27 = u_xlat12 / u_xlat27;\n    u_xlat12 = (-u_xlat3.x) + 1.0;\n    u_xlat21 = abs(u_xlat29) * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat29) * u_xlat3.x;\n    u_xlat16_32 = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat2.x * u_xlat21 + u_xlat3.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb29 = u_xlat16_33!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat3.xyz = u_xlat16_5.xyz * vec3(u_xlat27);\n    u_xlat16_33 = (-u_xlat11) + 1.0;\n    u_xlat16_7.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat11 + u_xlat11;\n    u_xlat16_6.x = u_xlat11 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat20 + -0.5;\n    u_xlat16_32 = u_xlat16_6.x * u_xlat16_32 + 1.0;\n    u_xlat16_15 = (-u_xlat2.x) + 1.0;\n    u_xlat16_24 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_24;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_15 + 1.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat27 = u_xlat2.x * u_xlat16_32;\n    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_32);\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nvec3 u_xlat9;\nmediump float u_xlat16_12;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat9.xyz = u_xlat8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat8.xyz = u_xlat8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9.x = u_xlat16 * u_xlat16;\n    u_xlat9.x = max(u_xlat9.x, 0.00200000009);\n    u_xlat17 = u_xlat9.x * u_xlat9.x;\n    u_xlat2.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9.x) + 1.0;\n    u_xlat2.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9.x;\n    u_xlat9.x = u_xlat1.x * u_xlat17 + u_xlat9.x;\n    u_xlat9.x = abs(u_xlat0.x) * u_xlat9.x;\n    u_xlat16_28 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat2.x + u_xlat9.x;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_28 = u_xlat16_5.x * u_xlat16_28 + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_28;\n    u_xlat16_4.xyz = vec3(u_xlat16) * u_xlat16_4.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nmediump float u_xlat16_12;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat9.xyz = u_xlat8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat8.xyz = u_xlat8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8.x * u_xlat8.x;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9.x = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9.x + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9.x = u_xlat9.x * 0.318309873;\n    u_xlat24 = u_xlat9.x / u_xlat24;\n    u_xlat9.x = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9.x + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9.x + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_28 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;\n    u_xlat16_29 = u_xlat25 + u_xlat25;\n    u_xlat16_29 = u_xlat25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8.x + -0.5;\n    u_xlat16_28 = u_xlat16_29 * u_xlat16_28 + 1.0;\n    u_xlat16_6.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;\n    u_xlat8.x = u_xlat1.x * u_xlat16_28;\n    u_xlat16_4.xyz = u_xlat8.xxx * u_xlat16_4.xyz;\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nmediump float u_xlat16_10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_17;\nfloat u_xlat18;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat7.xyz = u_xlat6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat7.xyz = u_xlat6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat7.xyz = u_xlat6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat6.xyz = u_xlat6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat6.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_10 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_10 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat18 = max(u_xlat18, 0.00100000005);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat16_22 = u_xlat18 + u_xlat18;\n    u_xlat16_22 = u_xlat18 * u_xlat16_22;\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat18 + -0.5;\n    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat6.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat16_5.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_11 = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11;\n    u_xlat16_5.x = u_xlat16_22 * u_xlat16_5.x + 1.0;\n    u_xlat16_11 = (-u_xlat6.x) + 1.0;\n    u_xlat16_17 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_17;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_11 + 1.0;\n    u_xlat16_22 = u_xlat16_5.x * u_xlat16_22;\n    u_xlat0.x = u_xlat6.x * u_xlat16_22;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_22);\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nmediump float u_xlat16_11;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat8.xyz = u_xlat7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat7.xyz = u_xlat7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_11 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_11 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8.x + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8.x = u_xlat8.x * 0.318309873;\n    u_xlat21 = u_xlat8.x / u_xlat21;\n    u_xlat8.x = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8.x + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_25 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;\n    u_xlat16_25 = u_xlat16_5.x * u_xlat16_25 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat7.x = u_xlat1.x * u_xlat16_25;\n    u_xlat16_4.xyz = u_xlat7.xxx * u_xlat16_4.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nbool u_xlatb7;\nvec3 u_xlat8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_24;\nmediump float u_xlat16_25;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat7.xyz);\n    u_xlat7.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat14 = sqrt(u_xlat1.x);\n    u_xlat14 = u_xlat14 * _LightPositionRange.w;\n    u_xlat14 = u_xlat14 * _LightProjectionParams.w;\n    u_xlatb7 = u_xlat7.x<u_xlat14;\n    u_xlat16_3.x = (u_xlatb7) ? _LightShadowData.x : 1.0;\n    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat7.x = texture2D(_LightTextureB0, vec2(u_xlat21)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat7.x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat8.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat6.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat8.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat8.xyz, u_xlat2.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat22 = u_xlat21 * u_xlat15 + (-u_xlat21);\n    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat21 = u_xlat15 / u_xlat21;\n    u_xlat15 = (-u_xlat8.x) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);\n    u_xlat16_24 = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_25 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlatb22 = u_xlat16_25!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat2.xyz = u_xlat16_3.xyz * vec3(u_xlat21);\n    u_xlat16_25 = (-u_xlat7.x) + 1.0;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_4.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xyz;\n    u_xlat16_4.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat14 + -0.5;\n    u_xlat16_24 = u_xlat16_4.x * u_xlat16_24 + 1.0;\n    u_xlat16_11 = (-u_xlat0.x) + 1.0;\n    u_xlat16_18 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_24;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(u_xlat16_24);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_16;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_25;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat2.xyz);\n    u_xlat2.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat11 = sqrt(u_xlat29);\n    u_xlat11 = u_xlat11 * _LightPositionRange.w;\n    u_xlat11 = u_xlat11 * _LightProjectionParams.w;\n    u_xlatb2 = u_xlat2.x<u_xlat11;\n    u_xlat16_4.x = (u_xlatb2) ? _LightShadowData.x : 1.0;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.x = textureCube(_LightTexture0, u_xlat2.xyz).w;\n    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat27 = u_xlat16_4.x * u_xlat27;\n    u_xlat16_4.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = u_xlat3.xyz * vec3(u_xlat27) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat6.xyz, u_xlat5.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat29 = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat6.xyz, (-u_xlat2.xyz));\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat12.x = u_xlat20 * u_xlat20;\n    u_xlat21 = u_xlat27 * u_xlat12.x + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat27 = u_xlat12.x / u_xlat27;\n    u_xlat12.x = (-u_xlat20) + 1.0;\n    u_xlat21 = abs(u_xlat2.x) * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat3.x * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat20 * abs(u_xlat2.x);\n    u_xlat16_31 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat21 + u_xlat20;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat3.x * u_xlat27;\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_34 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb2 = u_xlat16_34!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat12.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_34 = (-u_xlat29) + 1.0;\n    u_xlat16_8.x = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat29 + u_xlat29;\n    u_xlat16_7.x = u_xlat29 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat11 + -0.5;\n    u_xlat16_31 = u_xlat16_7.x * u_xlat16_31 + 1.0;\n    u_xlat16_16 = (-u_xlat3.x) + 1.0;\n    u_xlat16_25 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_25;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_16 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat27 = u_xlat3.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_4.xyz + u_xlat12.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat11;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_14;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_23;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat2.xyz);\n    u_xlat2.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat11 = sqrt(u_xlat29);\n    u_xlat11 = u_xlat11 * _LightPositionRange.w;\n    u_xlat11 = u_xlat11 * _LightProjectionParams.w;\n    u_xlatb2 = u_xlat2.x<u_xlat11;\n    u_xlat16_4.x = (u_xlatb2) ? _LightShadowData.x : 1.0;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.x = textureCube(_LightTexture0, u_xlat2.xyz).w;\n    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat27 = u_xlat16_4.x * u_xlat27;\n    u_xlat16_4.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_5.xy = u_xlat16_5.xy * vec2(_BumpScale);\n    u_xlat16_6.xyz = u_xlat16_5.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyw = vs_TEXCOORD2.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vs_TEXCOORD4.xyz * u_xlat16_5.zzz + u_xlat16_5.xyw;\n    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat16_27 = inversesqrt(u_xlat16_27);\n    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat7.x = vs_TEXCOORD2.w;\n    u_xlat7.y = vs_TEXCOORD3.w;\n    u_xlat7.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat27) + (-u_xlat3.xyz);\n    u_xlat29 = dot(u_xlat16_2.xyz, (-u_xlat3.xyz));\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat7.xyz = vec3(u_xlat27) * u_xlat8.xyz;\n    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = dot(u_xlat3.xyz, u_xlat7.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat20 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat20 * u_xlat20;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat12 = u_xlat3.x * u_xlat3.x;\n    u_xlat21 = u_xlat27 * u_xlat12 + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat27 = u_xlat12 / u_xlat27;\n    u_xlat12 = (-u_xlat3.x) + 1.0;\n    u_xlat21 = abs(u_xlat29) * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat29) * u_xlat3.x;\n    u_xlat16_31 = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat2.x * u_xlat21 + u_xlat3.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_32 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_32!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_32 = (-u_xlat11) + 1.0;\n    u_xlat16_6.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_32) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat11 + u_xlat11;\n    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat20 + -0.5;\n    u_xlat16_31 = u_xlat16_5.x * u_xlat16_31 + 1.0;\n    u_xlat16_14 = (-u_xlat2.x) + 1.0;\n    u_xlat16_23 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_14 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat27 = u_xlat2.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat8.xyz);\n    u_xlat8.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat16 = sqrt(u_xlat1.x);\n    u_xlat16 = u_xlat16 * _LightPositionRange.w;\n    u_xlat16 = u_xlat16 * _LightProjectionParams.w;\n    u_xlatb8 = u_xlat8.x<u_xlat16;\n    u_xlat16_3.x = (u_xlatb8) ? _LightShadowData.x : 1.0;\n    u_xlat16_11 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_11 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat8.x = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat2.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9) + 1.0;\n    u_xlat2.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9;\n    u_xlat9 = u_xlat1.x * u_xlat17 + u_xlat9;\n    u_xlat9 = abs(u_xlat0.x) * u_xlat9;\n    u_xlat16_27 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat2.x + u_xlat9;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_27 = u_xlat16_5.x * u_xlat16_27 + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_5.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_27;\n    u_xlat16_3.xyz = vec3(u_xlat16) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat8.xyz);\n    u_xlat8.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat16 = sqrt(u_xlat1.x);\n    u_xlat16 = u_xlat16 * _LightPositionRange.w;\n    u_xlat16 = u_xlat16 * _LightProjectionParams.w;\n    u_xlatb8 = u_xlat8.x<u_xlat16;\n    u_xlat16_3.x = (u_xlatb8) ? _LightShadowData.x : 1.0;\n    u_xlat16_11 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_11 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat8.x = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8.x * u_xlat8.x;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9 + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat24 = u_xlat9 / u_xlat24;\n    u_xlat9 = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_27 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_29;\n    u_xlat16_29 = u_xlat25 + u_xlat25;\n    u_xlat16_29 = u_xlat25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8.x + -0.5;\n    u_xlat16_27 = u_xlat16_29 * u_xlat16_27 + 1.0;\n    u_xlat16_6.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_29;\n    u_xlat8.x = u_xlat1.x * u_xlat16_27;\n    u_xlat16_3.xyz = u_xlat8.xxx * u_xlat16_3.xyz;\n    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat15 + u_xlat15;\n    u_xlat16_3.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_13 = (-u_xlat5.x) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat5.x * u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = sqrt(u_xlat5.x);\n    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat5.x = (-u_xlat10) + u_xlat5.x;\n    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10;\n    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat1.xyz);\n    u_xlat15 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10 = sqrt(u_xlat10);\n    u_xlat10 = u_xlat10 * _LightPositionRange.w;\n    u_xlat10 = u_xlat10 * _LightProjectionParams.w;\n    u_xlatb10 = u_xlat15<u_xlat10;\n    u_xlat16_3.x = (u_xlatb10) ? _LightShadowData.x : 1.0;\n    u_xlat16_8 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat5.x * u_xlat16_8 + u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = textureCube(_LightTexture0, u_xlat5.xyz).w;\n    u_xlat10 = texture2D(_LightTextureB0, u_xlat1.xx).x;\n    u_xlat5.x = u_xlat5.x * u_xlat10;\n    u_xlat5.x = u_xlat16_3.x * u_xlat5.x;\n    u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nbool u_xlatb7;\nfloat u_xlat8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_24;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat7.xyz);\n    u_xlat7.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat14 = sqrt(u_xlat1.x);\n    u_xlat14 = u_xlat14 * _LightPositionRange.w;\n    u_xlat14 = u_xlat14 * _LightProjectionParams.w;\n    u_xlatb7 = u_xlat7.x<u_xlat14;\n    u_xlat16_3.x = (u_xlatb7) ? _LightShadowData.x : 1.0;\n    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat7.x = texture2D(_LightTextureB0, vec2(u_xlat21)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat7.x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_24 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;\n    u_xlat16_24 = u_xlat16_5.x * u_xlat16_24 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat7.x = u_xlat1.x * u_xlat16_24;\n    u_xlat16_3.xyz = u_xlat7.xxx * u_xlat16_3.xyz;\n    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_24);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nmediump float u_xlat16_11;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat8.xyz = u_xlat7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat7.xyz = u_xlat7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_11 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_11 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat7.x = texture2D(_LightTextureB0, vec2(u_xlat21)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat7.x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_5.xy = u_xlat16_5.xy * vec2(_BumpScale);\n    u_xlat16_6.xyz = u_xlat16_5.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyw = vs_TEXCOORD2.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vs_TEXCOORD4.xyz * u_xlat16_5.zzz + u_xlat16_5.xyw;\n    u_xlat16_0.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat8.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat8.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat8.xyz, u_xlat2.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat22 = u_xlat21 * u_xlat15 + (-u_xlat21);\n    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat21 = u_xlat15 / u_xlat21;\n    u_xlat15 = (-u_xlat8.x) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);\n    u_xlat16_25 = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_26!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat2.xyz = u_xlat16_4.xyz * vec3(u_xlat21);\n    u_xlat16_26 = (-u_xlat7.x) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_25 = u_xlat16_5.x * u_xlat16_25 + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_25;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nvec3 u_xlat12;\nmediump float u_xlat16_14;\nmediump float u_xlat16_16;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_25;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat29 = u_xlat29 * _LightPositionRange.w;\n    u_xlat29 = u_xlat29 * _LightProjectionParams.w;\n    u_xlat3.xyz = u_xlat2.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_4 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);\n    u_xlat1.w = dot(u_xlat10_4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat29));\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_5.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_14 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = u_xlat27 * u_xlat16_14 + u_xlat16_5.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.x = textureCube(_LightTexture0, u_xlat2.xyz).w;\n    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat27 = u_xlat16_5.x * u_xlat27;\n    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat27) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat6.xyz, u_xlat4.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat29 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat6.xyz, (-u_xlat2.xyz));\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat12.x = u_xlat20 * u_xlat20;\n    u_xlat21 = u_xlat27 * u_xlat12.x + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat27 = u_xlat12.x / u_xlat27;\n    u_xlat12.x = (-u_xlat20) + 1.0;\n    u_xlat21 = abs(u_xlat2.x) * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat3.x * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat20 * abs(u_xlat2.x);\n    u_xlat16_32 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat21 + u_xlat20;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat3.x * u_xlat27;\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_34 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb2 = u_xlat16_34!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat12.xyz = u_xlat16_5.xyz * vec3(u_xlat27);\n    u_xlat16_34 = (-u_xlat29) + 1.0;\n    u_xlat16_8.x = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat29 + u_xlat29;\n    u_xlat16_7.x = u_xlat29 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat11 + -0.5;\n    u_xlat16_32 = u_xlat16_7.x * u_xlat16_32 + 1.0;\n    u_xlat16_16 = (-u_xlat3.x) + 1.0;\n    u_xlat16_25 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_25;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_16 + 1.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;\n    u_xlat27 = u_xlat3.x * u_xlat16_32;\n    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_32);\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz + u_xlat12.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nmediump float u_xlat16_15;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_24;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat29 = u_xlat29 * _LightPositionRange.w;\n    u_xlat29 = u_xlat29 * _LightProjectionParams.w;\n    u_xlat3.xyz = u_xlat2.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_4 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);\n    u_xlat1.w = dot(u_xlat10_4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat29));\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_5.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_14 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = u_xlat27 * u_xlat16_14 + u_xlat16_5.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.x = textureCube(_LightTexture0, u_xlat2.xyz).w;\n    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat27 = u_xlat16_5.x * u_xlat27;\n    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_6.xy = u_xlat16_6.xy * vec2(_BumpScale);\n    u_xlat16_7.xyz = u_xlat16_6.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyw = vs_TEXCOORD2.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vs_TEXCOORD4.xyz * u_xlat16_6.zzz + u_xlat16_6.xyw;\n    u_xlat16_27 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlat16_27 = inversesqrt(u_xlat16_27);\n    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat4.x = vs_TEXCOORD2.w;\n    u_xlat4.y = vs_TEXCOORD3.w;\n    u_xlat4.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat27) + (-u_xlat3.xyz);\n    u_xlat29 = dot(u_xlat16_2.xyz, (-u_xlat3.xyz));\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat8.xyz;\n    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat20 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat20 * u_xlat20;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat12 = u_xlat3.x * u_xlat3.x;\n    u_xlat21 = u_xlat27 * u_xlat12 + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat27 = u_xlat12 / u_xlat27;\n    u_xlat12 = (-u_xlat3.x) + 1.0;\n    u_xlat21 = abs(u_xlat29) * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat29) * u_xlat3.x;\n    u_xlat16_32 = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat2.x * u_xlat21 + u_xlat3.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb29 = u_xlat16_33!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat3.xyz = u_xlat16_5.xyz * vec3(u_xlat27);\n    u_xlat16_33 = (-u_xlat11) + 1.0;\n    u_xlat16_7.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat11 + u_xlat11;\n    u_xlat16_6.x = u_xlat11 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat20 + -0.5;\n    u_xlat16_32 = u_xlat16_6.x * u_xlat16_32 + 1.0;\n    u_xlat16_15 = (-u_xlat2.x) + 1.0;\n    u_xlat16_24 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_24;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_15 + 1.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat27 = u_xlat2.x * u_xlat16_32;\n    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_32);\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nvec3 u_xlat9;\nmediump float u_xlat16_12;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat9.xyz = u_xlat8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat8.xyz = u_xlat8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat8.x = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9.x = u_xlat16 * u_xlat16;\n    u_xlat9.x = max(u_xlat9.x, 0.00200000009);\n    u_xlat17 = u_xlat9.x * u_xlat9.x;\n    u_xlat2.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9.x) + 1.0;\n    u_xlat2.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9.x;\n    u_xlat9.x = u_xlat1.x * u_xlat17 + u_xlat9.x;\n    u_xlat9.x = abs(u_xlat0.x) * u_xlat9.x;\n    u_xlat16_28 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat2.x + u_xlat9.x;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_28 = u_xlat16_5.x * u_xlat16_28 + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_28;\n    u_xlat16_4.xyz = vec3(u_xlat16) * u_xlat16_4.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nmediump float u_xlat16_12;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat9.xyz = u_xlat8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat8.xyz = u_xlat8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat8.x = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8.x * u_xlat8.x;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9.x = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9.x + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9.x = u_xlat9.x * 0.318309873;\n    u_xlat24 = u_xlat9.x / u_xlat24;\n    u_xlat9.x = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9.x + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9.x + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_28 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;\n    u_xlat16_29 = u_xlat25 + u_xlat25;\n    u_xlat16_29 = u_xlat25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8.x + -0.5;\n    u_xlat16_28 = u_xlat16_29 * u_xlat16_28 + 1.0;\n    u_xlat16_6.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;\n    u_xlat8.x = u_xlat1.x * u_xlat16_28;\n    u_xlat16_4.xyz = u_xlat8.xxx * u_xlat16_4.xyz;\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nmediump float u_xlat16_10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_17;\nfloat u_xlat18;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat7.xyz = u_xlat6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat7.xyz = u_xlat6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat7.xyz = u_xlat6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat6.xyz = u_xlat6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat6.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_10 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_10 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat6.x = texture2D(_LightTextureB0, vec2(u_xlat18)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat6.x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat18 = max(u_xlat18, 0.00100000005);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat16_22 = u_xlat18 + u_xlat18;\n    u_xlat16_22 = u_xlat18 * u_xlat16_22;\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat18 + -0.5;\n    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat6.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat16_5.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_11 = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11;\n    u_xlat16_5.x = u_xlat16_22 * u_xlat16_5.x + 1.0;\n    u_xlat16_11 = (-u_xlat6.x) + 1.0;\n    u_xlat16_17 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_17;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_11 + 1.0;\n    u_xlat16_22 = u_xlat16_5.x * u_xlat16_22;\n    u_xlat0.x = u_xlat6.x * u_xlat16_22;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_22);\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nmediump float u_xlat16_11;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat8.xyz = u_xlat7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat7.xyz = u_xlat7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_11 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_11 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat7.x = texture2D(_LightTextureB0, vec2(u_xlat21)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat7.x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8.x + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8.x = u_xlat8.x * 0.318309873;\n    u_xlat21 = u_xlat8.x / u_xlat21;\n    u_xlat8.x = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8.x + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_25 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;\n    u_xlat16_25 = u_xlat16_5.x * u_xlat16_25 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat7.x = u_xlat1.x * u_xlat16_25;\n    u_xlat16_4.xyz = u_xlat7.xxx * u_xlat16_4.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat10;\nfloat u_xlat14;\nmediump float u_xlat16_15;\nfloat u_xlat17;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_2.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_0.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat4.x = vs_TEXCOORD2.w;\n    u_xlat4.y = vs_TEXCOORD3.w;\n    u_xlat4.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + (-u_xlat3.xyz);\n    u_xlat3.x = dot(u_xlat16_0.xyz, (-u_xlat3.xyz));\n    u_xlat10.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat10.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat10.xyz, u_xlat4.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat10.x = u_xlat14 * u_xlat14;\n    u_xlat10.x = max(u_xlat10.x, 0.00200000009);\n    u_xlat17 = u_xlat10.x * u_xlat10.x;\n    u_xlat24 = u_xlat21 * u_xlat17 + (-u_xlat21);\n    u_xlat21 = u_xlat24 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat21 = u_xlat17 / u_xlat21;\n    u_xlat17 = (-u_xlat10.x) + 1.0;\n    u_xlat24 = abs(u_xlat3.x) * u_xlat17 + u_xlat10.x;\n    u_xlat10.x = u_xlat0.x * u_xlat17 + u_xlat10.x;\n    u_xlat10.x = u_xlat10.x * abs(u_xlat3.x);\n    u_xlat16_1.x = -abs(u_xlat3.x) + 1.0;\n    u_xlat3.x = u_xlat0.x * u_xlat24 + u_xlat10.x;\n    u_xlat3.x = u_xlat3.x + 9.99999975e-06;\n    u_xlat3.x = 0.5 / u_xlat3.x;\n    u_xlat21 = u_xlat21 * u_xlat3.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_8.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_2.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);\n    u_xlatb24 = u_xlat16_2.x!=0.0;\n    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat24;\n    u_xlat4.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;\n    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = texture2D(_LightTexture0, vec2(u_xlat24)).x;\n    u_xlat16_2.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat16_2.xyz;\n    u_xlat16_23 = (-u_xlat7) + 1.0;\n    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_8.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_8.xyz;\n    u_xlat4.xyz = u_xlat16_8.xyz * u_xlat4.xyz;\n    u_xlat16_8.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;\n    u_xlat16_8.x = u_xlat7 + u_xlat7;\n    u_xlat16_8.x = u_xlat7 * u_xlat16_8.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat14 + -0.5;\n    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x + 1.0;\n    u_xlat16_15 = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_22;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_15 + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat4.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nvec3 u_xlat11;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat19;\nfloat u_xlat24;\nbool u_xlatb24;\nfloat u_xlat26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat24) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat5.xyz, u_xlat4.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat26 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat5.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));\n    u_xlat10 = (-_Glossiness) + 1.0;\n    u_xlat18 = u_xlat10 * u_xlat10;\n    u_xlat18 = max(u_xlat18, 0.00200000009);\n    u_xlat11.x = u_xlat18 * u_xlat18;\n    u_xlat19 = u_xlat24 * u_xlat11.x + (-u_xlat24);\n    u_xlat24 = u_xlat19 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat11.x = u_xlat11.x * 0.318309873;\n    u_xlat24 = u_xlat11.x / u_xlat24;\n    u_xlat11.x = (-u_xlat18) + 1.0;\n    u_xlat19 = abs(u_xlat2.x) * u_xlat11.x + u_xlat18;\n    u_xlat18 = u_xlat3.x * u_xlat11.x + u_xlat18;\n    u_xlat18 = u_xlat18 * abs(u_xlat2.x);\n    u_xlat16_1 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat19 + u_xlat18;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat3.x * u_xlat24;\n    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb2 = u_xlat16_6.x!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat11.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat11.xyz;\n    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);\n    u_xlat2.x = texture2D(_LightTexture0, u_xlat2.xx).x;\n    u_xlat16_6.xyz = u_xlat2.xxx * _LightColor0.xyz;\n    u_xlat11.xyz = vec3(u_xlat24) * u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat26) + 1.0;\n    u_xlat16_7.x = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_9.xyz;\n    u_xlat11.xyz = u_xlat16_9.xyz * u_xlat11.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_9.xxx;\n    u_xlat16_30 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat16_30 = u_xlat26 + u_xlat26;\n    u_xlat16_30 = u_xlat26 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * u_xlat10 + -0.5;\n    u_xlat16_1 = u_xlat16_30 * u_xlat16_1 + 1.0;\n    u_xlat16_7.x = (-u_xlat3.x) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat0.x = u_xlat3.x * u_xlat16_1;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz + u_xlat11.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat20;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nbool u_xlatb24;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_3.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_24 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_24 = inversesqrt(u_xlat16_24);\n    u_xlat16_2.xyz = vec3(u_xlat16_24) * u_xlat16_1.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat5.x = vs_TEXCOORD2.w;\n    u_xlat5.y = vs_TEXCOORD3.w;\n    u_xlat5.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-u_xlat4.xyz);\n    u_xlat26 = dot(u_xlat16_2.xyz, (-u_xlat4.xyz));\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;\n    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz;\n    u_xlat24 = dot(u_xlat16_2.xyz, u_xlat5.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2 = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat4.x = u_xlat18 * u_xlat18;\n    u_xlat4.x = max(u_xlat4.x, 0.00200000009);\n    u_xlat12 = u_xlat4.x * u_xlat4.x;\n    u_xlat20 = u_xlat24 * u_xlat12 + (-u_xlat24);\n    u_xlat24 = u_xlat20 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat24 = u_xlat12 / u_xlat24;\n    u_xlat12 = (-u_xlat4.x) + 1.0;\n    u_xlat20 = abs(u_xlat26) * u_xlat12 + u_xlat4.x;\n    u_xlat4.x = u_xlat2 * u_xlat12 + u_xlat4.x;\n    u_xlat4.x = abs(u_xlat26) * u_xlat4.x;\n    u_xlat16_1.x = -abs(u_xlat26) + 1.0;\n    u_xlat26 = u_xlat2 * u_xlat20 + u_xlat4.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 / u_xlat26;\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2 * u_xlat24;\n    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_3.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb26 = u_xlat16_3.x!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat4.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;\n    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat26 = texture2D(_LightTexture0, vec2(u_xlat26)).x;\n    u_xlat16_3.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat16_3.xyz;\n    u_xlat16_27 = (-u_xlat10) + 1.0;\n    u_xlat16_7.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_9.xyz;\n    u_xlat4.xyz = u_xlat16_9.xyz * u_xlat4.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_9.xxx;\n    u_xlat16_27 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;\n    u_xlat16_27 = u_xlat10 + u_xlat10;\n    u_xlat16_27 = u_xlat10 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat18 + -0.5;\n    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x + 1.0;\n    u_xlat16_7.x = (-u_xlat2) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_7.x + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;\n    u_xlat0.x = u_xlat2 * u_xlat16_1.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat4.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_20;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat2.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9) + 1.0;\n    u_xlat2.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9;\n    u_xlat9 = u_xlat1.x * u_xlat17 + u_xlat9;\n    u_xlat9 = abs(u_xlat0.x) * u_xlat9;\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat2.x + u_xlat9;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_12.xyz = u_xlat10_8.xxx * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;\n    u_xlat16_29 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8 * u_xlat0.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat8 = texture2D(_LightTexture0, vec2(u_xlat8)).x;\n    u_xlat16_6.xyz = vec3(u_xlat8) * _LightColor0.xyz;\n    u_xlat0.xyw = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_12.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_12.xyz;\n    u_xlat16_12.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12.x;\n    u_xlat16_12.x = u_xlat25 + u_xlat25;\n    u_xlat16_12.x = u_xlat25 * u_xlat16_12.x;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16 + -0.5;\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x + 1.0;\n    u_xlat16_20 = (-u_xlat1.x) + 1.0;\n    u_xlat16_28 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_20 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = vec3(u_xlat16) * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_12;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat8 = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8 * u_xlat8;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9 + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat24 = u_xlat9 / u_xlat24;\n    u_xlat9 = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_12.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_5.x = (-u_xlat10_16) + 1.0;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat10_16) + u_xlat16_5.xxx;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_12.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_2.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = texture2D(_LightTexture0, vec2(u_xlat16)).x;\n    u_xlat16_6.xyz = vec3(u_xlat16) * _LightColor0.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat8 + -0.5;\n    u_xlat16_4.x = u_xlat16_5.x * u_xlat16_4.x + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;\n    u_xlat8 = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_5.xyz = vec3(u_xlat8) * u_xlat16_6.xyz;\n    u_xlat16_4.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat15 + u_xlat15;\n    u_xlat16_3.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_13 = (-u_xlat5.x) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat5.x * u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xx).x;\n    u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    u_xlat1.x = u_xlat1.z * unity_FogParams.x;\n    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);\n    vs_TEXCOORD1.w = exp2(u_xlat1.x);\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7 * u_xlat7;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_11.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb14 = u_xlat16_5.x!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat3.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat14 = texture2D(_LightTexture0, vec2(u_xlat14)).x;\n    u_xlat16_5.xyz = vec3(u_xlat14) * _LightColor0.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_11.xyz;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat22 + u_xlat22;\n    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat7 + -0.5;\n    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x + 1.0;\n    u_xlat16_18 = (-u_xlat1.x) + 1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat7 = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = vec3(u_xlat7) * u_xlat16_5.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat0.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);\n    vs_TEXCOORD1.w = exp2(u_xlat0.x);\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    u_xlat2.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.w = u_xlat2.x;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat1.yzx * u_xlat0.zxy;\n    u_xlat16_3.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat16_3.xyz);\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_3.xyz;\n    vs_TEXCOORD3.w = u_xlat2.y;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nfloat u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nbool u_xlatb21;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_2.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_0.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;\n    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;\n    u_xlat18 = dot(u_xlat16_0.xyz, (-u_xlat5.xyz));\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat3.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat12 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat12 * u_xlat12;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat9 = u_xlat3.x * u_xlat3.x;\n    u_xlat15 = u_xlat21 * u_xlat9 + (-u_xlat21);\n    u_xlat15 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat9 = u_xlat9 / u_xlat15;\n    u_xlat15 = (-u_xlat3.x) + 1.0;\n    u_xlat21 = abs(u_xlat18) * u_xlat15 + u_xlat3.x;\n    u_xlat3.x = u_xlat0.x * u_xlat15 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat18) * u_xlat3.x;\n    u_xlat16_1.x = -abs(u_xlat18) + 1.0;\n    u_xlat18 = u_xlat0.x * u_xlat21 + u_xlat3.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat18 = u_xlat9 * u_xlat18;\n    u_xlat18 = u_xlat18 * 3.14159274;\n    u_xlat18 = max(u_xlat18, 9.99999975e-05);\n    u_xlat18 = sqrt(u_xlat18);\n    u_xlat18 = u_xlat0.x * u_xlat18;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_7.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_2.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb21 = u_xlat16_2.x!=0.0;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat18 = u_xlat18 * u_xlat21;\n    u_xlat4.xyz = vec3(u_xlat18) * _LightColor0.xyz;\n    u_xlat16_2.x = (-u_xlat6) + 1.0;\n    u_xlat16_8.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * u_xlat16_2.xxx + u_xlat16_7.xyz;\n    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat4.xyz;\n    u_xlat16_7.x = u_xlat6 + u_xlat6;\n    u_xlat16_7.x = u_xlat6 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat12 + -0.5;\n    u_xlat16_13 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13;\n    u_xlat16_1.x = u_xlat16_7.x * u_xlat16_1.x + 1.0;\n    u_xlat16_13 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_19;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_13 + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_19 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_2.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat4.xyz;\n    u_xlat18 = vs_TEXCOORD1.w;\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat0.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);\n    vs_TEXCOORD1.w = exp2(u_xlat0.x);\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_20;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat23;\nbool u_xlatb23;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb21 = u_xlat16_1<0.0;\n    if(u_xlatb21){discard;}\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, (-u_xlat5.xyz));\n    u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat23 = max(u_xlat23, 0.00100000005);\n    u_xlat23 = inversesqrt(u_xlat23);\n    u_xlat4.xyz = vec3(u_xlat23) * u_xlat4.xyz;\n    u_xlat23 = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat9 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat16 * u_xlat16;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat10 = u_xlat3.x * u_xlat3.x;\n    u_xlat17 = u_xlat23 * u_xlat10 + (-u_xlat23);\n    u_xlat23 = u_xlat17 * u_xlat23 + 1.0;\n    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;\n    u_xlat10 = u_xlat10 * 0.318309873;\n    u_xlat23 = u_xlat10 / u_xlat23;\n    u_xlat10 = (-u_xlat3.x) + 1.0;\n    u_xlat17 = abs(u_xlat21) * u_xlat10 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat10 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat21) * u_xlat3.x;\n    u_xlat16_1 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat2.x * u_xlat17 + u_xlat3.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat23 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat2.x * u_xlat21;\n    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);\n    u_xlatb23 = u_xlat16_6.x!=0.0;\n    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat23;\n    u_xlat3.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_6.x = (-u_xlat9) + 1.0;\n    u_xlat16_13.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_13.x;\n    u_xlat16_13.xyz = (-u_xlat16_8.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_13.xyz * u_xlat16_6.xxx + u_xlat16_8.xyz;\n    u_xlat3.xyz = u_xlat16_8.xyz * u_xlat3.xyz;\n    u_xlat16_8.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xyz * u_xlat16_8.xxx;\n    u_xlat16_6.x = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat9 + u_xlat9;\n    u_xlat16_6.x = u_xlat9 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16 + -0.5;\n    u_xlat16_1 = u_xlat16_6.x * u_xlat16_1 + 1.0;\n    u_xlat16_13.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_20 = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_20;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_13.x + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_6.x;\n    u_xlat0.x = u_xlat2.x * u_xlat16_1;\n    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz + u_xlat3.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_10;\nfloat u_xlat11;\nfloat u_xlat16;\nmediump float u_xlat16_17;\nfloat u_xlat18;\nfloat u_xlat21;\nmediump float u_xlat16_21;\nbool u_xlatb21;\nfloat u_xlat23;\nbool u_xlatb23;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb21 = u_xlat16_1.x<0.0;\n    if(u_xlatb21){discard;}\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_3.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_21 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_21 = inversesqrt(u_xlat16_21);\n    u_xlat16_2.xyz = vec3(u_xlat16_21) * u_xlat16_1.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.x = vs_TEXCOORD2.w;\n    u_xlat4.y = vs_TEXCOORD3.w;\n    u_xlat4.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat4.xyz;\n    u_xlat6.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat16_2.xyz, (-u_xlat6.xyz));\n    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat23 = max(u_xlat23, 0.00100000005);\n    u_xlat23 = inversesqrt(u_xlat23);\n    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz;\n    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat5.xyz);\n    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);\n    u_xlat2 = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);\n    u_xlat9 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16 = (-_Glossiness) + 1.0;\n    u_xlat4.x = u_xlat16 * u_xlat16;\n    u_xlat4.x = max(u_xlat4.x, 0.00200000009);\n    u_xlat11 = u_xlat4.x * u_xlat4.x;\n    u_xlat18 = u_xlat23 * u_xlat11 + (-u_xlat23);\n    u_xlat23 = u_xlat18 * u_xlat23 + 1.0;\n    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;\n    u_xlat11 = u_xlat11 * 0.318309873;\n    u_xlat23 = u_xlat11 / u_xlat23;\n    u_xlat11 = (-u_xlat4.x) + 1.0;\n    u_xlat18 = abs(u_xlat21) * u_xlat11 + u_xlat4.x;\n    u_xlat4.x = u_xlat2 * u_xlat11 + u_xlat4.x;\n    u_xlat4.x = abs(u_xlat21) * u_xlat4.x;\n    u_xlat16_1.x = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat2 * u_xlat18 + u_xlat4.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat23 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat2 * u_xlat21;\n    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_3.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);\n    u_xlatb23 = u_xlat16_3.x!=0.0;\n    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat23;\n    u_xlat4.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_3.x = (-u_xlat9) + 1.0;\n    u_xlat16_10.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x;\n    u_xlat16_10.xyz = (-u_xlat16_8.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_10.xyz * u_xlat16_3.xxx + u_xlat16_8.xyz;\n    u_xlat4.xyz = u_xlat16_8.xyz * u_xlat4.xyz;\n    u_xlat16_8.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat16_0.xyz * u_xlat16_8.xxx;\n    u_xlat16_3.x = u_xlat9 + u_xlat9;\n    u_xlat16_3.x = u_xlat9 * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16 + -0.5;\n    u_xlat16_10.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10.x;\n    u_xlat16_1.x = u_xlat16_3.x * u_xlat16_1.x + 1.0;\n    u_xlat16_10.x = (-u_xlat2) + 1.0;\n    u_xlat16_17 = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_17;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10.x + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;\n    u_xlat0.x = u_xlat2 * u_xlat16_1.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_8.xyz * u_xlat16_3.xyz + u_xlat4.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec2 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_8;\nlowp vec3 u_xlat10_8;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat10_1.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat14 = (-u_xlat10_1.y) * _GlossMapScale + 1.0;\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat8 = max(u_xlat8, 0.00200000009);\n    u_xlat15 = u_xlat8 * u_xlat8;\n    u_xlat2.x = u_xlat22 * u_xlat15 + (-u_xlat22);\n    u_xlat22 = u_xlat2.x * u_xlat22 + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat15 = u_xlat15 / u_xlat22;\n    u_xlat22 = (-u_xlat8) + 1.0;\n    u_xlat2.x = abs(u_xlat21) * u_xlat22 + u_xlat8;\n    u_xlat8 = u_xlat0.x * u_xlat22 + u_xlat8;\n    u_xlat8 = abs(u_xlat21) * u_xlat8;\n    u_xlat16_4.x = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat2.x + u_xlat8;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat15 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_8.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_11.xyz = _Color.xyz * u_xlat10_8.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_8.xyz = u_xlat10_8.xyz * _Color.xyz;\n    u_xlat16_11.xyz = u_xlat10_1.xxx * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_8.xyz * u_xlat16_5.xxx;\n    u_xlat16_26 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb1 = u_xlat16_26!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_26 = (-u_xlat7) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_11.xyz;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat7 + u_xlat7;\n    u_xlat16_11.x = u_xlat7 * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat14 + -0.5;\n    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x + 1.0;\n    u_xlat16_18 = (-u_xlat0.x) + 1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat1.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump float u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_26;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_4 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_11.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat10_1.x = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_5.x = (-u_xlat10_1.x) + 1.0;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat10_1.xxx + u_xlat16_5.xxx;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_11.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_1.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_26!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_26 = (-u_xlat7) + 1.0;\n    u_xlat16_27 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_27;\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * u_xlat16_5.xxx;\n    u_xlat16_5.x = u_xlat16_4 * u_xlat16_4;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_4 = u_xlat16_4 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7 + u_xlat7;\n    u_xlat16_5.x = u_xlat7 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_4 = u_xlat16_5.x * u_xlat16_4 + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_4 = u_xlat16_4 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4;\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_11.xyz * u_xlat16_5.xyz + u_xlat1.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat0.x + -0.5;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = (-u_xlat15) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_18 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13;\n    u_xlat0.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nfloat u_xlat19;\nbool u_xlatb19;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;\n    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat19 = max(u_xlat19, 0.00100000005);\n    u_xlat19 = inversesqrt(u_xlat19);\n    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;\n    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat12 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat12 * u_xlat12;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat7 = u_xlat1.x * u_xlat1.x;\n    u_xlat13 = u_xlat19 * u_xlat7 + (-u_xlat19);\n    u_xlat13 = u_xlat13 * u_xlat19 + 1.0;\n    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;\n    u_xlat7 = u_xlat7 * 0.318309873;\n    u_xlat7 = u_xlat7 / u_xlat13;\n    u_xlat13 = (-u_xlat1.x) + 1.0;\n    u_xlat19 = abs(u_xlat18) * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat18) * u_xlat1.x;\n    u_xlat16_4.x = -abs(u_xlat18) + 1.0;\n    u_xlat18 = u_xlat0.x * u_xlat19 + u_xlat1.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat18 = u_xlat7 * u_xlat18;\n    u_xlat18 = u_xlat18 * 3.14159274;\n    u_xlat18 = max(u_xlat18, 9.99999975e-05);\n    u_xlat18 = sqrt(u_xlat18);\n    u_xlat18 = u_xlat0.x * u_xlat18;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_10.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n    u_xlatb19 = u_xlat16_5.x!=0.0;\n    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);\n    u_xlat18 = u_xlat18 * u_xlat19;\n    u_xlat2.xyz = vec3(u_xlat18) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat6) + 1.0;\n    u_xlat16_11.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = (-u_xlat16_10.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_11.xyz * u_xlat16_5.xxx + u_xlat16_10.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_10.xyz;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat16_10.x = u_xlat6 + u_xlat6;\n    u_xlat16_10.x = u_xlat6 * u_xlat16_10.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat12 + -0.5;\n    u_xlat16_4.x = u_xlat16_10.x * u_xlat16_4.x + 1.0;\n    u_xlat16_16 = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_22;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_16 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_22);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    u_xlat18 = vs_TEXCOORD1.w;\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    u_xlat1.x = u_xlat1.z * unity_FogParams.x;\n    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);\n    vs_TEXCOORD1.w = exp2(u_xlat1.x);\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    vs_TEXCOORD2.xyz = u_xlat2.xyz;\n    u_xlat3.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = u_xlat3.x;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16_4.xyz = u_xlat2.yzx * u_xlat1.zxy;\n    u_xlat16_4.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat16_4.xyz);\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_4.xyz = u_xlat1.xxx * u_xlat16_4.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD3.w = u_xlat3.y;\n    vs_TEXCOORD4.w = u_xlat3.z;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nfloat u_xlat7;\nvec3 u_xlat8;\nmediump float u_xlat16_10;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_24;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat21 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * u_xlat16_3.zzz + u_xlat16_3.xyw;\n    u_xlat16_0.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat5.x = vs_TEXCOORD2.w;\n    u_xlat5.y = vs_TEXCOORD3.w;\n    u_xlat5.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat21) + (-u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat8.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat6.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat5.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat8.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat8.xyz, u_xlat5.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat22 = u_xlat21 * u_xlat15 + (-u_xlat21);\n    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat21 = u_xlat15 / u_xlat21;\n    u_xlat15 = (-u_xlat8.x) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);\n    u_xlat16_23 = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb22 = u_xlat16_24!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat5.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_24 = (-u_xlat7) + 1.0;\n    u_xlat16_4.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;\n    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat5.xyz;\n    u_xlat16_3.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat7 + u_xlat7;\n    u_xlat16_3.x = u_xlat7 * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat14 + -0.5;\n    u_xlat16_23 = u_xlat16_3.x * u_xlat16_23 + 1.0;\n    u_xlat16_10 = (-u_xlat0.x) + 1.0;\n    u_xlat16_17 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_17;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat5.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    u_xlat1.x = u_xlat1.z * unity_FogParams.x;\n    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);\n    vs_TEXCOORD1.w = exp2(u_xlat1.x);\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nvec3 u_xlat13;\nmediump float u_xlat16_17;\nfloat u_xlat20;\nfloat u_xlat22;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);\n    u_xlat27 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlatb2 = 0.0<u_xlat1.z;\n    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat11 = texture2D(_LightTextureB0, vec2(u_xlat11)).x;\n    u_xlat16_3.x = (u_xlatb2) ? 1.0 : 0.0;\n    u_xlat16_3.x = u_xlat27 * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat4.x = vs_TEXCOORD2.w;\n    u_xlat4.y = vs_TEXCOORD3.w;\n    u_xlat4.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat27) + (-u_xlat2.xyz);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat6.xyz, u_xlat5.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat29 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);\n    u_xlat4.x = dot(u_xlat6.xyz, u_xlat4.xyz);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat6.xyz, (-u_xlat2.xyz));\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat13.x = u_xlat20 * u_xlat20;\n    u_xlat22 = u_xlat27 * u_xlat13.x + (-u_xlat27);\n    u_xlat27 = u_xlat22 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat13.x = u_xlat13.x * 0.318309873;\n    u_xlat27 = u_xlat13.x / u_xlat27;\n    u_xlat13.x = (-u_xlat20) + 1.0;\n    u_xlat22 = abs(u_xlat2.x) * u_xlat13.x + u_xlat20;\n    u_xlat20 = u_xlat4.x * u_xlat13.x + u_xlat20;\n    u_xlat20 = u_xlat20 * abs(u_xlat2.x);\n    u_xlat16_30 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat4.x * u_xlat22 + u_xlat20;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat4.x * u_xlat27;\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_34 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb2 = u_xlat16_34!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat13.xyz = u_xlat16_3.xyz * vec3(u_xlat27);\n    u_xlat16_34 = (-u_xlat29) + 1.0;\n    u_xlat16_8.x = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat13.xyz = u_xlat13.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_7.xxx;\n    u_xlat16_34 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_34;\n    u_xlat16_34 = u_xlat29 + u_xlat29;\n    u_xlat16_34 = u_xlat29 * u_xlat16_34;\n    u_xlat16_34 = u_xlat16_34 * u_xlat11 + -0.5;\n    u_xlat16_30 = u_xlat16_34 * u_xlat16_30 + 1.0;\n    u_xlat16_8.x = (-u_xlat4.x) + 1.0;\n    u_xlat16_17 = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_17;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x + 1.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_34;\n    u_xlat0.x = u_xlat4.x * u_xlat16_30;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_3.xyz + u_xlat13.xyz;\n    u_xlat27 = vs_TEXCOORD1.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nvec2 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat11;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nfloat u_xlat20;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);\n    u_xlat27 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlatb2 = 0.0<u_xlat1.z;\n    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat11 = texture2D(_LightTextureB0, vec2(u_xlat11)).x;\n    u_xlat16_3.x = (u_xlatb2) ? 1.0 : 0.0;\n    u_xlat16_3.x = u_xlat27 * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_27 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_27 = inversesqrt(u_xlat16_27);\n    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_4.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat7.x = vs_TEXCOORD2.w;\n    u_xlat7.y = vs_TEXCOORD3.w;\n    u_xlat7.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat27) + (-u_xlat6.xyz);\n    u_xlat29 = dot(u_xlat16_2.xyz, (-u_xlat6.xyz));\n    u_xlat6.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat7.xyz = vec3(u_xlat27) * u_xlat8.xyz;\n    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = dot(u_xlat6.xyz, u_xlat7.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat20 = (-_Glossiness) + 1.0;\n    u_xlat6.x = u_xlat20 * u_xlat20;\n    u_xlat6.x = max(u_xlat6.x, 0.00200000009);\n    u_xlat15 = u_xlat6.x * u_xlat6.x;\n    u_xlat24 = u_xlat27 * u_xlat15 + (-u_xlat27);\n    u_xlat27 = u_xlat24 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat27 = u_xlat15 / u_xlat27;\n    u_xlat15 = (-u_xlat6.x) + 1.0;\n    u_xlat24 = abs(u_xlat29) * u_xlat15 + u_xlat6.x;\n    u_xlat6.x = u_xlat2.x * u_xlat15 + u_xlat6.x;\n    u_xlat6.x = abs(u_xlat29) * u_xlat6.x;\n    u_xlat16_30 = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat2.x * u_xlat24 + u_xlat6.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_31 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlatb29 = u_xlat16_31!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat6.xyz = u_xlat16_3.xyz * vec3(u_xlat27);\n    u_xlat16_31 = (-u_xlat11) + 1.0;\n    u_xlat16_5.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat16_5.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31) + u_xlat16_4.xyz;\n    u_xlat6.xyz = u_xlat16_4.xyz * u_xlat6.xyz;\n    u_xlat16_4.x = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat11 + u_xlat11;\n    u_xlat16_4.x = u_xlat11 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat20 + -0.5;\n    u_xlat16_30 = u_xlat16_4.x * u_xlat16_30 + 1.0;\n    u_xlat16_13 = (-u_xlat2.x) + 1.0;\n    u_xlat16_22 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_22;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_13 + 1.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_4.x;\n    u_xlat27 = u_xlat2.x * u_xlat16_30;\n    u_xlat16_3.xyz = vec3(u_xlat27) * u_xlat16_3.xyz;\n    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_30);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat6.xyz;\n    u_xlat27 = vs_TEXCOORD1.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat24 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_2.x = u_xlat24 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat3.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat3.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9) + 1.0;\n    u_xlat3.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9;\n    u_xlat9 = u_xlat1.x * u_xlat17 + u_xlat9;\n    u_xlat9 = abs(u_xlat0.x) * u_xlat9;\n    u_xlat16_26 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat3.x + u_xlat9;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8 * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_26 = u_xlat16_5.x * u_xlat16_26 + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_26;\n    u_xlat16_2.xyz = vec3(u_xlat16) * u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nfloat u_xlat9;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat24 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_2.x = u_xlat24 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat8 = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8 * u_xlat8;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9 + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat24 = u_xlat9 / u_xlat24;\n    u_xlat9 = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_26 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat16_29 = u_xlat25 + u_xlat25;\n    u_xlat16_29 = u_xlat25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8 + -0.5;\n    u_xlat16_26 = u_xlat16_29 * u_xlat16_26 + 1.0;\n    u_xlat16_6.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat8 = u_xlat1.x * u_xlat16_26;\n    u_xlat16_2.xyz = vec3(u_xlat8) * u_xlat16_2.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xzw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec2 u_xlat5;\nmediump float u_xlat16_8;\nbool u_xlatb10;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat15 + u_xlat15;\n    u_xlat16_3.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_13 = (-u_xlat5.x) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat5.x * u_xlat16_3.x;\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat5.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);\n    u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xy).w;\n    u_xlatb10 = 0.0<u_xlat1.z;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = texture2D(_LightTextureB0, vec2(u_xlat15)).x;\n    u_xlat16_3.x = (u_xlatb10) ? 1.0 : 0.0;\n    u_xlat16_3.x = u_xlat5.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat21 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7 * u_xlat7;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_23 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7 + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat7 = u_xlat1.x * u_xlat16_23;\n    u_xlat16_2.xyz = vec3(u_xlat7) * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xzw;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    u_xlat1.x = u_xlat1.z * unity_FogParams.x;\n    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);\n    vs_TEXCOORD1.w = exp2(u_xlat1.x);\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    vs_TEXCOORD2.xyz = u_xlat2.xyz;\n    u_xlat3.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = u_xlat3.x;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16_4.xyz = u_xlat2.yzx * u_xlat1.zxy;\n    u_xlat16_4.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat16_4.xyz);\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_4.xyz = u_xlat1.xxx * u_xlat16_4.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD3.w = u_xlat3.y;\n    vs_TEXCOORD4.w = u_xlat3.z;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat10;\nfloat u_xlat14;\nmediump float u_xlat16_15;\nfloat u_xlat17;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_2.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_0.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat4.x = vs_TEXCOORD2.w;\n    u_xlat4.y = vs_TEXCOORD3.w;\n    u_xlat4.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + (-u_xlat3.xyz);\n    u_xlat3.x = dot(u_xlat16_0.xyz, (-u_xlat3.xyz));\n    u_xlat10.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat10.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat10.xyz, u_xlat4.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat10.x = u_xlat14 * u_xlat14;\n    u_xlat10.x = max(u_xlat10.x, 0.00200000009);\n    u_xlat17 = u_xlat10.x * u_xlat10.x;\n    u_xlat24 = u_xlat21 * u_xlat17 + (-u_xlat21);\n    u_xlat21 = u_xlat24 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat21 = u_xlat17 / u_xlat21;\n    u_xlat17 = (-u_xlat10.x) + 1.0;\n    u_xlat24 = abs(u_xlat3.x) * u_xlat17 + u_xlat10.x;\n    u_xlat10.x = u_xlat0.x * u_xlat17 + u_xlat10.x;\n    u_xlat10.x = u_xlat10.x * abs(u_xlat3.x);\n    u_xlat16_1.x = -abs(u_xlat3.x) + 1.0;\n    u_xlat3.x = u_xlat0.x * u_xlat24 + u_xlat10.x;\n    u_xlat3.x = u_xlat3.x + 9.99999975e-06;\n    u_xlat3.x = 0.5 / u_xlat3.x;\n    u_xlat21 = u_xlat21 * u_xlat3.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_8.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_2.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);\n    u_xlatb24 = u_xlat16_2.x!=0.0;\n    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat24;\n    u_xlat4.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;\n    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = textureCube(_LightTexture0, u_xlat4.xyz).w;\n    u_xlat24 = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat24 = u_xlat4.x * u_xlat24;\n    u_xlat16_2.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat16_2.xyz;\n    u_xlat16_23 = (-u_xlat7) + 1.0;\n    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_8.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_8.xyz;\n    u_xlat4.xyz = u_xlat16_8.xyz * u_xlat4.xyz;\n    u_xlat16_8.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;\n    u_xlat16_8.x = u_xlat7 + u_xlat7;\n    u_xlat16_8.x = u_xlat7 * u_xlat16_8.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat14 + -0.5;\n    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x + 1.0;\n    u_xlat16_15 = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_22;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_15 + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat4.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nvec3 u_xlat11;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat19;\nfloat u_xlat24;\nbool u_xlatb24;\nfloat u_xlat26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat24) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat5.xyz, u_xlat4.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat26 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat5.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));\n    u_xlat10 = (-_Glossiness) + 1.0;\n    u_xlat18 = u_xlat10 * u_xlat10;\n    u_xlat18 = max(u_xlat18, 0.00200000009);\n    u_xlat11.x = u_xlat18 * u_xlat18;\n    u_xlat19 = u_xlat24 * u_xlat11.x + (-u_xlat24);\n    u_xlat24 = u_xlat19 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat11.x = u_xlat11.x * 0.318309873;\n    u_xlat24 = u_xlat11.x / u_xlat24;\n    u_xlat11.x = (-u_xlat18) + 1.0;\n    u_xlat19 = abs(u_xlat2.x) * u_xlat11.x + u_xlat18;\n    u_xlat18 = u_xlat3.x * u_xlat11.x + u_xlat18;\n    u_xlat18 = u_xlat18 * abs(u_xlat2.x);\n    u_xlat16_1 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat19 + u_xlat18;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat3.x * u_xlat24;\n    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb2 = u_xlat16_6.x!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat11.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat11.xyz;\n    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);\n    u_xlat18 = textureCube(_LightTexture0, u_xlat11.xyz).w;\n    u_xlat2.x = texture2D(_LightTextureB0, u_xlat2.xx).x;\n    u_xlat2.x = u_xlat18 * u_xlat2.x;\n    u_xlat16_6.xyz = u_xlat2.xxx * _LightColor0.xyz;\n    u_xlat11.xyz = vec3(u_xlat24) * u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat26) + 1.0;\n    u_xlat16_7.x = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_9.xyz;\n    u_xlat11.xyz = u_xlat16_9.xyz * u_xlat11.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_9.xxx;\n    u_xlat16_30 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat16_30 = u_xlat26 + u_xlat26;\n    u_xlat16_30 = u_xlat26 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * u_xlat10 + -0.5;\n    u_xlat16_1 = u_xlat16_30 * u_xlat16_1 + 1.0;\n    u_xlat16_7.x = (-u_xlat3.x) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat0.x = u_xlat3.x * u_xlat16_1;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz + u_xlat11.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat20;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nbool u_xlatb24;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_3.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_24 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_24 = inversesqrt(u_xlat16_24);\n    u_xlat16_2.xyz = vec3(u_xlat16_24) * u_xlat16_1.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat5.x = vs_TEXCOORD2.w;\n    u_xlat5.y = vs_TEXCOORD3.w;\n    u_xlat5.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-u_xlat4.xyz);\n    u_xlat26 = dot(u_xlat16_2.xyz, (-u_xlat4.xyz));\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;\n    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz;\n    u_xlat24 = dot(u_xlat16_2.xyz, u_xlat5.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2 = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat4.x = u_xlat18 * u_xlat18;\n    u_xlat4.x = max(u_xlat4.x, 0.00200000009);\n    u_xlat12 = u_xlat4.x * u_xlat4.x;\n    u_xlat20 = u_xlat24 * u_xlat12 + (-u_xlat24);\n    u_xlat24 = u_xlat20 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat24 = u_xlat12 / u_xlat24;\n    u_xlat12 = (-u_xlat4.x) + 1.0;\n    u_xlat20 = abs(u_xlat26) * u_xlat12 + u_xlat4.x;\n    u_xlat4.x = u_xlat2 * u_xlat12 + u_xlat4.x;\n    u_xlat4.x = abs(u_xlat26) * u_xlat4.x;\n    u_xlat16_1.x = -abs(u_xlat26) + 1.0;\n    u_xlat26 = u_xlat2 * u_xlat20 + u_xlat4.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 / u_xlat26;\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2 * u_xlat24;\n    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_3.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb26 = u_xlat16_3.x!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat4.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;\n    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.x = textureCube(_LightTexture0, u_xlat4.xyz).w;\n    u_xlat26 = texture2D(_LightTextureB0, vec2(u_xlat26)).x;\n    u_xlat26 = u_xlat4.x * u_xlat26;\n    u_xlat16_3.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat16_3.xyz;\n    u_xlat16_27 = (-u_xlat10) + 1.0;\n    u_xlat16_7.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_9.xyz;\n    u_xlat4.xyz = u_xlat16_9.xyz * u_xlat4.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_9.xxx;\n    u_xlat16_27 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;\n    u_xlat16_27 = u_xlat10 + u_xlat10;\n    u_xlat16_27 = u_xlat10 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat18 + -0.5;\n    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x + 1.0;\n    u_xlat16_7.x = (-u_xlat2) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_7.x + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;\n    u_xlat0.x = u_xlat2 * u_xlat16_1.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat4.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat18;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat8 = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat8;\n    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat26 = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat10 = u_xlat16 * u_xlat16;\n    u_xlat10 = max(u_xlat10, 0.00200000009);\n    u_xlat18 = u_xlat10 * u_xlat10;\n    u_xlat3.x = u_xlat24 * u_xlat18 + (-u_xlat24);\n    u_xlat24 = u_xlat3.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat18 = u_xlat18 * 0.318309873;\n    u_xlat24 = u_xlat18 / u_xlat24;\n    u_xlat18 = (-u_xlat10) + 1.0;\n    u_xlat3.x = abs(u_xlat0.x) * u_xlat18 + u_xlat10;\n    u_xlat10 = u_xlat2.x * u_xlat18 + u_xlat10;\n    u_xlat10 = abs(u_xlat0.x) * u_xlat10;\n    u_xlat16_25 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat2.x * u_xlat3.x + u_xlat10;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat2.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8 * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_1.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat26) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat26 + u_xlat26;\n    u_xlat16_5.x = u_xlat26 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_25 = u_xlat16_5.x * u_xlat16_25 + 1.0;\n    u_xlat16_13 = (-u_xlat2.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16 = u_xlat2.x * u_xlat16_25;\n    u_xlat16_1.xyz = vec3(u_xlat16) * u_xlat16_1.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat0.xyw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nfloat u_xlat10;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat18;\nfloat u_xlat24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat8 = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat8;\n    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat26 = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat8 = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8 * u_xlat8;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat10 = u_xlat16 * u_xlat16;\n    u_xlat18 = u_xlat24 * u_xlat10 + (-u_xlat24);\n    u_xlat24 = u_xlat18 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat10 = u_xlat10 * 0.318309873;\n    u_xlat24 = u_xlat10 / u_xlat24;\n    u_xlat10 = (-u_xlat16) + 1.0;\n    u_xlat18 = abs(u_xlat0.x) * u_xlat10 + u_xlat16;\n    u_xlat16 = u_xlat2.x * u_xlat10 + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_25 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat2.x * u_xlat18 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat2.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat26) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat26 + u_xlat26;\n    u_xlat16_29 = u_xlat26 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8 + -0.5;\n    u_xlat16_25 = u_xlat16_29 * u_xlat16_25 + 1.0;\n    u_xlat16_6.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_29;\n    u_xlat8 = u_xlat2.x * u_xlat16_25;\n    u_xlat16_1.xyz = vec3(u_xlat8) * u_xlat16_1.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xzw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat15 + u_xlat15;\n    u_xlat16_3.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_13 = (-u_xlat5.x) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat5.x * u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = textureCube(_LightTexture0, u_xlat5.xyz).w;\n    u_xlat10 = texture2D(_LightTextureB0, u_xlat1.xx).x;\n    u_xlat5.x = u_xlat5.x * u_xlat10;\n    u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat9;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat16;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nfloat u_xlat23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat7 = texture2D(_LightTextureB0, vec2(u_xlat21)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat7;\n    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat23 = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7 * u_xlat7;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat9 = u_xlat14 * u_xlat14;\n    u_xlat16 = u_xlat21 * u_xlat9 + (-u_xlat21);\n    u_xlat21 = u_xlat16 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat21 = u_xlat9 / u_xlat21;\n    u_xlat9 = (-u_xlat14) + 1.0;\n    u_xlat16 = abs(u_xlat0.x) * u_xlat9 + u_xlat14;\n    u_xlat14 = u_xlat2.x * u_xlat9 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_22 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat2.x * u_xlat16 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat2.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat23) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat23 + u_xlat23;\n    u_xlat16_5.x = u_xlat23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7 + -0.5;\n    u_xlat16_22 = u_xlat16_5.x * u_xlat16_22 + 1.0;\n    u_xlat16_12 = (-u_xlat2.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;\n    u_xlat7 = u_xlat2.x * u_xlat16_22;\n    u_xlat16_1.xyz = vec3(u_xlat7) * u_xlat16_1.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xzw;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    u_xlat1.x = u_xlat1.z * unity_FogParams.x;\n    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);\n    vs_TEXCOORD1.w = exp2(u_xlat1.x);\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    vs_TEXCOORD2.xyz = u_xlat2.xyz;\n    u_xlat3.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = u_xlat3.x;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16_4.xyz = u_xlat2.yzx * u_xlat1.zxy;\n    u_xlat16_4.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat16_4.xyz);\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_4.xyz = u_xlat1.xxx * u_xlat16_4.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD3.w = u_xlat3.y;\n    vs_TEXCOORD4.w = u_xlat3.z;\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat10;\nfloat u_xlat14;\nmediump float u_xlat16_15;\nfloat u_xlat17;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_2.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_0.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, (-u_xlat5.xyz));\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat24 = dot(u_xlat16_0.xyz, u_xlat4.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat3.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat14 * u_xlat14;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat10 = u_xlat3.x * u_xlat3.x;\n    u_xlat17 = u_xlat24 * u_xlat10 + (-u_xlat24);\n    u_xlat17 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat10 = u_xlat10 * 0.318309873;\n    u_xlat10 = u_xlat10 / u_xlat17;\n    u_xlat17 = (-u_xlat3.x) + 1.0;\n    u_xlat24 = abs(u_xlat21) * u_xlat17 + u_xlat3.x;\n    u_xlat3.x = u_xlat0.x * u_xlat17 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat21) * u_xlat3.x;\n    u_xlat16_1.x = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat24 + u_xlat3.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat10 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_8.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_2.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);\n    u_xlatb24 = u_xlat16_2.x!=0.0;\n    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat24;\n    u_xlat4.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat4.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat4.xy;\n    u_xlat4.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat4.xy;\n    u_xlat4.xy = u_xlat4.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat24 = texture2D(_LightTexture0, u_xlat4.xy).w;\n    u_xlat16_2.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat16_2.xyz;\n    u_xlat16_23 = (-u_xlat7) + 1.0;\n    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_8.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_8.xyz;\n    u_xlat4.xyz = u_xlat16_8.xyz * u_xlat4.xyz;\n    u_xlat16_8.x = u_xlat7 + u_xlat7;\n    u_xlat16_8.x = u_xlat7 * u_xlat16_8.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat14 + -0.5;\n    u_xlat16_15 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_15;\n    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x + 1.0;\n    u_xlat16_15 = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_22;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_15 + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat4.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    u_xlat1.x = u_xlat1.z * unity_FogParams.x;\n    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);\n    vs_TEXCOORD1.w = exp2(u_xlat1.x);\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat11;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat19;\nfloat u_xlat24;\nbool u_xlatb24;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, (-u_xlat5.xyz));\n    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;\n    u_xlat26 = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat18 * u_xlat18;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat11 = u_xlat3.x * u_xlat3.x;\n    u_xlat19 = u_xlat26 * u_xlat11 + (-u_xlat26);\n    u_xlat26 = u_xlat19 * u_xlat26 + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat11 = u_xlat11 * 0.318309873;\n    u_xlat26 = u_xlat11 / u_xlat26;\n    u_xlat11 = (-u_xlat3.x) + 1.0;\n    u_xlat19 = abs(u_xlat24) * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat24) * u_xlat3.x;\n    u_xlat16_1 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat2.x * u_xlat19 + u_xlat3.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat26 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb26 = u_xlat16_6.x!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat3.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat3.xy;\n    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat3.xy;\n    u_xlat3.xy = u_xlat3.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat26 = texture2D(_LightTexture0, u_xlat3.xy).w;\n    u_xlat16_6.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat10) + 1.0;\n    u_xlat16_7.x = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_9.xyz;\n    u_xlat3.xyz = u_xlat16_9.xyz * u_xlat3.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_9.xxx;\n    u_xlat16_30 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat16_30 = u_xlat10 + u_xlat10;\n    u_xlat16_30 = u_xlat10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * u_xlat18 + -0.5;\n    u_xlat16_1 = u_xlat16_30 * u_xlat16_1 + 1.0;\n    u_xlat16_7.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat0.x = u_xlat2.x * u_xlat16_1;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz + u_xlat3.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat20;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nbool u_xlatb24;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_3.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_24 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_24 = inversesqrt(u_xlat16_24);\n    u_xlat16_2.xyz = vec3(u_xlat16_24) * u_xlat16_1.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.x = vs_TEXCOORD2.w;\n    u_xlat4.y = vs_TEXCOORD3.w;\n    u_xlat4.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat4.xyz;\n    u_xlat6.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat16_2.xyz, (-u_xlat6.xyz));\n    u_xlat26 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat5.xyz = vec3(u_xlat26) * u_xlat5.xyz;\n    u_xlat26 = dot(u_xlat16_2.xyz, u_xlat5.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2 = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat4.x = u_xlat18 * u_xlat18;\n    u_xlat4.x = max(u_xlat4.x, 0.00200000009);\n    u_xlat12 = u_xlat4.x * u_xlat4.x;\n    u_xlat20 = u_xlat26 * u_xlat12 + (-u_xlat26);\n    u_xlat26 = u_xlat20 * u_xlat26 + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat26 = u_xlat12 / u_xlat26;\n    u_xlat12 = (-u_xlat4.x) + 1.0;\n    u_xlat20 = abs(u_xlat24) * u_xlat12 + u_xlat4.x;\n    u_xlat4.x = u_xlat2 * u_xlat12 + u_xlat4.x;\n    u_xlat4.x = abs(u_xlat24) * u_xlat4.x;\n    u_xlat16_1.x = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat2 * u_xlat20 + u_xlat4.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat26 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2 * u_xlat24;\n    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_3.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb26 = u_xlat16_3.x!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat4.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat4.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat4.xy;\n    u_xlat4.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat4.xy;\n    u_xlat4.xy = u_xlat4.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat26 = texture2D(_LightTexture0, u_xlat4.xy).w;\n    u_xlat16_3.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat16_3.xyz;\n    u_xlat16_27 = (-u_xlat10) + 1.0;\n    u_xlat16_7.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_9.xyz;\n    u_xlat4.xyz = u_xlat16_9.xyz * u_xlat4.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_9.xxx;\n    u_xlat16_27 = u_xlat10 + u_xlat10;\n    u_xlat16_27 = u_xlat10 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat18 + -0.5;\n    u_xlat16_7.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x;\n    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x + 1.0;\n    u_xlat16_7.x = (-u_xlat2) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_7.x + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;\n    u_xlat0.x = u_xlat2 * u_xlat16_1.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat4.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec2 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_9;\nlowp vec3 u_xlat10_9;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_20;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = max(u_xlat25, 0.00100000005);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    u_xlat25 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);\n    u_xlat10_1.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_1.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat2.x = u_xlat25 * u_xlat17 + (-u_xlat25);\n    u_xlat25 = u_xlat2.x * u_xlat25 + 1.0;\n    u_xlat25 = u_xlat25 * u_xlat25 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat17 = u_xlat17 / u_xlat25;\n    u_xlat25 = (-u_xlat9) + 1.0;\n    u_xlat2.x = abs(u_xlat24) * u_xlat25 + u_xlat9;\n    u_xlat9 = u_xlat0.x * u_xlat25 + u_xlat9;\n    u_xlat9 = abs(u_xlat24) * u_xlat9;\n    u_xlat16_4.x = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat0.x * u_xlat2.x + u_xlat9;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat17 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat0.x * u_xlat24;\n    u_xlat10_9.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat10_9.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_9.xyz = u_xlat10_9.xyz * _Color.xyz;\n    u_xlat16_12.xyz = u_xlat10_1.xxx * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_9.xyz * u_xlat16_5.xxx;\n    u_xlat16_29 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_29!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat1.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;\n    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;\n    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat1.x = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlat16_6.xyz = u_xlat1.xxx * _LightColor0.xyz;\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_6.xyz;\n    u_xlat16_29 = (-u_xlat8) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_12.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat16_12.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12.x;\n    u_xlat16_12.x = u_xlat8 + u_xlat8;\n    u_xlat16_12.x = u_xlat8 * u_xlat16_12.x;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16 + -0.5;\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x + 1.0;\n    u_xlat16_20 = (-u_xlat0.x) + 1.0;\n    u_xlat16_28 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_20 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat1.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_12;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat25 = max(u_xlat25, 0.00100000005);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat2.xyz = vec3(u_xlat25) * u_xlat2.xyz;\n    u_xlat25 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);\n    u_xlat16 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat16 * u_xlat16;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat9 = u_xlat1.x * u_xlat1.x;\n    u_xlat17 = u_xlat25 * u_xlat9 + (-u_xlat25);\n    u_xlat17 = u_xlat17 * u_xlat25 + 1.0;\n    u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat9 = u_xlat9 / u_xlat17;\n    u_xlat17 = (-u_xlat1.x) + 1.0;\n    u_xlat25 = abs(u_xlat24) * u_xlat17 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat17 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat24) * u_xlat1.x;\n    u_xlat16_4.x = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat0.x * u_xlat25 + u_xlat1.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat9 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat0.x * u_xlat24;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_12.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat10_1.x = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_5.x = (-u_xlat10_1.x) + 1.0;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat10_1.xxx + u_xlat16_5.xxx;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_12.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_1.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_29!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat1.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;\n    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;\n    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat1.x = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlat16_6.xyz = u_xlat1.xxx * _LightColor0.xyz;\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_6.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat8) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat8 + u_xlat8;\n    u_xlat16_5.x = u_xlat8 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_4.x = u_xlat16_5.x * u_xlat16_4.x + 1.0;\n    u_xlat16_13 = (-u_xlat0.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat16_4.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat1.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat0.x + -0.5;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = (-u_xlat15) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_18 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13;\n    u_xlat0.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat5.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat5.xy;\n    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat5.xy;\n    u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xy).w;\n    u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat2.xyz = vec3(u_xlat22) * u_xlat2.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_4.x = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_11.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb22 = u_xlat16_5.x!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat2.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat2.xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat22 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlat16_5.xyz = vec3(u_xlat22) * _LightColor0.xyz;\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat16_5.xyz;\n    u_xlat16_26 = (-u_xlat7) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_11.xyz;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat7 + u_xlat7;\n    u_xlat16_11.x = u_xlat7 * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat14 + -0.5;\n    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x + 1.0;\n    u_xlat16_18 = (-u_xlat0.x) + 1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nbool u_xlatb7;\nvec3 u_xlat8;\nmediump float u_xlat16_9;\nmediump float u_xlat16_10;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_24;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat7.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat7.x = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb7 = u_xlat7.x<u_xlat7.z;\n    u_xlat16_2.x = (u_xlatb7) ? _LightShadowData.x : 1.0;\n    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_9 + u_xlat16_2.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat21 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_9 = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_9 = u_xlat21 * u_xlat16_9;\n    u_xlat16_9 = u_xlat0.x * u_xlat16_9;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * u_xlat16_3.zzz + u_xlat16_3.xyw;\n    u_xlat16_0.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat5.x = vs_TEXCOORD2.w;\n    u_xlat5.y = vs_TEXCOORD3.w;\n    u_xlat5.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat21) + (-u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat8.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = vec3(u_xlat21) * u_xlat6.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat5.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat8.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat8.xyz, u_xlat5.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat22 = u_xlat21 * u_xlat15 + (-u_xlat21);\n    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat21 = u_xlat15 / u_xlat21;\n    u_xlat15 = (-u_xlat8.x) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);\n    u_xlat16_23 = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb22 = u_xlat16_24!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat5.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_24 = (-u_xlat7.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;\n    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat5.xyz;\n    u_xlat16_3.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat14 + -0.5;\n    u_xlat16_23 = u_xlat16_3.x * u_xlat16_23 + 1.0;\n    u_xlat16_10 = (-u_xlat0.x) + 1.0;\n    u_xlat16_17 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_17;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat5.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_16;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_25;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat2.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlatb2 = u_xlat2.x<u_xlat2.z;\n    u_xlat16_4.x = (u_xlatb2) ? _LightShadowData.x : 1.0;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);\n    u_xlat27 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlatb2 = 0.0<u_xlat1.z;\n    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat11 = texture2D(_LightTextureB0, vec2(u_xlat11)).x;\n    u_xlat16_13 = (u_xlatb2) ? 1.0 : 0.0;\n    u_xlat16_13 = u_xlat27 * u_xlat16_13;\n    u_xlat16_13 = u_xlat11 * u_xlat16_13;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_13;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = u_xlat3.xyz * vec3(u_xlat27) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat6.xyz, u_xlat5.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat29 = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat6.xyz, (-u_xlat2.xyz));\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat12.x = u_xlat20 * u_xlat20;\n    u_xlat21 = u_xlat27 * u_xlat12.x + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat27 = u_xlat12.x / u_xlat27;\n    u_xlat12.x = (-u_xlat20) + 1.0;\n    u_xlat21 = abs(u_xlat2.x) * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat3.x * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat20 * abs(u_xlat2.x);\n    u_xlat16_31 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat21 + u_xlat20;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat3.x * u_xlat27;\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_34 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb2 = u_xlat16_34!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat12.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_34 = (-u_xlat29) + 1.0;\n    u_xlat16_8.x = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat29 + u_xlat29;\n    u_xlat16_7.x = u_xlat29 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat11 + -0.5;\n    u_xlat16_31 = u_xlat16_7.x * u_xlat16_31 + 1.0;\n    u_xlat16_16 = (-u_xlat3.x) + 1.0;\n    u_xlat16_25 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_25;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_16 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat27 = u_xlat3.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_4.xyz + u_xlat12.xyz;\n    u_xlat27 = vs_TEXCOORD1.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat11;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_14;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_23;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat2.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlatb2 = u_xlat2.x<u_xlat2.z;\n    u_xlat16_4.x = (u_xlatb2) ? _LightShadowData.x : 1.0;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);\n    u_xlat27 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlatb2 = 0.0<u_xlat1.z;\n    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat11 = texture2D(_LightTextureB0, vec2(u_xlat11)).x;\n    u_xlat16_13 = (u_xlatb2) ? 1.0 : 0.0;\n    u_xlat16_13 = u_xlat27 * u_xlat16_13;\n    u_xlat16_13 = u_xlat11 * u_xlat16_13;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_13;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_5.xy = u_xlat16_5.xy * vec2(_BumpScale);\n    u_xlat16_6.xyz = u_xlat16_5.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyw = vs_TEXCOORD2.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vs_TEXCOORD4.xyz * u_xlat16_5.zzz + u_xlat16_5.xyw;\n    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat16_27 = inversesqrt(u_xlat16_27);\n    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat7.x = vs_TEXCOORD2.w;\n    u_xlat7.y = vs_TEXCOORD3.w;\n    u_xlat7.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat27) + (-u_xlat3.xyz);\n    u_xlat29 = dot(u_xlat16_2.xyz, (-u_xlat3.xyz));\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat7.xyz = vec3(u_xlat27) * u_xlat8.xyz;\n    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = dot(u_xlat3.xyz, u_xlat7.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat20 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat20 * u_xlat20;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat12 = u_xlat3.x * u_xlat3.x;\n    u_xlat21 = u_xlat27 * u_xlat12 + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat27 = u_xlat12 / u_xlat27;\n    u_xlat12 = (-u_xlat3.x) + 1.0;\n    u_xlat21 = abs(u_xlat29) * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat29) * u_xlat3.x;\n    u_xlat16_31 = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat2.x * u_xlat21 + u_xlat3.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_32 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_32!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_32 = (-u_xlat11) + 1.0;\n    u_xlat16_6.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_32) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat11 + u_xlat11;\n    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat20 + -0.5;\n    u_xlat16_31 = u_xlat16_5.x * u_xlat16_31 + 1.0;\n    u_xlat16_14 = (-u_xlat2.x) + 1.0;\n    u_xlat16_23 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_14 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat27 = u_xlat2.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat3.xyz;\n    u_xlat27 = vs_TEXCOORD1.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat8.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat8.x = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlatb8 = u_xlat8.x<u_xlat8.z;\n    u_xlat16_2.x = (u_xlatb8) ? _LightShadowData.x : 1.0;\n    u_xlat16_10 = (-u_xlat16_2.x) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_10 + u_xlat16_2.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat24 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_10 = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_10 = u_xlat24 * u_xlat16_10;\n    u_xlat16_10 = u_xlat0.x * u_xlat16_10;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat3.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat3.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9) + 1.0;\n    u_xlat3.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9;\n    u_xlat9 = u_xlat1.x * u_xlat17 + u_xlat9;\n    u_xlat9 = abs(u_xlat0.x) * u_xlat9;\n    u_xlat16_26 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat3.x + u_xlat9;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_26 = u_xlat16_5.x * u_xlat16_26 + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_26;\n    u_xlat16_2.xyz = vec3(u_xlat16) * u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat0.xyw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat8.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat8.x = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlatb8 = u_xlat8.x<u_xlat8.z;\n    u_xlat16_2.x = (u_xlatb8) ? _LightShadowData.x : 1.0;\n    u_xlat16_10 = (-u_xlat16_2.x) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_10 + u_xlat16_2.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat24 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_10 = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_10 = u_xlat24 * u_xlat16_10;\n    u_xlat16_10 = u_xlat0.x * u_xlat16_10;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8.x * u_xlat8.x;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9 + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat24 = u_xlat9 / u_xlat24;\n    u_xlat9 = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_26 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_3.xyz + u_xlat10_3.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat16_29 = u_xlat25 + u_xlat25;\n    u_xlat16_29 = u_xlat25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8.x + -0.5;\n    u_xlat16_26 = u_xlat16_29 * u_xlat16_26 + 1.0;\n    u_xlat16_6.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat8.x = u_xlat1.x * u_xlat16_26;\n    u_xlat16_2.xyz = u_xlat8.xxx * u_xlat16_2.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xzw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_7;\nmediump float u_xlat16_9;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat5.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat5.x = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb5 = u_xlat5.x<u_xlat5.z;\n    u_xlat16_2.x = (u_xlatb5) ? _LightShadowData.x : 1.0;\n    u_xlat16_7 = (-u_xlat16_2.x) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_7 + u_xlat16_2.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat15 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_7 = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_7 = u_xlat15 * u_xlat16_7;\n    u_xlat16_7 = u_xlat0.x * u_xlat16_7;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_17 = u_xlat15 + u_xlat15;\n    u_xlat16_17 = u_xlat15 * u_xlat16_17;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_17 = u_xlat16_17 * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_9 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_17 * u_xlat16_4.x + 1.0;\n    u_xlat16_9 = (-u_xlat5.x) + 1.0;\n    u_xlat16_14 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_14;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_9 + 1.0;\n    u_xlat16_17 = u_xlat16_4.x * u_xlat16_17;\n    u_xlat0.x = u_xlat5.x * u_xlat16_17;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_17);\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nbool u_xlatb7;\nfloat u_xlat8;\nmediump float u_xlat16_9;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat7.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat7.x = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb7 = u_xlat7.x<u_xlat7.z;\n    u_xlat16_2.x = (u_xlatb7) ? _LightShadowData.x : 1.0;\n    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_9 + u_xlat16_2.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat21 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_9 = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_9 = u_xlat21 * u_xlat16_9;\n    u_xlat16_9 = u_xlat0.x * u_xlat16_9;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_23 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat7.x = u_xlat1.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat7.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat0.xzw;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _ShadowOffsets[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_24;\nmediump float u_xlat16_25;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat7.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat1.xy = u_xlat7.xy + _ShadowOffsets[0].xy;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;\n    u_xlat2.xy = u_xlat7.xy + _ShadowOffsets[1].xy;\n    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat2.xy = u_xlat7.xy + _ShadowOffsets[2].xy;\n    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat7.xy = u_xlat7.xy + _ShadowOffsets[3].xy;\n    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb1 = lessThan(u_xlat1, u_xlat7.zzzz);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat7.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_3.x = (-u_xlat7.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat7.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat21 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1.x = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_10 = (u_xlatb1.x) ? 1.0 : 0.0;\n    u_xlat16_10 = u_xlat21 * u_xlat16_10;\n    u_xlat16_10 = u_xlat0.x * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat8.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat6.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat8.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat8.xyz, u_xlat2.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat22 = u_xlat21 * u_xlat15 + (-u_xlat21);\n    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat21 = u_xlat15 / u_xlat21;\n    u_xlat15 = (-u_xlat8.x) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);\n    u_xlat16_24 = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_25 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlatb22 = u_xlat16_25!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat2.xyz = u_xlat16_3.xyz * vec3(u_xlat21);\n    u_xlat16_25 = (-u_xlat7.x) + 1.0;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_4.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xyz;\n    u_xlat16_4.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat14 + -0.5;\n    u_xlat16_24 = u_xlat16_4.x * u_xlat16_24 + 1.0;\n    u_xlat16_11 = (-u_xlat0.x) + 1.0;\n    u_xlat16_18 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_24;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(u_xlat16_24);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat2.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _ShadowOffsets[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_16;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_25;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat2.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat3.xy = u_xlat2.xy + _ShadowOffsets[0].xy;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat3.xy = u_xlat2.xy + _ShadowOffsets[1].xy;\n    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat3.xy = u_xlat2.xy + _ShadowOffsets[2].xy;\n    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat2.xy = u_xlat2.xy + _ShadowOffsets[3].xy;\n    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlatb1 = lessThan(u_xlat1, u_xlat2.zzzz);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat2.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_4.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x + u_xlat2.x;\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);\n    u_xlat27 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlatb2 = 0.0<u_xlat1.z;\n    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat11 = texture2D(_LightTextureB0, vec2(u_xlat11)).x;\n    u_xlat16_13 = (u_xlatb2) ? 1.0 : 0.0;\n    u_xlat16_13 = u_xlat27 * u_xlat16_13;\n    u_xlat16_13 = u_xlat11 * u_xlat16_13;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_13;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = u_xlat3.xyz * vec3(u_xlat27) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat6.xyz, u_xlat5.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat29 = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat6.xyz, (-u_xlat2.xyz));\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat12.x = u_xlat20 * u_xlat20;\n    u_xlat21 = u_xlat27 * u_xlat12.x + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat27 = u_xlat12.x / u_xlat27;\n    u_xlat12.x = (-u_xlat20) + 1.0;\n    u_xlat21 = abs(u_xlat2.x) * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat3.x * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat20 * abs(u_xlat2.x);\n    u_xlat16_31 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat21 + u_xlat20;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat3.x * u_xlat27;\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_34 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb2 = u_xlat16_34!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat12.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_34 = (-u_xlat29) + 1.0;\n    u_xlat16_8.x = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat29 + u_xlat29;\n    u_xlat16_7.x = u_xlat29 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat11 + -0.5;\n    u_xlat16_31 = u_xlat16_7.x * u_xlat16_31 + 1.0;\n    u_xlat16_16 = (-u_xlat3.x) + 1.0;\n    u_xlat16_25 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_25;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_16 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat27 = u_xlat3.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_4.xyz + u_xlat12.xyz;\n    u_xlat27 = vs_TEXCOORD1.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _ShadowOffsets[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat11;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_14;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_23;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat2.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat3.xy = u_xlat2.xy + _ShadowOffsets[0].xy;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat3.xy = u_xlat2.xy + _ShadowOffsets[1].xy;\n    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat3.xy = u_xlat2.xy + _ShadowOffsets[2].xy;\n    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat2.xy = u_xlat2.xy + _ShadowOffsets[3].xy;\n    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlatb1 = lessThan(u_xlat1, u_xlat2.zzzz);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat2.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_4.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x + u_xlat2.x;\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;\n    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);\n    u_xlat27 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlatb2 = 0.0<u_xlat1.z;\n    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat11 = texture2D(_LightTextureB0, vec2(u_xlat11)).x;\n    u_xlat16_13 = (u_xlatb2) ? 1.0 : 0.0;\n    u_xlat16_13 = u_xlat27 * u_xlat16_13;\n    u_xlat16_13 = u_xlat11 * u_xlat16_13;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_13;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_5.xy = u_xlat16_5.xy * vec2(_BumpScale);\n    u_xlat16_6.xyz = u_xlat16_5.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyw = vs_TEXCOORD2.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vs_TEXCOORD4.xyz * u_xlat16_5.zzz + u_xlat16_5.xyw;\n    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat16_27 = inversesqrt(u_xlat16_27);\n    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat7.x = vs_TEXCOORD2.w;\n    u_xlat7.y = vs_TEXCOORD3.w;\n    u_xlat7.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat27) + (-u_xlat3.xyz);\n    u_xlat29 = dot(u_xlat16_2.xyz, (-u_xlat3.xyz));\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat7.xyz = vec3(u_xlat27) * u_xlat8.xyz;\n    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = dot(u_xlat3.xyz, u_xlat7.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat20 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat20 * u_xlat20;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat12 = u_xlat3.x * u_xlat3.x;\n    u_xlat21 = u_xlat27 * u_xlat12 + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat27 = u_xlat12 / u_xlat27;\n    u_xlat12 = (-u_xlat3.x) + 1.0;\n    u_xlat21 = abs(u_xlat29) * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat29) * u_xlat3.x;\n    u_xlat16_31 = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat2.x * u_xlat21 + u_xlat3.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_32 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_32!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_32 = (-u_xlat11) + 1.0;\n    u_xlat16_6.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_32) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat11 + u_xlat11;\n    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat20 + -0.5;\n    u_xlat16_31 = u_xlat16_5.x * u_xlat16_31 + 1.0;\n    u_xlat16_14 = (-u_xlat2.x) + 1.0;\n    u_xlat16_23 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_14 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat27 = u_xlat2.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat3.xyz;\n    u_xlat27 = vs_TEXCOORD1.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _ShadowOffsets[4];\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat8.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat1.xy = u_xlat8.xy + _ShadowOffsets[0].xy;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;\n    u_xlat2.xy = u_xlat8.xy + _ShadowOffsets[1].xy;\n    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat2.xy = u_xlat8.xy + _ShadowOffsets[2].xy;\n    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat8.xy = u_xlat8.xy + _ShadowOffsets[3].xy;\n    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlatb1 = lessThan(u_xlat1, u_xlat8.zzzz);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat8.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_3.x = (-u_xlat8.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat8.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat24 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1.x = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_11 = (u_xlatb1.x) ? 1.0 : 0.0;\n    u_xlat16_11 = u_xlat24 * u_xlat16_11;\n    u_xlat16_11 = u_xlat0.x * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat2.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9) + 1.0;\n    u_xlat2.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9;\n    u_xlat9 = u_xlat1.x * u_xlat17 + u_xlat9;\n    u_xlat9 = abs(u_xlat0.x) * u_xlat9;\n    u_xlat16_27 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat2.x + u_xlat9;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_27 = u_xlat16_5.x * u_xlat16_27 + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_5.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_27;\n    u_xlat16_3.xyz = vec3(u_xlat16) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _ShadowOffsets[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat8.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat1.xy = u_xlat8.xy + _ShadowOffsets[0].xy;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;\n    u_xlat2.xy = u_xlat8.xy + _ShadowOffsets[1].xy;\n    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat2.xy = u_xlat8.xy + _ShadowOffsets[2].xy;\n    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat8.xy = u_xlat8.xy + _ShadowOffsets[3].xy;\n    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlatb1 = lessThan(u_xlat1, u_xlat8.zzzz);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat8.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_3.x = (-u_xlat8.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat8.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat24 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1.x = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_11 = (u_xlatb1.x) ? 1.0 : 0.0;\n    u_xlat16_11 = u_xlat24 * u_xlat16_11;\n    u_xlat16_11 = u_xlat0.x * u_xlat16_11;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8.x * u_xlat8.x;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9 + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat24 = u_xlat9 / u_xlat24;\n    u_xlat9 = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_27 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_29;\n    u_xlat16_29 = u_xlat25 + u_xlat25;\n    u_xlat16_29 = u_xlat25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8.x + -0.5;\n    u_xlat16_27 = u_xlat16_29 * u_xlat16_27 + 1.0;\n    u_xlat16_6.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_29;\n    u_xlat8.x = u_xlat1.x * u_xlat16_27;\n    u_xlat16_3.xyz = u_xlat8.xxx * u_xlat16_3.xyz;\n    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _ShadowOffsets[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_9;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat5.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat5.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat1.xy = u_xlat5.xy + _ShadowOffsets[0].xy;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;\n    u_xlat2.xy = u_xlat5.xy + _ShadowOffsets[1].xy;\n    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat2.xy = u_xlat5.xy + _ShadowOffsets[2].xy;\n    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat5.xy = u_xlat5.xy + _ShadowOffsets[3].xy;\n    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb1 = lessThan(u_xlat1, u_xlat5.zzzz);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat5.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_3.x = (-u_xlat5.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat5.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat15 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1.x = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_8 = (u_xlatb1.x) ? 1.0 : 0.0;\n    u_xlat16_8 = u_xlat15 * u_xlat16_8;\n    u_xlat16_8 = u_xlat0.x * u_xlat16_8;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_18 = u_xlat15 + u_xlat15;\n    u_xlat16_18 = u_xlat15 * u_xlat16_18;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_18 = u_xlat16_18 * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_9 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x + 1.0;\n    u_xlat16_9 = (-u_xlat5.x) + 1.0;\n    u_xlat16_14 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_14;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_9 + 1.0;\n    u_xlat16_18 = u_xlat16_4.x * u_xlat16_18;\n    u_xlat0.x = u_xlat5.x * u_xlat16_18;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _ShadowOffsets[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nfloat u_xlat8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_24;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat1 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD5.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD5.zzzz + u_xlat1;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat7.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat1.xy = u_xlat7.xy + _ShadowOffsets[0].xy;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;\n    u_xlat2.xy = u_xlat7.xy + _ShadowOffsets[1].xy;\n    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat2.xy = u_xlat7.xy + _ShadowOffsets[2].xy;\n    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat7.xy = u_xlat7.xy + _ShadowOffsets[3].xy;\n    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb1 = lessThan(u_xlat1, u_xlat7.zzzz);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat7.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_3.x = (-u_xlat7.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + u_xlat7.x;\n    u_xlat0 = vs_TEXCOORD5.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat21 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1.x = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_10 = (u_xlatb1.x) ? 1.0 : 0.0;\n    u_xlat16_10 = u_xlat21 * u_xlat16_10;\n    u_xlat16_10 = u_xlat0.x * u_xlat16_10;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_24 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;\n    u_xlat16_24 = u_xlat16_5.x * u_xlat16_24 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat7.x = u_xlat1.x * u_xlat16_24;\n    u_xlat16_3.xyz = u_xlat7.xxx * u_xlat16_3.xyz;\n    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_24);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);\n    vs_TEXCOORD1.w = exp2(u_xlat1.x);\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;\n    vs_TEXCOORD2.xyz = u_xlat2.xyz;\n    u_xlat3.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = u_xlat3.x;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat16_4.xyz = u_xlat2.yzx * u_xlat1.zxy;\n    u_xlat16_4.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat16_4.xyz);\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_4.xyz = u_xlat1.xxx * u_xlat16_4.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_4.xyz;\n    vs_TEXCOORD3.w = u_xlat3.y;\n    vs_TEXCOORD4.w = u_xlat3.z;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nlowp float u_xlat10_7;\nfloat u_xlat8;\nmediump float u_xlat16_10;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_24;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_2.x = (-u_xlat10_7) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_7;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * u_xlat16_3.zzz + u_xlat16_3.xyw;\n    u_xlat16_0.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat6.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, (-u_xlat6.xyz));\n    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat5.xyz = vec3(u_xlat22) * u_xlat5.xyz;\n    u_xlat22 = dot(u_xlat16_0.xyz, u_xlat5.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_23 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb22 = u_xlat16_24!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat5.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_24 = (-u_xlat7.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;\n    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat5.xyz;\n    u_xlat16_3.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat14 + -0.5;\n    u_xlat16_10 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_10;\n    u_xlat16_23 = u_xlat16_3.x * u_xlat16_23 + 1.0;\n    u_xlat16_10 = (-u_xlat0.x) + 1.0;\n    u_xlat16_17 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_17;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat5.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = u_xlat0.z * unity_FogParams.x;\n    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);\n    vs_TEXCOORD1.w = exp2(u_xlat1.x);\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat0.zw;\n    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nlowp float u_xlat10_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat10;\nfloat u_xlat11;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat19;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat24 = u_xlat24 + (-u_xlat2.x);\n    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat2.x;\n    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_2 = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat16_1.x = (-u_xlat10_2) + 1.0;\n    u_xlat16_1.x = u_xlat24 * u_xlat16_1.x + u_xlat10_2;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, (-u_xlat5.xyz));\n    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;\n    u_xlat26 = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat18 * u_xlat18;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat11 = u_xlat3.x * u_xlat3.x;\n    u_xlat19 = u_xlat26 * u_xlat11 + (-u_xlat26);\n    u_xlat26 = u_xlat19 * u_xlat26 + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat11 = u_xlat11 * 0.318309873;\n    u_xlat26 = u_xlat11 / u_xlat26;\n    u_xlat11 = (-u_xlat3.x) + 1.0;\n    u_xlat19 = abs(u_xlat24) * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat24) * u_xlat3.x;\n    u_xlat16_25 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat2.x * u_xlat19 + u_xlat3.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat26 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb26 = u_xlat16_30!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat24);\n    u_xlat16_30 = (-u_xlat10) + 1.0;\n    u_xlat16_7.x = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_6.xyz;\n    u_xlat16_6.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_6.xxx;\n    u_xlat16_30 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_30;\n    u_xlat16_30 = u_xlat10 + u_xlat10;\n    u_xlat16_30 = u_xlat10 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * u_xlat18 + -0.5;\n    u_xlat16_25 = u_xlat16_30 * u_xlat16_25 + 1.0;\n    u_xlat16_7.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_30;\n    u_xlat0.x = u_xlat2.x * u_xlat16_25;\n    u_xlat16_1.xyz = u_xlat0.xxx * u_xlat16_1.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat3.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nfloat u_xlat10;\nfloat u_xlat11;\nmediump float u_xlat16_12;\nfloat u_xlat18;\nfloat u_xlat19;\nmediump float u_xlat16_20;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat24 = u_xlat24 + (-u_xlat2.x);\n    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat2.x;\n    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat16_1.x = (-u_xlat10_2.x) + 1.0;\n    u_xlat16_1.x = u_xlat24 * u_xlat16_1.x + u_xlat10_2.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_24 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_24 = inversesqrt(u_xlat16_24);\n    u_xlat16_2.xyz = vec3(u_xlat16_24) * u_xlat16_4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat3.xyz;\n    u_xlat7.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat16_2.xyz, (-u_xlat7.xyz));\n    u_xlat26 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat6.xyz = vec3(u_xlat26) * u_xlat6.xyz;\n    u_xlat26 = dot(u_xlat16_2.xyz, u_xlat6.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat3.xyz, u_xlat6.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat18 * u_xlat18;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat11 = u_xlat3.x * u_xlat3.x;\n    u_xlat19 = u_xlat26 * u_xlat11 + (-u_xlat26);\n    u_xlat26 = u_xlat19 * u_xlat26 + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat11 = u_xlat11 * 0.318309873;\n    u_xlat26 = u_xlat11 / u_xlat26;\n    u_xlat11 = (-u_xlat3.x) + 1.0;\n    u_xlat19 = abs(u_xlat24) * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat24) * u_xlat3.x;\n    u_xlat16_25 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat2.x * u_xlat19 + u_xlat3.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat26 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlatb26 = u_xlat16_28!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat24);\n    u_xlat16_28 = (-u_xlat10) + 1.0;\n    u_xlat16_5.x = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16_5.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_28) + u_xlat16_4.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xyz;\n    u_xlat16_4.x = u_xlat10 + u_xlat10;\n    u_xlat16_4.x = u_xlat10 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat18 + -0.5;\n    u_xlat16_12 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_12;\n    u_xlat16_25 = u_xlat16_4.x * u_xlat16_25 + 1.0;\n    u_xlat16_12 = (-u_xlat2.x) + 1.0;\n    u_xlat16_20 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_20;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_4.x;\n    u_xlat24 = u_xlat2.x * u_xlat16_25;\n    u_xlat16_1.xyz = vec3(u_xlat24) * u_xlat16_1.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat3.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec2 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp float u_xlat10_8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_9;\nlowp vec3 u_xlat10_9;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_8 = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlat16_2.x = (-u_xlat10_8) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_8;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat25 = max(u_xlat25, 0.00100000005);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz;\n    u_xlat25 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat10_1.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_1.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat3.x = u_xlat25 * u_xlat17 + (-u_xlat25);\n    u_xlat25 = u_xlat3.x * u_xlat25 + 1.0;\n    u_xlat25 = u_xlat25 * u_xlat25 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat17 = u_xlat17 / u_xlat25;\n    u_xlat25 = (-u_xlat9) + 1.0;\n    u_xlat3.x = abs(u_xlat24) * u_xlat25 + u_xlat9;\n    u_xlat9 = u_xlat0.x * u_xlat25 + u_xlat9;\n    u_xlat9 = abs(u_xlat24) * u_xlat9;\n    u_xlat16_26 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat0.x * u_xlat3.x + u_xlat9;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat17 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat0.x * u_xlat24;\n    u_xlat10_9.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_9.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_9.xyz = u_xlat10_9.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_29!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat24);\n    u_xlat16_29 = (-u_xlat8.x) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat8.x + u_xlat8.x;\n    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_26 = u_xlat16_5.x * u_xlat16_26 + 1.0;\n    u_xlat16_13 = (-u_xlat0.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_26;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat1.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp float u_xlat10_8;\nfloat u_xlat9;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_8 = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlat16_2.x = (-u_xlat10_8) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_8;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat25 = max(u_xlat25, 0.00100000005);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz;\n    u_xlat25 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat16 * u_xlat16;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat9 = u_xlat1.x * u_xlat1.x;\n    u_xlat17 = u_xlat25 * u_xlat9 + (-u_xlat25);\n    u_xlat17 = u_xlat17 * u_xlat25 + 1.0;\n    u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat9 = u_xlat9 / u_xlat17;\n    u_xlat17 = (-u_xlat1.x) + 1.0;\n    u_xlat25 = abs(u_xlat24) * u_xlat17 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat17 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat24) * u_xlat1.x;\n    u_xlat16_26 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat0.x * u_xlat25 + u_xlat1.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat9 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat0.x * u_xlat24;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat10_1.x = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_1.x) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat10_1.xxx + vec3(u_xlat16_29);\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_29!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat24);\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat8.x) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat16_29 = u_xlat8.x + u_xlat8.x;\n    u_xlat16_29 = u_xlat8.x * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16 + -0.5;\n    u_xlat16_26 = u_xlat16_29 * u_xlat16_26 + 1.0;\n    u_xlat16_6.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat0.x = u_xlat0.x * u_xlat16_26;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat1.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nvec2 u_xlat10;\nlowp float u_xlat10_10;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat0.x + -0.5;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = (-u_xlat15) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_18 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13;\n    u_xlat0.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = sqrt(u_xlat5.x);\n    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat10.x = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat5.x = (-u_xlat10.x) + u_xlat5.x;\n    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10.x;\n    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_10 = texture2D(_ShadowMapTexture, u_xlat10.xy).x;\n    u_xlat16_3.x = (-u_xlat10_10) + 1.0;\n    u_xlat16_3.x = u_xlat5.x * u_xlat16_3.x + u_xlat10_10;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nlowp float u_xlat10_7;\nfloat u_xlat8;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_2.x = (-u_xlat10_7) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_7;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_23 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_26!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_26 = (-u_xlat7.x) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat3.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nattribute mediump vec4 in_TANGENT0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat20;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    u_xlatb2 = _UVSec==0.0;\n    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2.x = u_xlat1.z * unity_FogParams.x;\n    u_xlat2.x = u_xlat2.x * (-u_xlat2.x);\n    vs_TEXCOORD1.w = exp2(u_xlat2.x);\n    u_xlat2.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;\n    vs_TEXCOORD1.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat3.xyz;\n    u_xlat20 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat20 = inversesqrt(u_xlat20);\n    u_xlat3.xyz = vec3(u_xlat20) * u_xlat3.xyz;\n    vs_TEXCOORD2.xyz = u_xlat3.xyz;\n    u_xlat4.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xyz;\n    vs_TEXCOORD2.w = u_xlat4.x;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat20 = inversesqrt(u_xlat20);\n    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;\n    u_xlat16_5.xyz = u_xlat3.yzx * u_xlat2.zxy;\n    u_xlat16_5.xyz = u_xlat2.yzx * u_xlat3.zxy + (-u_xlat16_5.xyz);\n    vs_TEXCOORD4.xyz = u_xlat2.xyz;\n    u_xlat2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat16_5.xyz = u_xlat2.xxx * u_xlat16_5.xyz;\n    vs_TEXCOORD3.xyz = u_xlat16_5.xyz;\n    vs_TEXCOORD3.w = u_xlat4.y;\n    vs_TEXCOORD4.w = u_xlat4.z;\n    u_xlat2.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nlowp float u_xlat10_7;\nfloat u_xlat8;\nmediump float u_xlat16_10;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_24;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_2.x = (-u_xlat10_7) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_7;\n    u_xlat0.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;\n    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;\n    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(_BumpScale);\n    u_xlat16_4.xyz = u_xlat16_3.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_3.xyw = vs_TEXCOORD2.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD4.xyz * u_xlat16_3.zzz + u_xlat16_3.xyw;\n    u_xlat16_0.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat6.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, (-u_xlat6.xyz));\n    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat5.xyz = vec3(u_xlat22) * u_xlat5.xyz;\n    u_xlat22 = dot(u_xlat16_0.xyz, u_xlat5.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat1.xyz, u_xlat5.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_23 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlatb22 = u_xlat16_24!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat5.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_24 = (-u_xlat7.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;\n    u_xlat5.xyz = u_xlat16_3.xyz * u_xlat5.xyz;\n    u_xlat16_3.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat14 + -0.5;\n    u_xlat16_10 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_10;\n    u_xlat16_23 = u_xlat16_3.x * u_xlat16_23 + 1.0;\n    u_xlat16_10 = (-u_xlat0.x) + 1.0;\n    u_xlat16_17 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_17;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat5.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec2 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nbool u_xlatb2;\nvec4 u_xlat3;\nfloat u_xlat14;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    u_xlatb2 = _UVSec==0.0;\n    u_xlat2.xy = (bool(u_xlatb2)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat2.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2.x = u_xlat1.z * unity_FogParams.x;\n    u_xlat2.x = u_xlat2.x * (-u_xlat2.x);\n    vs_TEXCOORD1.w = exp2(u_xlat2.x);\n    u_xlat2.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;\n    vs_TEXCOORD1.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat3.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat2.xyz;\n    u_xlat3.w = 0.0;\n    vs_TEXCOORD2 = u_xlat3.wwwx;\n    vs_TEXCOORD3 = u_xlat3.wwwy;\n    vs_TEXCOORD4.w = u_xlat3.z;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat14 = inversesqrt(u_xlat14);\n    vs_TEXCOORD4.xyz = vec3(u_xlat14) * u_xlat2.xyz;\n    u_xlat2.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;\n    vs_TEXCOORD6.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD7.zw = u_xlat1.zw;\n    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nlowp float u_xlat10_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat10;\nfloat u_xlat11;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nfloat u_xlat19;\nmediump float u_xlat16_22;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat24 = u_xlat24 + (-u_xlat2.x);\n    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat2.x;\n    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_2 = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat16_1.x = (-u_xlat10_2) + 1.0;\n    u_xlat16_1.x = u_xlat24 * u_xlat16_1.x + u_xlat10_2;\n    u_xlat2.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat2.xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat24 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlat24 = u_xlat16_1.x * u_xlat24;\n    u_xlat16_1.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, (-u_xlat5.xyz));\n    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat4.xyz = vec3(u_xlat26) * u_xlat4.xyz;\n    u_xlat26 = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat18 * u_xlat18;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat11 = u_xlat3.x * u_xlat3.x;\n    u_xlat19 = u_xlat26 * u_xlat11 + (-u_xlat26);\n    u_xlat26 = u_xlat19 * u_xlat26 + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat11 = u_xlat11 * 0.318309873;\n    u_xlat26 = u_xlat11 / u_xlat26;\n    u_xlat11 = (-u_xlat3.x) + 1.0;\n    u_xlat19 = abs(u_xlat24) * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat24) * u_xlat3.x;\n    u_xlat16_25 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat2.x * u_xlat19 + u_xlat3.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat26 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_30 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb26 = u_xlat16_30!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat24);\n    u_xlat16_30 = (-u_xlat10) + 1.0;\n    u_xlat16_7.x = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_6.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat10 + u_xlat10;\n    u_xlat16_6.x = u_xlat10 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat18 + -0.5;\n    u_xlat16_25 = u_xlat16_6.x * u_xlat16_25 + 1.0;\n    u_xlat16_14 = (-u_xlat2.x) + 1.0;\n    u_xlat16_22 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_22;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_6.x;\n    u_xlat24 = u_xlat2.x * u_xlat16_25;\n    u_xlat16_1.xyz = vec3(u_xlat24) * u_xlat16_1.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat3.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nfloat u_xlat10;\nfloat u_xlat11;\nmediump float u_xlat16_12;\nfloat u_xlat18;\nfloat u_xlat19;\nmediump float u_xlat16_20;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat24 = u_xlat24 + (-u_xlat2.x);\n    u_xlat24 = unity_ShadowFadeCenterAndType.w * u_xlat24 + u_xlat2.x;\n    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlat16_1.x = (-u_xlat10_2.x) + 1.0;\n    u_xlat16_1.x = u_xlat24 * u_xlat16_1.x + u_xlat10_2.x;\n    u_xlat2.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat2.xy;\n    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat24 = texture2D(_LightTexture0, u_xlat2.xy).w;\n    u_xlat24 = u_xlat16_1.x * u_xlat24;\n    u_xlat16_1.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_24 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_24 = inversesqrt(u_xlat16_24);\n    u_xlat16_2.xyz = vec3(u_xlat16_24) * u_xlat16_4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat3.xyz;\n    u_xlat7.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat16_2.xyz, (-u_xlat7.xyz));\n    u_xlat26 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat26 = max(u_xlat26, 0.00100000005);\n    u_xlat26 = inversesqrt(u_xlat26);\n    u_xlat6.xyz = vec3(u_xlat26) * u_xlat6.xyz;\n    u_xlat26 = dot(u_xlat16_2.xyz, u_xlat6.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat3.xyz, u_xlat6.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat18 * u_xlat18;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat11 = u_xlat3.x * u_xlat3.x;\n    u_xlat19 = u_xlat26 * u_xlat11 + (-u_xlat26);\n    u_xlat26 = u_xlat19 * u_xlat26 + 1.0;\n    u_xlat26 = u_xlat26 * u_xlat26 + 1.00000001e-07;\n    u_xlat11 = u_xlat11 * 0.318309873;\n    u_xlat26 = u_xlat11 / u_xlat26;\n    u_xlat11 = (-u_xlat3.x) + 1.0;\n    u_xlat19 = abs(u_xlat24) * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat11 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat24) * u_xlat3.x;\n    u_xlat16_25 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat2.x * u_xlat19 + u_xlat3.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat26 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_28 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlatb26 = u_xlat16_28!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat24);\n    u_xlat16_28 = (-u_xlat10) + 1.0;\n    u_xlat16_5.x = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16_5.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_28) + u_xlat16_4.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_4.xyz;\n    u_xlat16_4.x = u_xlat10 + u_xlat10;\n    u_xlat16_4.x = u_xlat10 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat18 + -0.5;\n    u_xlat16_12 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_12;\n    u_xlat16_25 = u_xlat16_4.x * u_xlat16_25 + 1.0;\n    u_xlat16_12 = (-u_xlat2.x) + 1.0;\n    u_xlat16_20 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_20;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_4.x;\n    u_xlat24 = u_xlat2.x * u_xlat16_25;\n    u_xlat16_1.xyz = vec3(u_xlat24) * u_xlat16_1.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat3.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec2 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp float u_xlat10_8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_9;\nlowp vec3 u_xlat10_9;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_8 = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlat16_2.x = (-u_xlat10_8) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_8;\n    u_xlat0.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;\n    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;\n    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat25 = max(u_xlat25, 0.00100000005);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz;\n    u_xlat25 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat10_1.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_1.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat3.x = u_xlat25 * u_xlat17 + (-u_xlat25);\n    u_xlat25 = u_xlat3.x * u_xlat25 + 1.0;\n    u_xlat25 = u_xlat25 * u_xlat25 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat17 = u_xlat17 / u_xlat25;\n    u_xlat25 = (-u_xlat9) + 1.0;\n    u_xlat3.x = abs(u_xlat24) * u_xlat25 + u_xlat9;\n    u_xlat9 = u_xlat0.x * u_xlat25 + u_xlat9;\n    u_xlat9 = abs(u_xlat24) * u_xlat9;\n    u_xlat16_26 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat0.x * u_xlat3.x + u_xlat9;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat17 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat0.x * u_xlat24;\n    u_xlat10_9.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_9.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_9.xyz = u_xlat10_9.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_1.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_1.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_9.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb1 = u_xlat16_29!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat24);\n    u_xlat16_29 = (-u_xlat8.x) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat8.x + u_xlat8.x;\n    u_xlat16_5.x = u_xlat8.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_26 = u_xlat16_5.x * u_xlat16_26 + 1.0;\n    u_xlat16_13 = (-u_xlat0.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_26;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat1.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp float u_xlat10_8;\nfloat u_xlat9;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_8 = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlat16_2.x = (-u_xlat10_8) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_8;\n    u_xlat0.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;\n    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;\n    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat25 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat25 = max(u_xlat25, 0.00100000005);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz;\n    u_xlat25 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat16 * u_xlat16;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat9 = u_xlat1.x * u_xlat1.x;\n    u_xlat17 = u_xlat25 * u_xlat9 + (-u_xlat25);\n    u_xlat17 = u_xlat17 * u_xlat25 + 1.0;\n    u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat9 = u_xlat9 / u_xlat17;\n    u_xlat17 = (-u_xlat1.x) + 1.0;\n    u_xlat25 = abs(u_xlat24) * u_xlat17 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat17 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat24) * u_xlat1.x;\n    u_xlat16_26 = -abs(u_xlat24) + 1.0;\n    u_xlat24 = u_xlat0.x * u_xlat25 + u_xlat1.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat9 * u_xlat24;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat0.x * u_xlat24;\n    u_xlat10_1.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_1.xyz + u_xlat10_1.xyz;\n    u_xlat10_1.x = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_1.x) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat10_1.xxx + vec3(u_xlat16_29);\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb1 = u_xlat16_29!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat1.x;\n    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat24);\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat8.x) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat16_29 = u_xlat8.x + u_xlat8.x;\n    u_xlat16_29 = u_xlat8.x * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16 + -0.5;\n    u_xlat16_26 = u_xlat16_29 * u_xlat16_26 + 1.0;\n    u_xlat16_6.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_29;\n    u_xlat0.x = u_xlat0.x * u_xlat16_26;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_26 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat1.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nvec2 u_xlat10;\nlowp float u_xlat10_10;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat0.x + -0.5;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = (-u_xlat15) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_18 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13;\n    u_xlat0.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = sqrt(u_xlat5.x);\n    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat10.x = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat5.x = (-u_xlat10.x) + u_xlat5.x;\n    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10.x;\n    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat10.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_10 = texture2D(_ShadowMapTexture, u_xlat10.xy).x;\n    u_xlat16_3.x = (-u_xlat10_10) + 1.0;\n    u_xlat16_3.x = u_xlat5.x * u_xlat16_3.x + u_xlat10_10;\n    u_xlat5.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat5.xy;\n    u_xlat5.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat5.xy;\n    u_xlat5.xy = u_xlat5.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xy).w;\n    u_xlat5.x = u_xlat16_3.x * u_xlat5.x;\n    u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nlowp float u_xlat10_7;\nfloat u_xlat8;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_23;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;\n    u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_2.x = (-u_xlat10_7) + 1.0;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x + u_xlat10_7;\n    u_xlat0.xy = vs_TEXCOORD5.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;\n    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;\n    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat1.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, (-u_xlat4.xyz));\n    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat22 = max(u_xlat22, 0.00100000005);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat3.xyz = vec3(u_xlat22) * u_xlat3.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat14 * u_xlat14;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat8 = u_xlat1.x * u_xlat1.x;\n    u_xlat15 = u_xlat22 * u_xlat8 + (-u_xlat22);\n    u_xlat15 = u_xlat15 * u_xlat22 + 1.0;\n    u_xlat15 = u_xlat15 * u_xlat15 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat8 = u_xlat8 / u_xlat15;\n    u_xlat15 = (-u_xlat1.x) + 1.0;\n    u_xlat22 = abs(u_xlat21) * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat15 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat21) * u_xlat1.x;\n    u_xlat16_23 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat0.x * u_xlat22 + u_xlat1.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_26!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat21);\n    u_xlat16_26 = (-u_xlat7.x) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_23 = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_23;\n    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_23 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_23);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat3.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nbool u_xlatb7;\nvec3 u_xlat8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_24;\nmediump float u_xlat16_25;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat7.xyz);\n    u_xlat7.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat14 = sqrt(u_xlat1.x);\n    u_xlat14 = u_xlat14 * _LightPositionRange.w;\n    u_xlat14 = u_xlat14 * _LightProjectionParams.w;\n    u_xlatb7 = u_xlat7.x<u_xlat14;\n    u_xlat16_3.x = (u_xlatb7) ? _LightShadowData.x : 1.0;\n    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat8.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat6.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat8.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat8.xyz, u_xlat2.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat22 = u_xlat21 * u_xlat15 + (-u_xlat21);\n    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat21 = u_xlat15 / u_xlat21;\n    u_xlat15 = (-u_xlat8.x) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);\n    u_xlat16_24 = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_25 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlatb22 = u_xlat16_25!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat2.xyz = u_xlat16_3.xyz * vec3(u_xlat21);\n    u_xlat16_25 = (-u_xlat7.x) + 1.0;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_4.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xyz;\n    u_xlat16_4.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat14 + -0.5;\n    u_xlat16_24 = u_xlat16_4.x * u_xlat16_24 + 1.0;\n    u_xlat16_11 = (-u_xlat0.x) + 1.0;\n    u_xlat16_18 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_24;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(u_xlat16_24);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat2.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_16;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_25;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat2.xyz);\n    u_xlat2.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat11 = sqrt(u_xlat29);\n    u_xlat11 = u_xlat11 * _LightPositionRange.w;\n    u_xlat11 = u_xlat11 * _LightProjectionParams.w;\n    u_xlatb2 = u_xlat2.x<u_xlat11;\n    u_xlat16_4.x = (u_xlatb2) ? _LightShadowData.x : 1.0;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = texture2D(_LightTexture0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat16_4.x * u_xlat27;\n    u_xlat16_4.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = u_xlat3.xyz * vec3(u_xlat27) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat6.xyz, u_xlat5.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat29 = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat6.xyz, (-u_xlat2.xyz));\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat12.x = u_xlat20 * u_xlat20;\n    u_xlat21 = u_xlat27 * u_xlat12.x + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat27 = u_xlat12.x / u_xlat27;\n    u_xlat12.x = (-u_xlat20) + 1.0;\n    u_xlat21 = abs(u_xlat2.x) * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat3.x * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat20 * abs(u_xlat2.x);\n    u_xlat16_31 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat21 + u_xlat20;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat3.x * u_xlat27;\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_34 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb2 = u_xlat16_34!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat12.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_34 = (-u_xlat29) + 1.0;\n    u_xlat16_8.x = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat29 + u_xlat29;\n    u_xlat16_7.x = u_xlat29 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat11 + -0.5;\n    u_xlat16_31 = u_xlat16_7.x * u_xlat16_31 + 1.0;\n    u_xlat16_16 = (-u_xlat3.x) + 1.0;\n    u_xlat16_25 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_25;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_16 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat27 = u_xlat3.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_4.xyz + u_xlat12.xyz;\n    u_xlat27 = vs_TEXCOORD1.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat11;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_14;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_23;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat2.xyz);\n    u_xlat2.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat11 = sqrt(u_xlat29);\n    u_xlat11 = u_xlat11 * _LightPositionRange.w;\n    u_xlat11 = u_xlat11 * _LightProjectionParams.w;\n    u_xlatb2 = u_xlat2.x<u_xlat11;\n    u_xlat16_4.x = (u_xlatb2) ? _LightShadowData.x : 1.0;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = texture2D(_LightTexture0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat16_4.x * u_xlat27;\n    u_xlat16_4.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_5.xy = u_xlat16_5.xy * vec2(_BumpScale);\n    u_xlat16_6.xyz = u_xlat16_5.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyw = vs_TEXCOORD2.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vs_TEXCOORD4.xyz * u_xlat16_5.zzz + u_xlat16_5.xyw;\n    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat16_27 = inversesqrt(u_xlat16_27);\n    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat7.x = vs_TEXCOORD2.w;\n    u_xlat7.y = vs_TEXCOORD3.w;\n    u_xlat7.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat27) + (-u_xlat3.xyz);\n    u_xlat29 = dot(u_xlat16_2.xyz, (-u_xlat3.xyz));\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat7.xyz = vec3(u_xlat27) * u_xlat8.xyz;\n    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = dot(u_xlat3.xyz, u_xlat7.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat20 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat20 * u_xlat20;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat12 = u_xlat3.x * u_xlat3.x;\n    u_xlat21 = u_xlat27 * u_xlat12 + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat27 = u_xlat12 / u_xlat27;\n    u_xlat12 = (-u_xlat3.x) + 1.0;\n    u_xlat21 = abs(u_xlat29) * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat29) * u_xlat3.x;\n    u_xlat16_31 = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat2.x * u_xlat21 + u_xlat3.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_32 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_32!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_32 = (-u_xlat11) + 1.0;\n    u_xlat16_6.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_32) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat11 + u_xlat11;\n    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat20 + -0.5;\n    u_xlat16_31 = u_xlat16_5.x * u_xlat16_31 + 1.0;\n    u_xlat16_14 = (-u_xlat2.x) + 1.0;\n    u_xlat16_23 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_14 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat27 = u_xlat2.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat3.xyz;\n    u_xlat27 = vs_TEXCOORD1.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat8.xyz);\n    u_xlat8.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat16 = sqrt(u_xlat1.x);\n    u_xlat16 = u_xlat16 * _LightPositionRange.w;\n    u_xlat16 = u_xlat16 * _LightProjectionParams.w;\n    u_xlatb8 = u_xlat8.x<u_xlat16;\n    u_xlat16_3.x = (u_xlatb8) ? _LightShadowData.x : 1.0;\n    u_xlat16_11 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_11 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat2.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9) + 1.0;\n    u_xlat2.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9;\n    u_xlat9 = u_xlat1.x * u_xlat17 + u_xlat9;\n    u_xlat9 = abs(u_xlat0.x) * u_xlat9;\n    u_xlat16_27 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat2.x + u_xlat9;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_27 = u_xlat16_5.x * u_xlat16_27 + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_5.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_27;\n    u_xlat16_3.xyz = vec3(u_xlat16) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat8.xyz);\n    u_xlat8.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat16 = sqrt(u_xlat1.x);\n    u_xlat16 = u_xlat16 * _LightPositionRange.w;\n    u_xlat16 = u_xlat16 * _LightProjectionParams.w;\n    u_xlatb8 = u_xlat8.x<u_xlat16;\n    u_xlat16_3.x = (u_xlatb8) ? _LightShadowData.x : 1.0;\n    u_xlat16_11 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_11 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8.x * u_xlat8.x;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9 + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat24 = u_xlat9 / u_xlat24;\n    u_xlat9 = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_27 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_29;\n    u_xlat16_29 = u_xlat25 + u_xlat25;\n    u_xlat16_29 = u_xlat25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8.x + -0.5;\n    u_xlat16_27 = u_xlat16_29 * u_xlat16_27 + 1.0;\n    u_xlat16_6.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_29;\n    u_xlat8.x = u_xlat1.x * u_xlat16_27;\n    u_xlat16_3.xyz = u_xlat8.xxx * u_xlat16_3.xyz;\n    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat15 + u_xlat15;\n    u_xlat16_3.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_13 = (-u_xlat5.x) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat5.x * u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = sqrt(u_xlat5.x);\n    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat5.x = (-u_xlat10) + u_xlat5.x;\n    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10;\n    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat1.xyz);\n    u_xlat15 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10 = sqrt(u_xlat10);\n    u_xlat10 = u_xlat10 * _LightPositionRange.w;\n    u_xlat10 = u_xlat10 * _LightProjectionParams.w;\n    u_xlatb10 = u_xlat15<u_xlat10;\n    u_xlat16_3.x = (u_xlatb10) ? _LightShadowData.x : 1.0;\n    u_xlat16_8 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat5.x * u_xlat16_8 + u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xx).x;\n    u_xlat5.x = u_xlat16_3.x * u_xlat5.x;\n    u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nbool u_xlatb7;\nfloat u_xlat8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_24;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat7.xyz);\n    u_xlat7.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat14 = sqrt(u_xlat1.x);\n    u_xlat14 = u_xlat14 * _LightPositionRange.w;\n    u_xlat14 = u_xlat14 * _LightProjectionParams.w;\n    u_xlatb7 = u_xlat7.x<u_xlat14;\n    u_xlat16_3.x = (u_xlatb7) ? _LightShadowData.x : 1.0;\n    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_24 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;\n    u_xlat16_24 = u_xlat16_5.x * u_xlat16_24 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat7.x = u_xlat1.x * u_xlat16_24;\n    u_xlat16_3.xyz = u_xlat7.xxx * u_xlat16_3.xyz;\n    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_24);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nmediump float u_xlat16_11;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat8.xyz = u_xlat7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat7.xyz = u_xlat7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_11 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_11 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_5.xy = u_xlat16_5.xy * vec2(_BumpScale);\n    u_xlat16_6.xyz = u_xlat16_5.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyw = vs_TEXCOORD2.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vs_TEXCOORD4.xyz * u_xlat16_5.zzz + u_xlat16_5.xyw;\n    u_xlat16_0.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat8.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat8.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat8.xyz, u_xlat2.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat22 = u_xlat21 * u_xlat15 + (-u_xlat21);\n    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat21 = u_xlat15 / u_xlat21;\n    u_xlat15 = (-u_xlat8.x) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);\n    u_xlat16_25 = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_26!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat2.xyz = u_xlat16_4.xyz * vec3(u_xlat21);\n    u_xlat16_26 = (-u_xlat7.x) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_25 = u_xlat16_5.x * u_xlat16_25 + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_25;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nvec3 u_xlat12;\nmediump float u_xlat16_14;\nmediump float u_xlat16_16;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_25;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat29 = u_xlat29 * _LightPositionRange.w;\n    u_xlat29 = u_xlat29 * _LightProjectionParams.w;\n    u_xlat3.xyz = u_xlat2.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_4 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);\n    u_xlat1.w = dot(u_xlat10_4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat29));\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_5.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_14 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = u_xlat27 * u_xlat16_14 + u_xlat16_5.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = texture2D(_LightTexture0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat16_5.x * u_xlat27;\n    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat27) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat6.xyz, u_xlat4.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat29 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat6.xyz, (-u_xlat2.xyz));\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat12.x = u_xlat20 * u_xlat20;\n    u_xlat21 = u_xlat27 * u_xlat12.x + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat27 = u_xlat12.x / u_xlat27;\n    u_xlat12.x = (-u_xlat20) + 1.0;\n    u_xlat21 = abs(u_xlat2.x) * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat3.x * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat20 * abs(u_xlat2.x);\n    u_xlat16_32 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat21 + u_xlat20;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat3.x * u_xlat27;\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_34 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb2 = u_xlat16_34!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat12.xyz = u_xlat16_5.xyz * vec3(u_xlat27);\n    u_xlat16_34 = (-u_xlat29) + 1.0;\n    u_xlat16_8.x = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat29 + u_xlat29;\n    u_xlat16_7.x = u_xlat29 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat11 + -0.5;\n    u_xlat16_32 = u_xlat16_7.x * u_xlat16_32 + 1.0;\n    u_xlat16_16 = (-u_xlat3.x) + 1.0;\n    u_xlat16_25 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_25;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_16 + 1.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;\n    u_xlat27 = u_xlat3.x * u_xlat16_32;\n    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_32);\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz + u_xlat12.xyz;\n    u_xlat27 = vs_TEXCOORD1.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nmediump float u_xlat16_15;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_24;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat29 = u_xlat29 * _LightPositionRange.w;\n    u_xlat29 = u_xlat29 * _LightProjectionParams.w;\n    u_xlat3.xyz = u_xlat2.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_4 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);\n    u_xlat1.w = dot(u_xlat10_4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat29));\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_5.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_14 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = u_xlat27 * u_xlat16_14 + u_xlat16_5.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = texture2D(_LightTexture0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat16_5.x * u_xlat27;\n    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_6.xy = u_xlat16_6.xy * vec2(_BumpScale);\n    u_xlat16_7.xyz = u_xlat16_6.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyw = vs_TEXCOORD2.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vs_TEXCOORD4.xyz * u_xlat16_6.zzz + u_xlat16_6.xyw;\n    u_xlat16_27 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlat16_27 = inversesqrt(u_xlat16_27);\n    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat4.x = vs_TEXCOORD2.w;\n    u_xlat4.y = vs_TEXCOORD3.w;\n    u_xlat4.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat27) + (-u_xlat3.xyz);\n    u_xlat29 = dot(u_xlat16_2.xyz, (-u_xlat3.xyz));\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat8.xyz;\n    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat20 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat20 * u_xlat20;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat12 = u_xlat3.x * u_xlat3.x;\n    u_xlat21 = u_xlat27 * u_xlat12 + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat27 = u_xlat12 / u_xlat27;\n    u_xlat12 = (-u_xlat3.x) + 1.0;\n    u_xlat21 = abs(u_xlat29) * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat29) * u_xlat3.x;\n    u_xlat16_32 = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat2.x * u_xlat21 + u_xlat3.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb29 = u_xlat16_33!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat3.xyz = u_xlat16_5.xyz * vec3(u_xlat27);\n    u_xlat16_33 = (-u_xlat11) + 1.0;\n    u_xlat16_7.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat11 + u_xlat11;\n    u_xlat16_6.x = u_xlat11 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat20 + -0.5;\n    u_xlat16_32 = u_xlat16_6.x * u_xlat16_32 + 1.0;\n    u_xlat16_15 = (-u_xlat2.x) + 1.0;\n    u_xlat16_24 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_24;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_15 + 1.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat27 = u_xlat2.x * u_xlat16_32;\n    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_32);\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat3.xyz;\n    u_xlat27 = vs_TEXCOORD1.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nvec3 u_xlat9;\nmediump float u_xlat16_12;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat9.xyz = u_xlat8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat8.xyz = u_xlat8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9.x = u_xlat16 * u_xlat16;\n    u_xlat9.x = max(u_xlat9.x, 0.00200000009);\n    u_xlat17 = u_xlat9.x * u_xlat9.x;\n    u_xlat2.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9.x) + 1.0;\n    u_xlat2.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9.x;\n    u_xlat9.x = u_xlat1.x * u_xlat17 + u_xlat9.x;\n    u_xlat9.x = abs(u_xlat0.x) * u_xlat9.x;\n    u_xlat16_28 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat2.x + u_xlat9.x;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_28 = u_xlat16_5.x * u_xlat16_28 + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_28;\n    u_xlat16_4.xyz = vec3(u_xlat16) * u_xlat16_4.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xyw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nmediump float u_xlat16_12;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat9.xyz = u_xlat8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat8.xyz = u_xlat8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8.x * u_xlat8.x;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9.x = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9.x + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9.x = u_xlat9.x * 0.318309873;\n    u_xlat24 = u_xlat9.x / u_xlat24;\n    u_xlat9.x = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9.x + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9.x + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_28 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;\n    u_xlat16_29 = u_xlat25 + u_xlat25;\n    u_xlat16_29 = u_xlat25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8.x + -0.5;\n    u_xlat16_28 = u_xlat16_29 * u_xlat16_28 + 1.0;\n    u_xlat16_6.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;\n    u_xlat8.x = u_xlat1.x * u_xlat16_28;\n    u_xlat16_4.xyz = u_xlat8.xxx * u_xlat16_4.xyz;\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nmediump float u_xlat16_10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_17;\nfloat u_xlat18;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat7.xyz = u_xlat6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat7.xyz = u_xlat6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat7.xyz = u_xlat6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat6.xyz = u_xlat6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat6.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_10 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_10 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat18 = max(u_xlat18, 0.00100000005);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat16_22 = u_xlat18 + u_xlat18;\n    u_xlat16_22 = u_xlat18 * u_xlat16_22;\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat18 + -0.5;\n    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat6.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat16_5.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_11 = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11;\n    u_xlat16_5.x = u_xlat16_22 * u_xlat16_5.x + 1.0;\n    u_xlat16_11 = (-u_xlat6.x) + 1.0;\n    u_xlat16_17 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_17;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_11 + 1.0;\n    u_xlat16_22 = u_xlat16_5.x * u_xlat16_22;\n    u_xlat0.x = u_xlat6.x * u_xlat16_22;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_22);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat0.xxx;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nmediump float u_xlat16_11;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat8.xyz = u_xlat7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat7.xyz = u_xlat7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_11 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_11 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8.x + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8.x = u_xlat8.x * 0.318309873;\n    u_xlat21 = u_xlat8.x / u_xlat21;\n    u_xlat8.x = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8.x + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_25 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;\n    u_xlat16_25 = u_xlat16_5.x * u_xlat16_25 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat7.x = u_xlat1.x * u_xlat16_25;\n    u_xlat16_4.xyz = u_xlat7.xxx * u_xlat16_4.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nbool u_xlatb7;\nvec3 u_xlat8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_24;\nmediump float u_xlat16_25;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat7.xyz);\n    u_xlat7.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat14 = sqrt(u_xlat1.x);\n    u_xlat14 = u_xlat14 * _LightPositionRange.w;\n    u_xlat14 = u_xlat14 * _LightProjectionParams.w;\n    u_xlatb7 = u_xlat7.x<u_xlat14;\n    u_xlat16_3.x = (u_xlatb7) ? _LightShadowData.x : 1.0;\n    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat7.x = texture2D(_LightTextureB0, vec2(u_xlat21)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat7.x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(_BumpScale);\n    u_xlat16_5.xyz = u_xlat16_4.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_4.xyw = vs_TEXCOORD2.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD4.xyz * u_xlat16_4.zzz + u_xlat16_4.xyw;\n    u_xlat16_0.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat6.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat8.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat6.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat8.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat8.xyz, u_xlat2.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat22 = u_xlat21 * u_xlat15 + (-u_xlat21);\n    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat21 = u_xlat15 / u_xlat21;\n    u_xlat15 = (-u_xlat8.x) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);\n    u_xlat16_24 = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_25 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n    u_xlatb22 = u_xlat16_25!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat2.xyz = u_xlat16_3.xyz * vec3(u_xlat21);\n    u_xlat16_25 = (-u_xlat7.x) + 1.0;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.xyz = (-u_xlat16_4.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_4.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xyz;\n    u_xlat16_4.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat14 + -0.5;\n    u_xlat16_24 = u_xlat16_4.x * u_xlat16_24 + 1.0;\n    u_xlat16_11 = (-u_xlat0.x) + 1.0;\n    u_xlat16_18 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_4.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_24;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(u_xlat16_24);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat2.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nvec3 u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_16;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_25;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat2.xyz);\n    u_xlat2.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat11 = sqrt(u_xlat29);\n    u_xlat11 = u_xlat11 * _LightPositionRange.w;\n    u_xlat11 = u_xlat11 * _LightProjectionParams.w;\n    u_xlatb2 = u_xlat2.x<u_xlat11;\n    u_xlat16_4.x = (u_xlatb2) ? _LightShadowData.x : 1.0;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.x = textureCube(_LightTexture0, u_xlat2.xyz).w;\n    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat27 = u_xlat16_4.x * u_xlat27;\n    u_xlat16_4.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = u_xlat3.xyz * vec3(u_xlat27) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat5.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat6.xyz, u_xlat5.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat29 = dot(u_xlat3.xyz, u_xlat5.xyz);\n    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat6.xyz, (-u_xlat2.xyz));\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat12.x = u_xlat20 * u_xlat20;\n    u_xlat21 = u_xlat27 * u_xlat12.x + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat27 = u_xlat12.x / u_xlat27;\n    u_xlat12.x = (-u_xlat20) + 1.0;\n    u_xlat21 = abs(u_xlat2.x) * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat3.x * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat20 * abs(u_xlat2.x);\n    u_xlat16_31 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat21 + u_xlat20;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat3.x * u_xlat27;\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_34 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb2 = u_xlat16_34!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat12.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_34 = (-u_xlat29) + 1.0;\n    u_xlat16_8.x = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat29 + u_xlat29;\n    u_xlat16_7.x = u_xlat29 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat11 + -0.5;\n    u_xlat16_31 = u_xlat16_7.x * u_xlat16_31 + 1.0;\n    u_xlat16_16 = (-u_xlat3.x) + 1.0;\n    u_xlat16_25 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_25;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_16 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;\n    u_xlat27 = u_xlat3.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_4.xyz + u_xlat12.xyz;\n    u_xlat27 = vs_TEXCOORD1.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nbool u_xlatb2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nfloat u_xlat11;\nfloat u_xlat12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_14;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_23;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat2.xyz);\n    u_xlat2.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat11 = sqrt(u_xlat29);\n    u_xlat11 = u_xlat11 * _LightPositionRange.w;\n    u_xlat11 = u_xlat11 * _LightProjectionParams.w;\n    u_xlatb2 = u_xlat2.x<u_xlat11;\n    u_xlat16_4.x = (u_xlatb2) ? _LightShadowData.x : 1.0;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.x = textureCube(_LightTexture0, u_xlat2.xyz).w;\n    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat27 = u_xlat16_4.x * u_xlat27;\n    u_xlat16_4.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_5.xy = u_xlat16_5.xy * vec2(_BumpScale);\n    u_xlat16_6.xyz = u_xlat16_5.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyw = vs_TEXCOORD2.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vs_TEXCOORD4.xyz * u_xlat16_5.zzz + u_xlat16_5.xyw;\n    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat16_27 = inversesqrt(u_xlat16_27);\n    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat7.x = vs_TEXCOORD2.w;\n    u_xlat7.y = vs_TEXCOORD3.w;\n    u_xlat7.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat8.xyz = u_xlat7.xyz * vec3(u_xlat27) + (-u_xlat3.xyz);\n    u_xlat29 = dot(u_xlat16_2.xyz, (-u_xlat3.xyz));\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat7.xyz;\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat7.xyz = vec3(u_xlat27) * u_xlat8.xyz;\n    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = dot(u_xlat3.xyz, u_xlat7.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat20 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat20 * u_xlat20;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat12 = u_xlat3.x * u_xlat3.x;\n    u_xlat21 = u_xlat27 * u_xlat12 + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat27 = u_xlat12 / u_xlat27;\n    u_xlat12 = (-u_xlat3.x) + 1.0;\n    u_xlat21 = abs(u_xlat29) * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat29) * u_xlat3.x;\n    u_xlat16_31 = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat2.x * u_xlat21 + u_xlat3.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_32 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb29 = u_xlat16_32!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat27);\n    u_xlat16_32 = (-u_xlat11) + 1.0;\n    u_xlat16_6.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_32) + u_xlat16_5.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat11 + u_xlat11;\n    u_xlat16_5.x = u_xlat11 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat20 + -0.5;\n    u_xlat16_31 = u_xlat16_5.x * u_xlat16_31 + 1.0;\n    u_xlat16_14 = (-u_xlat2.x) + 1.0;\n    u_xlat16_23 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_23;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_14 + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_5.x;\n    u_xlat27 = u_xlat2.x * u_xlat16_31;\n    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;\n    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_31);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat3.xyz;\n    u_xlat27 = vs_TEXCOORD1.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat8.xyz);\n    u_xlat8.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat16 = sqrt(u_xlat1.x);\n    u_xlat16 = u_xlat16 * _LightPositionRange.w;\n    u_xlat16 = u_xlat16 * _LightProjectionParams.w;\n    u_xlatb8 = u_xlat8.x<u_xlat16;\n    u_xlat16_3.x = (u_xlatb8) ? _LightShadowData.x : 1.0;\n    u_xlat16_11 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_11 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat8.x = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat2.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9) + 1.0;\n    u_xlat2.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9;\n    u_xlat9 = u_xlat1.x * u_xlat17 + u_xlat9;\n    u_xlat9 = abs(u_xlat0.x) * u_xlat9;\n    u_xlat16_27 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat2.x + u_xlat9;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_27 = u_xlat16_5.x * u_xlat16_27 + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_5.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_27;\n    u_xlat16_3.xyz = vec3(u_xlat16) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_27;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat8.xyz);\n    u_xlat8.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat16 = sqrt(u_xlat1.x);\n    u_xlat16 = u_xlat16 * _LightPositionRange.w;\n    u_xlat16 = u_xlat16 * _LightProjectionParams.w;\n    u_xlatb8 = u_xlat8.x<u_xlat16;\n    u_xlat16_3.x = (u_xlatb8) ? _LightShadowData.x : 1.0;\n    u_xlat16_11 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_11 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat8.x = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8.x * u_xlat8.x;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9 + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat24 = u_xlat9 / u_xlat24;\n    u_xlat9 = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_27 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_29;\n    u_xlat16_29 = u_xlat25 + u_xlat25;\n    u_xlat16_29 = u_xlat25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8.x + -0.5;\n    u_xlat16_27 = u_xlat16_29 * u_xlat16_27 + 1.0;\n    u_xlat16_6.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_29;\n    u_xlat8.x = u_xlat1.x * u_xlat16_27;\n    u_xlat16_3.xyz = u_xlat8.xxx * u_xlat16_3.xyz;\n    u_xlat16_27 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_27) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat15 + u_xlat15;\n    u_xlat16_3.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_13 = (-u_xlat5.x) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat5.x * u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = sqrt(u_xlat5.x);\n    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat5.x = (-u_xlat10) + u_xlat5.x;\n    u_xlat5.x = unity_ShadowFadeCenterAndType.w * u_xlat5.x + u_xlat10;\n    u_xlat5.x = u_xlat5.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat1.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat1.xyz);\n    u_xlat15 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10 = sqrt(u_xlat10);\n    u_xlat10 = u_xlat10 * _LightPositionRange.w;\n    u_xlat10 = u_xlat10 * _LightProjectionParams.w;\n    u_xlatb10 = u_xlat15<u_xlat10;\n    u_xlat16_3.x = (u_xlatb10) ? _LightShadowData.x : 1.0;\n    u_xlat16_8 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat5.x * u_xlat16_8 + u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat1.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = textureCube(_LightTexture0, u_xlat5.xyz).w;\n    u_xlat10 = texture2D(_LightTextureB0, u_xlat1.xx).x;\n    u_xlat5.x = u_xlat5.x * u_xlat10;\n    u_xlat5.x = u_xlat16_3.x * u_xlat5.x;\n    u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nbool u_xlatb7;\nfloat u_xlat8;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_24;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat10_2 = textureCube(_ShadowMapTexture, u_xlat7.xyz);\n    u_xlat7.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat14 = sqrt(u_xlat1.x);\n    u_xlat14 = u_xlat14 * _LightPositionRange.w;\n    u_xlat14 = u_xlat14 * _LightProjectionParams.w;\n    u_xlatb7 = u_xlat7.x<u_xlat14;\n    u_xlat16_3.x = (u_xlatb7) ? _LightShadowData.x : 1.0;\n    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat7.x = texture2D(_LightTextureB0, vec2(u_xlat21)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat7.x;\n    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat4.xyz, (-u_xlat0.xyz));\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_24 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_3.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;\n    u_xlat16_24 = u_xlat16_5.x * u_xlat16_24 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_5.x;\n    u_xlat7.x = u_xlat1.x * u_xlat16_24;\n    u_xlat16_3.xyz = u_xlat7.xxx * u_xlat16_3.xyz;\n    u_xlat16_24 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_24);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat0.xzw;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nlowp vec3 u_xlat10_1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nmediump float u_xlat16_11;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nbool u_xlatb22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat8.xyz = u_xlat7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat7.xyz = u_xlat7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_11 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_11 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat7.x = texture2D(_LightTextureB0, vec2(u_xlat21)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat7.x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_5.xy = u_xlat16_5.xy * vec2(_BumpScale);\n    u_xlat16_6.xyz = u_xlat16_5.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyw = vs_TEXCOORD2.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vs_TEXCOORD4.xyz * u_xlat16_5.zzz + u_xlat16_5.xyw;\n    u_xlat16_0.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat16_0.xyz, (-u_xlat1.xyz));\n    u_xlat8.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat3.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat8.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = dot(u_xlat8.xyz, u_xlat2.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat15 = u_xlat8.x * u_xlat8.x;\n    u_xlat22 = u_xlat21 * u_xlat15 + (-u_xlat21);\n    u_xlat21 = u_xlat22 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat15 = u_xlat15 * 0.318309873;\n    u_xlat21 = u_xlat15 / u_xlat21;\n    u_xlat15 = (-u_xlat8.x) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat0.x * u_xlat15 + u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * abs(u_xlat1.x);\n    u_xlat16_25 = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat0.x * u_xlat22 + u_xlat8.x;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb22 = u_xlat16_26!=0.0;\n    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat22;\n    u_xlat2.xyz = u_xlat16_4.xyz * vec3(u_xlat21);\n    u_xlat16_26 = (-u_xlat7.x) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat7.x + u_xlat7.x;\n    u_xlat16_5.x = u_xlat7.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat14 + -0.5;\n    u_xlat16_25 = u_xlat16_5.x * u_xlat16_25 + 1.0;\n    u_xlat16_12 = (-u_xlat0.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_25;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nvec3 u_xlat12;\nmediump float u_xlat16_14;\nmediump float u_xlat16_16;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_25;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_32;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat29 = u_xlat29 * _LightPositionRange.w;\n    u_xlat29 = u_xlat29 * _LightProjectionParams.w;\n    u_xlat3.xyz = u_xlat2.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_4 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);\n    u_xlat1.w = dot(u_xlat10_4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat29));\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_5.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_14 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = u_xlat27 * u_xlat16_14 + u_xlat16_5.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.x = textureCube(_LightTexture0, u_xlat2.xyz).w;\n    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat27 = u_xlat16_5.x * u_xlat27;\n    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat27) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat6.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat6.xyz, u_xlat4.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat29 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat6.xyz, (-u_xlat2.xyz));\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat12.x = u_xlat20 * u_xlat20;\n    u_xlat21 = u_xlat27 * u_xlat12.x + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12.x = u_xlat12.x * 0.318309873;\n    u_xlat27 = u_xlat12.x / u_xlat27;\n    u_xlat12.x = (-u_xlat20) + 1.0;\n    u_xlat21 = abs(u_xlat2.x) * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat3.x * u_xlat12.x + u_xlat20;\n    u_xlat20 = u_xlat20 * abs(u_xlat2.x);\n    u_xlat16_32 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat21 + u_xlat20;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat3.x * u_xlat27;\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_34 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);\n    u_xlatb2 = u_xlat16_34!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat12.xyz = u_xlat16_5.xyz * vec3(u_xlat27);\n    u_xlat16_34 = (-u_xlat29) + 1.0;\n    u_xlat16_8.x = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_8.x;\n    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat29 + u_xlat29;\n    u_xlat16_7.x = u_xlat29 * u_xlat16_7.x;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat11 + -0.5;\n    u_xlat16_32 = u_xlat16_7.x * u_xlat16_32 + 1.0;\n    u_xlat16_16 = (-u_xlat3.x) + 1.0;\n    u_xlat16_25 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_25;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_16 + 1.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;\n    u_xlat27 = u_xlat3.x * u_xlat16_32;\n    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_32);\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz + u_xlat12.xyz;\n    u_xlat27 = vs_TEXCOORD1.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nlowp vec4 u_xlat10_1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat11;\nfloat u_xlat12;\nmediump float u_xlat16_14;\nmediump float u_xlat16_15;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_24;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 + (-u_xlat2.x);\n    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat27 + u_xlat2.x;\n    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat29 = sqrt(u_xlat29);\n    u_xlat29 = u_xlat29 * _LightPositionRange.w;\n    u_xlat29 = u_xlat29 * _LightProjectionParams.w;\n    u_xlat3.xyz = u_xlat2.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat3.xyz = u_xlat2.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_4 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);\n    u_xlat1.w = dot(u_xlat10_4, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat3.xyz, 0.0);\n    u_xlat1.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat1, vec4(u_xlat29));\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_5.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_14 = (-u_xlat16_5.x) + 1.0;\n    u_xlat16_5.x = u_xlat27 * u_xlat16_14 + u_xlat16_5.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.x = textureCube(_LightTexture0, u_xlat2.xyz).w;\n    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat27 = u_xlat16_5.x * u_xlat27;\n    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_6.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_6.xy = u_xlat16_6.xy * vec2(_BumpScale);\n    u_xlat16_7.xyz = u_xlat16_6.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyw = vs_TEXCOORD2.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vs_TEXCOORD4.xyz * u_xlat16_6.zzz + u_xlat16_6.xyw;\n    u_xlat16_27 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlat16_27 = inversesqrt(u_xlat16_27);\n    u_xlat16_2.xyz = vec3(u_xlat16_27) * u_xlat16_6.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat4.x = vs_TEXCOORD2.w;\n    u_xlat4.y = vs_TEXCOORD3.w;\n    u_xlat4.z = vs_TEXCOORD4.w;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat8.xyz = u_xlat4.xyz * vec3(u_xlat27) + (-u_xlat3.xyz);\n    u_xlat29 = dot(u_xlat16_2.xyz, (-u_xlat3.xyz));\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat8.xyz;\n    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat20 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat20 * u_xlat20;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat12 = u_xlat3.x * u_xlat3.x;\n    u_xlat21 = u_xlat27 * u_xlat12 + (-u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat27 = u_xlat12 / u_xlat27;\n    u_xlat12 = (-u_xlat3.x) + 1.0;\n    u_xlat21 = abs(u_xlat29) * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat12 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat29) * u_xlat3.x;\n    u_xlat16_32 = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat2.x * u_xlat21 + u_xlat3.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat2.x * u_xlat27;\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb29 = u_xlat16_33!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat3.xyz = u_xlat16_5.xyz * vec3(u_xlat27);\n    u_xlat16_33 = (-u_xlat11) + 1.0;\n    u_xlat16_7.x = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_33) + u_xlat16_6.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_6.xyz;\n    u_xlat16_6.x = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat11 + u_xlat11;\n    u_xlat16_6.x = u_xlat11 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat20 + -0.5;\n    u_xlat16_32 = u_xlat16_6.x * u_xlat16_32 + 1.0;\n    u_xlat16_15 = (-u_xlat2.x) + 1.0;\n    u_xlat16_24 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_24;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_15 + 1.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;\n    u_xlat27 = u_xlat2.x * u_xlat16_32;\n    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(u_xlat16_32);\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat3.xyz;\n    u_xlat27 = vs_TEXCOORD1.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nvec3 u_xlat9;\nmediump float u_xlat16_12;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat9.xyz = u_xlat8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat8.xyz = u_xlat8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat8.x = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9.x = u_xlat16 * u_xlat16;\n    u_xlat9.x = max(u_xlat9.x, 0.00200000009);\n    u_xlat17 = u_xlat9.x * u_xlat9.x;\n    u_xlat2.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9.x) + 1.0;\n    u_xlat2.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9.x;\n    u_xlat9.x = u_xlat1.x * u_xlat17 + u_xlat9.x;\n    u_xlat9.x = abs(u_xlat0.x) * u_xlat9.x;\n    u_xlat16_28 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat2.x + u_xlat9.x;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat10_8.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.xyw = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16 + -0.5;\n    u_xlat16_28 = u_xlat16_5.x * u_xlat16_28 + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_28;\n    u_xlat16_4.xyz = vec3(u_xlat16) * u_xlat16_4.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xyw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nmediump float u_xlat16_12;\nmediump float u_xlat16_14;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat8.x = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat8.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat8.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat9.xyz = u_xlat8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat9.xyz = u_xlat8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat8.xyz = u_xlat8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat9.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat8.x = texture2D(_LightTextureB0, vec2(u_xlat24)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8.x * u_xlat8.x;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9.x = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9.x + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9.x = u_xlat9.x * 0.318309873;\n    u_xlat24 = u_xlat9.x / u_xlat24;\n    u_xlat9.x = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9.x + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9.x + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_28 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_5.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_29 = (-u_xlat10_16) + 1.0;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat10_16) + vec3(u_xlat16_29);\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_6.xyz;\n    u_xlat16_29 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;\n    u_xlat16_29 = u_xlat25 + u_xlat25;\n    u_xlat16_29 = u_xlat25 * u_xlat16_29;\n    u_xlat16_29 = u_xlat16_29 * u_xlat8.x + -0.5;\n    u_xlat16_28 = u_xlat16_29 * u_xlat16_28 + 1.0;\n    u_xlat16_6.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_14;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x + 1.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;\n    u_xlat8.x = u_xlat1.x * u_xlat16_28;\n    u_xlat16_4.xyz = u_xlat8.xxx * u_xlat16_4.xyz;\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nmediump float u_xlat16_10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_17;\nfloat u_xlat18;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat6.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat6.x = dot(u_xlat6.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat6.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat6.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat7.xyz = u_xlat6.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat7.xyz = u_xlat6.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat7.xyz = u_xlat6.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat6.xyz = u_xlat6.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat6.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_10 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_10 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat6.x = texture2D(_LightTextureB0, vec2(u_xlat18)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat6.x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat18) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat18 = max(u_xlat18, 0.00100000005);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat16_22 = u_xlat18 + u_xlat18;\n    u_xlat16_22 = u_xlat18 * u_xlat16_22;\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat18 + -0.5;\n    u_xlat18 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat6.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat16_5.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_11 = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11;\n    u_xlat16_5.x = u_xlat16_22 * u_xlat16_5.x + 1.0;\n    u_xlat16_11 = (-u_xlat6.x) + 1.0;\n    u_xlat16_17 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_17;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_11 + 1.0;\n    u_xlat16_22 = u_xlat16_5.x * u_xlat16_22;\n    u_xlat0.x = u_xlat6.x * u_xlat16_22;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_22);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat0.xxx;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _LightPositionRange;\nuniform \tvec4 _LightProjectionParams;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp samplerCube _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nmediump float u_xlat16_11;\nmediump float u_xlat16_12;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD5.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat0.x = (-u_xlat7.x) + u_xlat0.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat7.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xyz = vs_TEXCOORD5.xyz + (-_LightPositionRange.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat1.x = sqrt(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _LightPositionRange.w;\n    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;\n    u_xlat8.xyz = u_xlat7.xyz + vec3(0.0078125, 0.0078125, 0.0078125);\n    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.x = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.y = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat8.xyz = u_xlat7.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);\n    u_xlat7.xyz = u_xlat7.xyz + vec3(0.0078125, -0.0078125, -0.0078125);\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);\n    u_xlat2.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat8.xyz, 0.0);\n    u_xlat2.z = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));\n    u_xlatb1 = lessThan(u_xlat2, u_xlat1.xxxx);\n    u_xlat1.x = (u_xlatb1.x) ? _LightShadowData.x : float(1.0);\n    u_xlat1.y = (u_xlatb1.y) ? _LightShadowData.x : float(1.0);\n    u_xlat1.z = (u_xlatb1.z) ? _LightShadowData.x : float(1.0);\n    u_xlat1.w = (u_xlatb1.w) ? _LightShadowData.x : float(1.0);\n    u_xlat16_4.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_11 = (-u_xlat16_4.x) + 1.0;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_11 + u_xlat16_4.x;\n    u_xlat0.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = textureCube(_LightTexture0, u_xlat0.xyz).w;\n    u_xlat7.x = texture2D(_LightTextureB0, vec2(u_xlat21)).x;\n    u_xlat0.x = u_xlat0.x * u_xlat7.x;\n    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8.x = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8.x + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8.x = u_xlat8.x * 0.318309873;\n    u_xlat21 = u_xlat8.x / u_xlat21;\n    u_xlat8.x = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8.x + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8.x + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_25 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_26 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb14 = u_xlat16_26!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat22 + u_xlat22;\n    u_xlat16_5.x = u_xlat22 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat7.x + -0.5;\n    u_xlat16_25 = u_xlat16_5.x * u_xlat16_25 + 1.0;\n    u_xlat16_12 = (-u_xlat1.x) + 1.0;\n    u_xlat16_19 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_19;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_12 + 1.0;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;\n    u_xlat7.x = u_xlat1.x * u_xlat16_25;\n    u_xlat16_4.xyz = u_xlat7.xxx * u_xlat16_4.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat10;\nfloat u_xlat14;\nmediump float u_xlat16_15;\nfloat u_xlat17;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nbool u_xlatb24;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_2.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_0.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_1.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat4.x = vs_TEXCOORD2.w;\n    u_xlat4.y = vs_TEXCOORD3.w;\n    u_xlat4.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + (-u_xlat3.xyz);\n    u_xlat3.x = dot(u_xlat16_0.xyz, (-u_xlat3.xyz));\n    u_xlat10.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat5.xyz;\n    u_xlat21 = dot(u_xlat16_0.xyz, u_xlat4.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat10.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7 = dot(u_xlat10.xyz, u_xlat4.xyz);\n    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);\n    u_xlat14 = (-_Glossiness) + 1.0;\n    u_xlat10.x = u_xlat14 * u_xlat14;\n    u_xlat10.x = max(u_xlat10.x, 0.00200000009);\n    u_xlat17 = u_xlat10.x * u_xlat10.x;\n    u_xlat24 = u_xlat21 * u_xlat17 + (-u_xlat21);\n    u_xlat21 = u_xlat24 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat21 = u_xlat17 / u_xlat21;\n    u_xlat17 = (-u_xlat10.x) + 1.0;\n    u_xlat24 = abs(u_xlat3.x) * u_xlat17 + u_xlat10.x;\n    u_xlat10.x = u_xlat0.x * u_xlat17 + u_xlat10.x;\n    u_xlat10.x = u_xlat10.x * abs(u_xlat3.x);\n    u_xlat16_1.x = -abs(u_xlat3.x) + 1.0;\n    u_xlat3.x = u_xlat0.x * u_xlat24 + u_xlat10.x;\n    u_xlat3.x = u_xlat3.x + 9.99999975e-06;\n    u_xlat3.x = 0.5 / u_xlat3.x;\n    u_xlat21 = u_xlat21 * u_xlat3.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat0.x * u_xlat21;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_8.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_3.xyz = u_xlat10_3.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_2.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);\n    u_xlatb24 = u_xlat16_2.x!=0.0;\n    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat24;\n    u_xlat4.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;\n    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = texture2D(_LightTexture0, vec2(u_xlat24)).x;\n    u_xlat16_2.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat16_2.xyz;\n    u_xlat16_23 = (-u_xlat7) + 1.0;\n    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_8.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_8.xyz;\n    u_xlat4.xyz = u_xlat16_8.xyz * u_xlat4.xyz;\n    u_xlat16_8.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;\n    u_xlat16_8.x = u_xlat7 + u_xlat7;\n    u_xlat16_8.x = u_xlat7 * u_xlat16_8.x;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat14 + -0.5;\n    u_xlat16_1.x = u_xlat16_8.x * u_xlat16_1.x + 1.0;\n    u_xlat16_15 = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_22;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_15 + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat4.xyz;\n    u_xlat21 = vs_TEXCOORD1.w;\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nvec3 u_xlat11;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat19;\nfloat u_xlat24;\nbool u_xlatb24;\nfloat u_xlat26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat24) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat5.xyz, u_xlat4.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat26 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat5.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));\n    u_xlat10 = (-_Glossiness) + 1.0;\n    u_xlat18 = u_xlat10 * u_xlat10;\n    u_xlat18 = max(u_xlat18, 0.00200000009);\n    u_xlat11.x = u_xlat18 * u_xlat18;\n    u_xlat19 = u_xlat24 * u_xlat11.x + (-u_xlat24);\n    u_xlat24 = u_xlat19 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat11.x = u_xlat11.x * 0.318309873;\n    u_xlat24 = u_xlat11.x / u_xlat24;\n    u_xlat11.x = (-u_xlat18) + 1.0;\n    u_xlat19 = abs(u_xlat2.x) * u_xlat11.x + u_xlat18;\n    u_xlat18 = u_xlat3.x * u_xlat11.x + u_xlat18;\n    u_xlat18 = u_xlat18 * abs(u_xlat2.x);\n    u_xlat16_1 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat19 + u_xlat18;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat3.x * u_xlat24;\n    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb2 = u_xlat16_6.x!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat11.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat11.xyz;\n    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);\n    u_xlat2.x = texture2D(_LightTexture0, u_xlat2.xx).x;\n    u_xlat16_6.xyz = u_xlat2.xxx * _LightColor0.xyz;\n    u_xlat11.xyz = vec3(u_xlat24) * u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat26) + 1.0;\n    u_xlat16_7.x = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_9.xyz;\n    u_xlat11.xyz = u_xlat16_9.xyz * u_xlat11.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_9.xxx;\n    u_xlat16_30 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat16_30 = u_xlat26 + u_xlat26;\n    u_xlat16_30 = u_xlat26 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * u_xlat10 + -0.5;\n    u_xlat16_1 = u_xlat16_30 * u_xlat16_1 + 1.0;\n    u_xlat16_7.x = (-u_xlat3.x) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat0.x = u_xlat3.x * u_xlat16_1;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz + u_xlat11.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _BumpScale;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat20;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nbool u_xlatb24;\nfloat u_xlat26;\nbool u_xlatb26;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat10_2.xyz = texture2D(_BumpMap, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(_BumpScale);\n    u_xlat16_3.xyz = u_xlat16_1.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_1.xyw = vs_TEXCOORD2.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD4.xyz * u_xlat16_1.zzz + u_xlat16_1.xyw;\n    u_xlat16_24 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat16_24 = inversesqrt(u_xlat16_24);\n    u_xlat16_2.xyz = vec3(u_xlat16_24) * u_xlat16_1.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat5.x = vs_TEXCOORD2.w;\n    u_xlat5.y = vs_TEXCOORD3.w;\n    u_xlat5.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat24) + (-u_xlat4.xyz);\n    u_xlat26 = dot(u_xlat16_2.xyz, (-u_xlat4.xyz));\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat5.xyz;\n    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = vec3(u_xlat24) * u_xlat6.xyz;\n    u_xlat24 = dot(u_xlat16_2.xyz, u_xlat5.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2 = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);\n    u_xlat10 = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);\n    u_xlat18 = (-_Glossiness) + 1.0;\n    u_xlat4.x = u_xlat18 * u_xlat18;\n    u_xlat4.x = max(u_xlat4.x, 0.00200000009);\n    u_xlat12 = u_xlat4.x * u_xlat4.x;\n    u_xlat20 = u_xlat24 * u_xlat12 + (-u_xlat24);\n    u_xlat24 = u_xlat20 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat12 = u_xlat12 * 0.318309873;\n    u_xlat24 = u_xlat12 / u_xlat24;\n    u_xlat12 = (-u_xlat4.x) + 1.0;\n    u_xlat20 = abs(u_xlat26) * u_xlat12 + u_xlat4.x;\n    u_xlat4.x = u_xlat2 * u_xlat12 + u_xlat4.x;\n    u_xlat4.x = abs(u_xlat26) * u_xlat4.x;\n    u_xlat16_1.x = -abs(u_xlat26) + 1.0;\n    u_xlat26 = u_xlat2 * u_xlat20 + u_xlat4.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 / u_xlat26;\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat2 * u_xlat24;\n    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_3.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb26 = u_xlat16_3.x!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat4.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat4.xyz;\n    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat26 = texture2D(_LightTexture0, vec2(u_xlat26)).x;\n    u_xlat16_3.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat16_3.xyz;\n    u_xlat16_27 = (-u_xlat10) + 1.0;\n    u_xlat16_7.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_7.xyz * vec3(u_xlat16_27) + u_xlat16_9.xyz;\n    u_xlat4.xyz = u_xlat16_9.xyz * u_xlat4.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * u_xlat16_9.xxx;\n    u_xlat16_27 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;\n    u_xlat16_27 = u_xlat10 + u_xlat10;\n    u_xlat16_27 = u_xlat10 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * u_xlat18 + -0.5;\n    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x + 1.0;\n    u_xlat16_7.x = (-u_xlat2) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_7.x + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;\n    u_xlat0.x = u_xlat2 * u_xlat16_1.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_3.xyz + u_xlat4.xyz;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tfloat _GlossMapScale;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _MetallicGlossMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nlowp vec2 u_xlat10_8;\nbool u_xlatb8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_12;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_20;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat10_8.xy = texture2D(_MetallicGlossMap, vs_TEXCOORD0.xy).xw;\n    u_xlat16 = (-u_xlat10_8.y) * _GlossMapScale + 1.0;\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat9 = max(u_xlat9, 0.00200000009);\n    u_xlat17 = u_xlat9 * u_xlat9;\n    u_xlat2.x = u_xlat24 * u_xlat17 + (-u_xlat24);\n    u_xlat24 = u_xlat2.x * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat17 = u_xlat17 * 0.318309873;\n    u_xlat24 = u_xlat17 / u_xlat24;\n    u_xlat17 = (-u_xlat9) + 1.0;\n    u_xlat2.x = abs(u_xlat0.x) * u_xlat17 + u_xlat9;\n    u_xlat9 = u_xlat1.x * u_xlat17 + u_xlat9;\n    u_xlat9 = abs(u_xlat0.x) * u_xlat9;\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat2.x + u_xlat9;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_12.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_12.xyz = u_xlat10_8.xxx * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = (-u_xlat10_8.x) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;\n    u_xlat16_29 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb8 = u_xlat16_29!=0.0;\n    u_xlat8 = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat8 * u_xlat0.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat8 = texture2D(_LightTexture0, vec2(u_xlat8)).x;\n    u_xlat16_6.xyz = vec3(u_xlat8) * _LightColor0.xyz;\n    u_xlat0.xyw = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_7.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_12.xyz;\n    u_xlat0.xyw = u_xlat0.xyw * u_xlat16_12.xyz;\n    u_xlat16_12.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12.x;\n    u_xlat16_12.x = u_xlat25 + u_xlat25;\n    u_xlat16_12.x = u_xlat25 * u_xlat16_12.x;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16 + -0.5;\n    u_xlat16_4.x = u_xlat16_12.x * u_xlat16_4.x + 1.0;\n    u_xlat16_20 = (-u_xlat1.x) + 1.0;\n    u_xlat16_28 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_28;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_20 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_12.x;\n    u_xlat16 = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = vec3(u_xlat16) * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xyw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _DetailMask;\nuniform lowp sampler2D _DetailAlbedoMap;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_12;\nmediump float u_xlat16_13;\nfloat u_xlat16;\nlowp float u_xlat10_16;\nbool u_xlatb16;\nfloat u_xlat17;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nfloat u_xlat25;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat24) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat8 = (-_Glossiness) + 1.0;\n    u_xlat16 = u_xlat8 * u_xlat8;\n    u_xlat16 = max(u_xlat16, 0.00200000009);\n    u_xlat9 = u_xlat16 * u_xlat16;\n    u_xlat17 = u_xlat24 * u_xlat9 + (-u_xlat24);\n    u_xlat24 = u_xlat17 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat9 = u_xlat9 * 0.318309873;\n    u_xlat24 = u_xlat9 / u_xlat24;\n    u_xlat9 = (-u_xlat16) + 1.0;\n    u_xlat17 = abs(u_xlat0.x) * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat1.x * u_xlat9 + u_xlat16;\n    u_xlat16 = u_xlat16 * abs(u_xlat0.x);\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat17 + u_xlat16;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat24 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_DetailAlbedoMap, vs_TEXCOORD0.zw).xyz;\n    u_xlat16_12.xyz = u_xlat10_2.xyz + u_xlat10_2.xyz;\n    u_xlat10_16 = texture2D(_DetailMask, vs_TEXCOORD0.xy).w;\n    u_xlat16_5.x = (-u_xlat10_16) + 1.0;\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat10_16) + u_xlat16_5.xxx;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_12.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_2.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_29 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n    u_xlatb16 = u_xlat16_29!=0.0;\n    u_xlat16 = u_xlatb16 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat16 * u_xlat0.x;\n    u_xlat2.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat16 = texture2D(_LightTexture0, vec2(u_xlat16)).x;\n    u_xlat16_6.xyz = vec3(u_xlat16) * _LightColor0.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_29 = (-u_xlat25) + 1.0;\n    u_xlat16_30 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat25 + u_xlat25;\n    u_xlat16_5.x = u_xlat25 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat8 + -0.5;\n    u_xlat16_4.x = u_xlat16_5.x * u_xlat16_4.x + 1.0;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_21 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_21;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;\n    u_xlat8 = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_5.xyz = vec3(u_xlat8) * u_xlat16_6.xyz;\n    u_xlat16_4.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat0.xzw;\n    u_xlat24 = vs_TEXCOORD1.w;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat15 + u_xlat15;\n    u_xlat16_3.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_13 = (-u_xlat5.x) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat5.x * u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xx).x;\n    u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_18);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat0.x = vs_TEXCOORD1.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"]